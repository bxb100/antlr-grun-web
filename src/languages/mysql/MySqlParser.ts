// Generated from src/languages/MySqlParser.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { MySqlParserListener } from "./MySqlParserListener";
import { MySqlParserVisitor } from "./MySqlParserVisitor";


export class MySqlParser extends Parser {
	public static readonly DELIMITER = 1;
	public static readonly WS = 2;
	public static readonly SPEC_MYSQL_COMMENT = 3;
	public static readonly COMMENT_INPUT = 4;
	public static readonly LINE_COMMENT = 5;
	public static readonly ADD = 6;
	public static readonly ALL = 7;
	public static readonly ALTER = 8;
	public static readonly ALWAYS = 9;
	public static readonly ANALYZE = 10;
	public static readonly AND = 11;
	public static readonly AS = 12;
	public static readonly ASC = 13;
	public static readonly BEFORE = 14;
	public static readonly BETWEEN = 15;
	public static readonly BOTH = 16;
	public static readonly BY = 17;
	public static readonly CALL = 18;
	public static readonly CASCADE = 19;
	public static readonly CASE = 20;
	public static readonly CAST = 21;
	public static readonly CHANGE = 22;
	public static readonly CHARACTER = 23;
	public static readonly CHECK = 24;
	public static readonly COLLATE = 25;
	public static readonly COLUMN = 26;
	public static readonly CONDITION = 27;
	public static readonly CONSTRAINT = 28;
	public static readonly CONTINUE = 29;
	public static readonly CONVERT = 30;
	public static readonly CREATE = 31;
	public static readonly CROSS = 32;
	public static readonly CURRENT_USER = 33;
	public static readonly CURSOR = 34;
	public static readonly DATABASE = 35;
	public static readonly DATABASES = 36;
	public static readonly DECLARE = 37;
	public static readonly DEFAULT = 38;
	public static readonly DELAYED = 39;
	public static readonly DELETE = 40;
	public static readonly DESC = 41;
	public static readonly DESCRIBE = 42;
	public static readonly DETERMINISTIC = 43;
	public static readonly DISTINCT = 44;
	public static readonly DISTINCTROW = 45;
	public static readonly DROP = 46;
	public static readonly EACH = 47;
	public static readonly ELSE = 48;
	public static readonly ELSEIF = 49;
	public static readonly ENCLOSED = 50;
	public static readonly ESCAPED = 51;
	public static readonly EXISTS = 52;
	public static readonly EXIT = 53;
	public static readonly EXPLAIN = 54;
	public static readonly FALSE = 55;
	public static readonly FETCH = 56;
	public static readonly FOR = 57;
	public static readonly FORCE = 58;
	public static readonly FOREIGN = 59;
	public static readonly FROM = 60;
	public static readonly FULLTEXT = 61;
	public static readonly GENERATED = 62;
	public static readonly GRANT = 63;
	public static readonly GROUP = 64;
	public static readonly HAVING = 65;
	public static readonly HIGH_PRIORITY = 66;
	public static readonly IF = 67;
	public static readonly IGNORE = 68;
	public static readonly IN = 69;
	public static readonly INDEX = 70;
	public static readonly INFILE = 71;
	public static readonly INNER = 72;
	public static readonly INOUT = 73;
	public static readonly INSERT = 74;
	public static readonly INTERVAL = 75;
	public static readonly INTO = 76;
	public static readonly IS = 77;
	public static readonly ITERATE = 78;
	public static readonly JOIN = 79;
	public static readonly KEY = 80;
	public static readonly KEYS = 81;
	public static readonly KILL = 82;
	public static readonly LEADING = 83;
	public static readonly LEAVE = 84;
	public static readonly LEFT = 85;
	public static readonly LIKE = 86;
	public static readonly LIMIT = 87;
	public static readonly LINEAR = 88;
	public static readonly LINES = 89;
	public static readonly LOAD = 90;
	public static readonly LOCK = 91;
	public static readonly LOOP = 92;
	public static readonly LOW_PRIORITY = 93;
	public static readonly MASTER_BIND = 94;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT = 95;
	public static readonly MATCH = 96;
	public static readonly MAXVALUE = 97;
	public static readonly MODIFIES = 98;
	public static readonly NATURAL = 99;
	public static readonly NOT = 100;
	public static readonly NO_WRITE_TO_BINLOG = 101;
	public static readonly NULL_LITERAL = 102;
	public static readonly ON = 103;
	public static readonly OPTIMIZE = 104;
	public static readonly OPTION = 105;
	public static readonly OPTIONALLY = 106;
	public static readonly OR = 107;
	public static readonly ORDER = 108;
	public static readonly OUT = 109;
	public static readonly OUTER = 110;
	public static readonly OUTFILE = 111;
	public static readonly PARTITION = 112;
	public static readonly PRIMARY = 113;
	public static readonly PROCEDURE = 114;
	public static readonly PURGE = 115;
	public static readonly RANGE = 116;
	public static readonly READ = 117;
	public static readonly READS = 118;
	public static readonly REFERENCES = 119;
	public static readonly REGEXP = 120;
	public static readonly RELEASE = 121;
	public static readonly RENAME = 122;
	public static readonly REPEAT = 123;
	public static readonly REPLACE = 124;
	public static readonly REQUIRE = 125;
	public static readonly RESTRICT = 126;
	public static readonly RETURN = 127;
	public static readonly REVOKE = 128;
	public static readonly RIGHT = 129;
	public static readonly RLIKE = 130;
	public static readonly SCHEMA = 131;
	public static readonly SCHEMAS = 132;
	public static readonly SELECT = 133;
	public static readonly SET = 134;
	public static readonly SEPARATOR = 135;
	public static readonly SHOW = 136;
	public static readonly SPATIAL = 137;
	public static readonly SQL = 138;
	public static readonly SQLEXCEPTION = 139;
	public static readonly SQLSTATE = 140;
	public static readonly SQLWARNING = 141;
	public static readonly SQL_BIG_RESULT = 142;
	public static readonly SQL_CALC_FOUND_ROWS = 143;
	public static readonly SQL_SMALL_RESULT = 144;
	public static readonly SSL = 145;
	public static readonly STARTING = 146;
	public static readonly STRAIGHT_JOIN = 147;
	public static readonly TABLE = 148;
	public static readonly TERMINATED = 149;
	public static readonly THEN = 150;
	public static readonly TO = 151;
	public static readonly TRAILING = 152;
	public static readonly TRIGGER = 153;
	public static readonly TRUE = 154;
	public static readonly UNDO = 155;
	public static readonly UNION = 156;
	public static readonly UNIQUE = 157;
	public static readonly UNLOCK = 158;
	public static readonly UNSIGNED = 159;
	public static readonly UPDATE = 160;
	public static readonly USAGE = 161;
	public static readonly USE = 162;
	public static readonly USING = 163;
	public static readonly VALUES = 164;
	public static readonly WHEN = 165;
	public static readonly WHERE = 166;
	public static readonly WHILE = 167;
	public static readonly WITH = 168;
	public static readonly WRITE = 169;
	public static readonly XOR = 170;
	public static readonly ZEROFILL = 171;
	public static readonly TINYINT = 172;
	public static readonly SMALLINT = 173;
	public static readonly MEDIUMINT = 174;
	public static readonly INT = 175;
	public static readonly INTEGER = 176;
	public static readonly BIGINT = 177;
	public static readonly REAL = 178;
	public static readonly DOUBLE = 179;
	public static readonly FLOAT = 180;
	public static readonly DECIMAL = 181;
	public static readonly NUMERIC = 182;
	public static readonly DATE = 183;
	public static readonly TIME = 184;
	public static readonly TIMESTAMP = 185;
	public static readonly DATETIME = 186;
	public static readonly YEAR = 187;
	public static readonly CHAR = 188;
	public static readonly VARCHAR = 189;
	public static readonly BINARY = 190;
	public static readonly VARBINARY = 191;
	public static readonly TINYBLOB = 192;
	public static readonly BLOB = 193;
	public static readonly MEDIUMBLOB = 194;
	public static readonly LONGBLOB = 195;
	public static readonly TINYTEXT = 196;
	public static readonly TEXT = 197;
	public static readonly MEDIUMTEXT = 198;
	public static readonly LONGTEXT = 199;
	public static readonly ENUM = 200;
	public static readonly SERIAL = 201;
	public static readonly YEAR_MONTH = 202;
	public static readonly DAY_HOUR = 203;
	public static readonly DAY_MINUTE = 204;
	public static readonly DAY_SECOND = 205;
	public static readonly HOUR_MINUTE = 206;
	public static readonly HOUR_SECOND = 207;
	public static readonly MINUTE_SECOND = 208;
	public static readonly SECOND_MICROSECOND = 209;
	public static readonly MINUTE_MICROSECOND = 210;
	public static readonly HOUR_MICROSECOND = 211;
	public static readonly DAY_MICROSECOND = 212;
	public static readonly AVG = 213;
	public static readonly BIT_AND = 214;
	public static readonly BIT_OR = 215;
	public static readonly BIT_XOR = 216;
	public static readonly COUNT = 217;
	public static readonly GROUP_CONCAT = 218;
	public static readonly MAX = 219;
	public static readonly MIN = 220;
	public static readonly STD = 221;
	public static readonly STDDEV = 222;
	public static readonly STDDEV_POP = 223;
	public static readonly STDDEV_SAMP = 224;
	public static readonly SUM = 225;
	public static readonly VAR_POP = 226;
	public static readonly VAR_SAMP = 227;
	public static readonly VARIANCE = 228;
	public static readonly CURRENT_DATE = 229;
	public static readonly CURRENT_TIME = 230;
	public static readonly CURRENT_TIMESTAMP = 231;
	public static readonly LOCALTIME = 232;
	public static readonly CURDATE = 233;
	public static readonly CURTIME = 234;
	public static readonly DATE_ADD = 235;
	public static readonly DATE_SUB = 236;
	public static readonly EXTRACT = 237;
	public static readonly LOCALTIMESTAMP = 238;
	public static readonly NOW = 239;
	public static readonly POSITION = 240;
	public static readonly SUBSTR = 241;
	public static readonly SUBSTRING = 242;
	public static readonly SYSDATE = 243;
	public static readonly TRIM = 244;
	public static readonly UTC_DATE = 245;
	public static readonly UTC_TIME = 246;
	public static readonly UTC_TIMESTAMP = 247;
	public static readonly ACCOUNT = 248;
	public static readonly ACTION = 249;
	public static readonly AFTER = 250;
	public static readonly AGGREGATE = 251;
	public static readonly ALGORITHM = 252;
	public static readonly ANY = 253;
	public static readonly AT = 254;
	public static readonly AUTHORS = 255;
	public static readonly AUTOCOMMIT = 256;
	public static readonly AUTOEXTEND_SIZE = 257;
	public static readonly AUTO_INCREMENT = 258;
	public static readonly AVG_ROW_LENGTH = 259;
	public static readonly BEGIN = 260;
	public static readonly BINLOG = 261;
	public static readonly BIT = 262;
	public static readonly BLOCK = 263;
	public static readonly BOOL = 264;
	public static readonly BOOLEAN = 265;
	public static readonly BTREE = 266;
	public static readonly CACHE = 267;
	public static readonly CASCADED = 268;
	public static readonly CHAIN = 269;
	public static readonly CHANGED = 270;
	public static readonly CHANNEL = 271;
	public static readonly CHECKSUM = 272;
	public static readonly CIPHER = 273;
	public static readonly CLIENT = 274;
	public static readonly CLOSE = 275;
	public static readonly COALESCE = 276;
	public static readonly CODE = 277;
	public static readonly COLUMNS = 278;
	public static readonly COLUMN_FORMAT = 279;
	public static readonly COMMENT = 280;
	public static readonly COMMIT = 281;
	public static readonly COMPACT = 282;
	public static readonly COMPLETION = 283;
	public static readonly COMPRESSED = 284;
	public static readonly COMPRESSION = 285;
	public static readonly CONCURRENT = 286;
	public static readonly CONNECTION = 287;
	public static readonly CONSISTENT = 288;
	public static readonly CONTAINS = 289;
	public static readonly CONTEXT = 290;
	public static readonly CONTRIBUTORS = 291;
	public static readonly COPY = 292;
	public static readonly CPU = 293;
	public static readonly DATA = 294;
	public static readonly DATAFILE = 295;
	public static readonly DEALLOCATE = 296;
	public static readonly DEFAULT_AUTH = 297;
	public static readonly DEFINER = 298;
	public static readonly DELAY_KEY_WRITE = 299;
	public static readonly DES_KEY_FILE = 300;
	public static readonly DIRECTORY = 301;
	public static readonly DISABLE = 302;
	public static readonly DISCARD = 303;
	public static readonly DISK = 304;
	public static readonly DO = 305;
	public static readonly DUMPFILE = 306;
	public static readonly DUPLICATE = 307;
	public static readonly DYNAMIC = 308;
	public static readonly ENABLE = 309;
	public static readonly ENCRYPTION = 310;
	public static readonly END = 311;
	public static readonly ENDS = 312;
	public static readonly ENGINE = 313;
	public static readonly ENGINES = 314;
	public static readonly ERROR = 315;
	public static readonly ERRORS = 316;
	public static readonly ESCAPE = 317;
	public static readonly EVEN = 318;
	public static readonly EVENT = 319;
	public static readonly EVENTS = 320;
	public static readonly EVERY = 321;
	public static readonly EXCHANGE = 322;
	public static readonly EXCLUSIVE = 323;
	public static readonly EXPIRE = 324;
	public static readonly EXPORT = 325;
	public static readonly EXTENDED = 326;
	public static readonly EXTENT_SIZE = 327;
	public static readonly FAST = 328;
	public static readonly FAULTS = 329;
	public static readonly FIELDS = 330;
	public static readonly FILE_BLOCK_SIZE = 331;
	public static readonly FILTER = 332;
	public static readonly FIRST = 333;
	public static readonly FIXED = 334;
	public static readonly FLUSH = 335;
	public static readonly FOLLOWS = 336;
	public static readonly FOUND = 337;
	public static readonly FULL = 338;
	public static readonly FUNCTION = 339;
	public static readonly GENERAL = 340;
	public static readonly GLOBAL = 341;
	public static readonly GRANTS = 342;
	public static readonly GROUP_REPLICATION = 343;
	public static readonly HANDLER = 344;
	public static readonly HASH = 345;
	public static readonly HELP = 346;
	public static readonly HOST = 347;
	public static readonly HOSTS = 348;
	public static readonly IDENTIFIED = 349;
	public static readonly IGNORE_SERVER_IDS = 350;
	public static readonly IMPORT = 351;
	public static readonly INDEXES = 352;
	public static readonly INITIAL_SIZE = 353;
	public static readonly INPLACE = 354;
	public static readonly INSERT_METHOD = 355;
	public static readonly INSTALL = 356;
	public static readonly INSTANCE = 357;
	public static readonly INVOKER = 358;
	public static readonly IO = 359;
	public static readonly IO_THREAD = 360;
	public static readonly IPC = 361;
	public static readonly ISOLATION = 362;
	public static readonly ISSUER = 363;
	public static readonly JSON = 364;
	public static readonly KEY_BLOCK_SIZE = 365;
	public static readonly LANGUAGE = 366;
	public static readonly LAST = 367;
	public static readonly LEAVES = 368;
	public static readonly LESS = 369;
	public static readonly LEVEL = 370;
	public static readonly LIST = 371;
	public static readonly LOCAL = 372;
	public static readonly LOGFILE = 373;
	public static readonly LOGS = 374;
	public static readonly MASTER = 375;
	public static readonly MASTER_AUTO_POSITION = 376;
	public static readonly MASTER_CONNECT_RETRY = 377;
	public static readonly MASTER_DELAY = 378;
	public static readonly MASTER_HEARTBEAT_PERIOD = 379;
	public static readonly MASTER_HOST = 380;
	public static readonly MASTER_LOG_FILE = 381;
	public static readonly MASTER_LOG_POS = 382;
	public static readonly MASTER_PASSWORD = 383;
	public static readonly MASTER_PORT = 384;
	public static readonly MASTER_RETRY_COUNT = 385;
	public static readonly MASTER_SSL = 386;
	public static readonly MASTER_SSL_CA = 387;
	public static readonly MASTER_SSL_CAPATH = 388;
	public static readonly MASTER_SSL_CERT = 389;
	public static readonly MASTER_SSL_CIPHER = 390;
	public static readonly MASTER_SSL_CRL = 391;
	public static readonly MASTER_SSL_CRLPATH = 392;
	public static readonly MASTER_SSL_KEY = 393;
	public static readonly MASTER_TLS_VERSION = 394;
	public static readonly MASTER_USER = 395;
	public static readonly MAX_CONNECTIONS_PER_HOUR = 396;
	public static readonly MAX_QUERIES_PER_HOUR = 397;
	public static readonly MAX_ROWS = 398;
	public static readonly MAX_SIZE = 399;
	public static readonly MAX_UPDATES_PER_HOUR = 400;
	public static readonly MAX_USER_CONNECTIONS = 401;
	public static readonly MEDIUM = 402;
	public static readonly MERGE = 403;
	public static readonly MID = 404;
	public static readonly MIGRATE = 405;
	public static readonly MIN_ROWS = 406;
	public static readonly MODE = 407;
	public static readonly MODIFY = 408;
	public static readonly MUTEX = 409;
	public static readonly MYSQL = 410;
	public static readonly NAME = 411;
	public static readonly NAMES = 412;
	public static readonly NCHAR = 413;
	public static readonly NEVER = 414;
	public static readonly NEXT = 415;
	public static readonly NO = 416;
	public static readonly NODEGROUP = 417;
	public static readonly NONE = 418;
	public static readonly OFFLINE = 419;
	public static readonly OFFSET = 420;
	public static readonly OJ = 421;
	public static readonly OLD_PASSWORD = 422;
	public static readonly ONE = 423;
	public static readonly ONLINE = 424;
	public static readonly ONLY = 425;
	public static readonly OPEN = 426;
	public static readonly OPTIMIZER_COSTS = 427;
	public static readonly OPTIONS = 428;
	public static readonly OWNER = 429;
	public static readonly PACK_KEYS = 430;
	public static readonly PAGE = 431;
	public static readonly PARSER = 432;
	public static readonly PARTIAL = 433;
	public static readonly PARTITIONING = 434;
	public static readonly PARTITIONS = 435;
	public static readonly PASSWORD = 436;
	public static readonly PHASE = 437;
	public static readonly PLUGIN = 438;
	public static readonly PLUGIN_DIR = 439;
	public static readonly PLUGINS = 440;
	public static readonly PORT = 441;
	public static readonly PRECEDES = 442;
	public static readonly PREPARE = 443;
	public static readonly PRESERVE = 444;
	public static readonly PREV = 445;
	public static readonly PROCESSLIST = 446;
	public static readonly PROFILE = 447;
	public static readonly PROFILES = 448;
	public static readonly PROXY = 449;
	public static readonly QUERY = 450;
	public static readonly QUICK = 451;
	public static readonly REBUILD = 452;
	public static readonly RECOVER = 453;
	public static readonly REDO_BUFFER_SIZE = 454;
	public static readonly REDUNDANT = 455;
	public static readonly RELAY = 456;
	public static readonly RELAY_LOG_FILE = 457;
	public static readonly RELAY_LOG_POS = 458;
	public static readonly RELAYLOG = 459;
	public static readonly REMOVE = 460;
	public static readonly REORGANIZE = 461;
	public static readonly REPAIR = 462;
	public static readonly REPLICATE_DO_DB = 463;
	public static readonly REPLICATE_DO_TABLE = 464;
	public static readonly REPLICATE_IGNORE_DB = 465;
	public static readonly REPLICATE_IGNORE_TABLE = 466;
	public static readonly REPLICATE_REWRITE_DB = 467;
	public static readonly REPLICATE_WILD_DO_TABLE = 468;
	public static readonly REPLICATE_WILD_IGNORE_TABLE = 469;
	public static readonly REPLICATION = 470;
	public static readonly RESET = 471;
	public static readonly RESUME = 472;
	public static readonly RETURNS = 473;
	public static readonly ROLLBACK = 474;
	public static readonly ROLLUP = 475;
	public static readonly ROTATE = 476;
	public static readonly ROW = 477;
	public static readonly ROWS = 478;
	public static readonly ROW_FORMAT = 479;
	public static readonly SAVEPOINT = 480;
	public static readonly SCHEDULE = 481;
	public static readonly SECURITY = 482;
	public static readonly SERVER = 483;
	public static readonly SESSION = 484;
	public static readonly SHARE = 485;
	public static readonly SHARED = 486;
	public static readonly SIGNED = 487;
	public static readonly SIMPLE = 488;
	public static readonly SLAVE = 489;
	public static readonly SLOW = 490;
	public static readonly SNAPSHOT = 491;
	public static readonly SOCKET = 492;
	public static readonly SOME = 493;
	public static readonly SONAME = 494;
	public static readonly SOUNDS = 495;
	public static readonly SOURCE = 496;
	public static readonly SQL_AFTER_GTIDS = 497;
	public static readonly SQL_AFTER_MTS_GAPS = 498;
	public static readonly SQL_BEFORE_GTIDS = 499;
	public static readonly SQL_BUFFER_RESULT = 500;
	public static readonly SQL_CACHE = 501;
	public static readonly SQL_NO_CACHE = 502;
	public static readonly SQL_THREAD = 503;
	public static readonly START = 504;
	public static readonly STARTS = 505;
	public static readonly STATS_AUTO_RECALC = 506;
	public static readonly STATS_PERSISTENT = 507;
	public static readonly STATS_SAMPLE_PAGES = 508;
	public static readonly STATUS = 509;
	public static readonly STOP = 510;
	public static readonly STORAGE = 511;
	public static readonly STORED = 512;
	public static readonly STRING = 513;
	public static readonly SUBJECT = 514;
	public static readonly SUBPARTITION = 515;
	public static readonly SUBPARTITIONS = 516;
	public static readonly SUSPEND = 517;
	public static readonly SWAPS = 518;
	public static readonly SWITCHES = 519;
	public static readonly TABLESPACE = 520;
	public static readonly TEMPORARY = 521;
	public static readonly TEMPTABLE = 522;
	public static readonly THAN = 523;
	public static readonly TRADITIONAL = 524;
	public static readonly TRANSACTION = 525;
	public static readonly TRIGGERS = 526;
	public static readonly TRUNCATE = 527;
	public static readonly UNDEFINED = 528;
	public static readonly UNDOFILE = 529;
	public static readonly UNDO_BUFFER_SIZE = 530;
	public static readonly UNINSTALL = 531;
	public static readonly UNKNOWN = 532;
	public static readonly UNTIL = 533;
	public static readonly UPGRADE = 534;
	public static readonly USER = 535;
	public static readonly USE_FRM = 536;
	public static readonly USER_RESOURCES = 537;
	public static readonly VALIDATION = 538;
	public static readonly VALUE = 539;
	public static readonly VARIABLES = 540;
	public static readonly VIEW = 541;
	public static readonly VIRTUAL = 542;
	public static readonly WAIT = 543;
	public static readonly WARNINGS = 544;
	public static readonly WITHOUT = 545;
	public static readonly WORK = 546;
	public static readonly WRAPPER = 547;
	public static readonly X509 = 548;
	public static readonly XA = 549;
	public static readonly XML = 550;
	public static readonly EUR = 551;
	public static readonly USA = 552;
	public static readonly JIS = 553;
	public static readonly ISO = 554;
	public static readonly INTERNAL = 555;
	public static readonly QUARTER = 556;
	public static readonly MONTH = 557;
	public static readonly DAY = 558;
	public static readonly HOUR = 559;
	public static readonly MINUTE = 560;
	public static readonly WEEK = 561;
	public static readonly SECOND = 562;
	public static readonly MICROSECOND = 563;
	public static readonly TABLES = 564;
	public static readonly ROUTINE = 565;
	public static readonly EXECUTE = 566;
	public static readonly FILE = 567;
	public static readonly PROCESS = 568;
	public static readonly RELOAD = 569;
	public static readonly SHUTDOWN = 570;
	public static readonly SUPER = 571;
	public static readonly PRIVILEGES = 572;
	public static readonly ARMSCII8 = 573;
	public static readonly ASCII = 574;
	public static readonly BIG5 = 575;
	public static readonly CP1250 = 576;
	public static readonly CP1251 = 577;
	public static readonly CP1256 = 578;
	public static readonly CP1257 = 579;
	public static readonly CP850 = 580;
	public static readonly CP852 = 581;
	public static readonly CP866 = 582;
	public static readonly CP932 = 583;
	public static readonly DEC8 = 584;
	public static readonly EUCJPMS = 585;
	public static readonly EUCKR = 586;
	public static readonly GB2312 = 587;
	public static readonly GBK = 588;
	public static readonly GEOSTD8 = 589;
	public static readonly GREEK = 590;
	public static readonly HEBREW = 591;
	public static readonly HP8 = 592;
	public static readonly KEYBCS2 = 593;
	public static readonly KOI8R = 594;
	public static readonly KOI8U = 595;
	public static readonly LATIN1 = 596;
	public static readonly LATIN2 = 597;
	public static readonly LATIN5 = 598;
	public static readonly LATIN7 = 599;
	public static readonly MACCE = 600;
	public static readonly MACROMAN = 601;
	public static readonly SJIS = 602;
	public static readonly SWE7 = 603;
	public static readonly TIS620 = 604;
	public static readonly UCS2 = 605;
	public static readonly UJIS = 606;
	public static readonly UTF16 = 607;
	public static readonly UTF16LE = 608;
	public static readonly UTF32 = 609;
	public static readonly UTF8 = 610;
	public static readonly UTF8MB3 = 611;
	public static readonly UTF8MB4 = 612;
	public static readonly ARCHIVE = 613;
	public static readonly BLACKHOLE = 614;
	public static readonly CSV = 615;
	public static readonly FEDERATED = 616;
	public static readonly INNODB = 617;
	public static readonly MEMORY = 618;
	public static readonly MRG_MYISAM = 619;
	public static readonly MYISAM = 620;
	public static readonly NDB = 621;
	public static readonly NDBCLUSTER = 622;
	public static readonly PERFOMANCE_SCHEMA = 623;
	public static readonly REPEATABLE = 624;
	public static readonly COMMITTED = 625;
	public static readonly UNCOMMITTED = 626;
	public static readonly SERIALIZABLE = 627;
	public static readonly GEOMETRYCOLLECTION = 628;
	public static readonly LINESTRING = 629;
	public static readonly MULTILINESTRING = 630;
	public static readonly MULTIPOINT = 631;
	public static readonly MULTIPOLYGON = 632;
	public static readonly POINT = 633;
	public static readonly POLYGON = 634;
	public static readonly ABS = 635;
	public static readonly ACOS = 636;
	public static readonly ADDDATE = 637;
	public static readonly ADDTIME = 638;
	public static readonly AES_DECRYPT = 639;
	public static readonly AES_ENCRYPT = 640;
	public static readonly AREA = 641;
	public static readonly ASBINARY = 642;
	public static readonly ASIN = 643;
	public static readonly ASTEXT = 644;
	public static readonly ASWKB = 645;
	public static readonly ASWKT = 646;
	public static readonly ASYMMETRIC_DECRYPT = 647;
	public static readonly ASYMMETRIC_DERIVE = 648;
	public static readonly ASYMMETRIC_ENCRYPT = 649;
	public static readonly ASYMMETRIC_SIGN = 650;
	public static readonly ASYMMETRIC_VERIFY = 651;
	public static readonly ATAN = 652;
	public static readonly ATAN2 = 653;
	public static readonly BENCHMARK = 654;
	public static readonly BIN = 655;
	public static readonly BIT_COUNT = 656;
	public static readonly BIT_LENGTH = 657;
	public static readonly BUFFER = 658;
	public static readonly CEIL = 659;
	public static readonly CEILING = 660;
	public static readonly CENTROID = 661;
	public static readonly CHARACTER_LENGTH = 662;
	public static readonly CHARSET = 663;
	public static readonly CHAR_LENGTH = 664;
	public static readonly COERCIBILITY = 665;
	public static readonly COLLATION = 666;
	public static readonly COMPRESS = 667;
	public static readonly CONCAT = 668;
	public static readonly CONCAT_WS = 669;
	public static readonly CONNECTION_ID = 670;
	public static readonly CONV = 671;
	public static readonly CONVERT_TZ = 672;
	public static readonly COS = 673;
	public static readonly COT = 674;
	public static readonly CRC32 = 675;
	public static readonly CREATE_ASYMMETRIC_PRIV_KEY = 676;
	public static readonly CREATE_ASYMMETRIC_PUB_KEY = 677;
	public static readonly CREATE_DH_PARAMETERS = 678;
	public static readonly CREATE_DIGEST = 679;
	public static readonly CROSSES = 680;
	public static readonly DATEDIFF = 681;
	public static readonly DATE_FORMAT = 682;
	public static readonly DAYNAME = 683;
	public static readonly DAYOFMONTH = 684;
	public static readonly DAYOFWEEK = 685;
	public static readonly DAYOFYEAR = 686;
	public static readonly DECODE = 687;
	public static readonly DEGREES = 688;
	public static readonly DES_DECRYPT = 689;
	public static readonly DES_ENCRYPT = 690;
	public static readonly DIMENSION = 691;
	public static readonly DISJOINT = 692;
	public static readonly ELT = 693;
	public static readonly ENCODE = 694;
	public static readonly ENCRYPT = 695;
	public static readonly ENDPOINT = 696;
	public static readonly ENVELOPE = 697;
	public static readonly EQUALS = 698;
	public static readonly EXP = 699;
	public static readonly EXPORT_SET = 700;
	public static readonly EXTERIORRING = 701;
	public static readonly EXTRACTVALUE = 702;
	public static readonly FIELD = 703;
	public static readonly FIND_IN_SET = 704;
	public static readonly FLOOR = 705;
	public static readonly FORMAT = 706;
	public static readonly FOUND_ROWS = 707;
	public static readonly FROM_BASE64 = 708;
	public static readonly FROM_DAYS = 709;
	public static readonly FROM_UNIXTIME = 710;
	public static readonly GEOMCOLLFROMTEXT = 711;
	public static readonly GEOMCOLLFROMWKB = 712;
	public static readonly GEOMETRYCOLLECTIONFROMTEXT = 713;
	public static readonly GEOMETRYCOLLECTIONFROMWKB = 714;
	public static readonly GEOMETRYFROMTEXT = 715;
	public static readonly GEOMETRYFROMWKB = 716;
	public static readonly GEOMETRYN = 717;
	public static readonly GEOMETRYTYPE = 718;
	public static readonly GEOMFROMTEXT = 719;
	public static readonly GEOMFROMWKB = 720;
	public static readonly GET_FORMAT = 721;
	public static readonly GET_LOCK = 722;
	public static readonly GLENGTH = 723;
	public static readonly GREATEST = 724;
	public static readonly GTID_SUBSET = 725;
	public static readonly GTID_SUBTRACT = 726;
	public static readonly HEX = 727;
	public static readonly IFNULL = 728;
	public static readonly INET6_ATON = 729;
	public static readonly INET6_NTOA = 730;
	public static readonly INET_ATON = 731;
	public static readonly INET_NTOA = 732;
	public static readonly INSTR = 733;
	public static readonly INTERIORRINGN = 734;
	public static readonly INTERSECTS = 735;
	public static readonly ISCLOSED = 736;
	public static readonly ISEMPTY = 737;
	public static readonly ISNULL = 738;
	public static readonly ISSIMPLE = 739;
	public static readonly IS_FREE_LOCK = 740;
	public static readonly IS_IPV4 = 741;
	public static readonly IS_IPV4_COMPAT = 742;
	public static readonly IS_IPV4_MAPPED = 743;
	public static readonly IS_IPV6 = 744;
	public static readonly IS_USED_LOCK = 745;
	public static readonly LAST_INSERT_ID = 746;
	public static readonly LCASE = 747;
	public static readonly LEAST = 748;
	public static readonly LENGTH = 749;
	public static readonly LINEFROMTEXT = 750;
	public static readonly LINEFROMWKB = 751;
	public static readonly LINESTRINGFROMTEXT = 752;
	public static readonly LINESTRINGFROMWKB = 753;
	public static readonly LN = 754;
	public static readonly LOAD_FILE = 755;
	public static readonly LOCATE = 756;
	public static readonly LOG = 757;
	public static readonly LOG10 = 758;
	public static readonly LOG2 = 759;
	public static readonly LOWER = 760;
	public static readonly LPAD = 761;
	public static readonly LTRIM = 762;
	public static readonly MAKEDATE = 763;
	public static readonly MAKETIME = 764;
	public static readonly MAKE_SET = 765;
	public static readonly MASTER_POS_WAIT = 766;
	public static readonly MBRCONTAINS = 767;
	public static readonly MBRDISJOINT = 768;
	public static readonly MBREQUAL = 769;
	public static readonly MBRINTERSECTS = 770;
	public static readonly MBROVERLAPS = 771;
	public static readonly MBRTOUCHES = 772;
	public static readonly MBRWITHIN = 773;
	public static readonly MD5 = 774;
	public static readonly MLINEFROMTEXT = 775;
	public static readonly MLINEFROMWKB = 776;
	public static readonly MONTHNAME = 777;
	public static readonly MPOINTFROMTEXT = 778;
	public static readonly MPOINTFROMWKB = 779;
	public static readonly MPOLYFROMTEXT = 780;
	public static readonly MPOLYFROMWKB = 781;
	public static readonly MULTILINESTRINGFROMTEXT = 782;
	public static readonly MULTILINESTRINGFROMWKB = 783;
	public static readonly MULTIPOINTFROMTEXT = 784;
	public static readonly MULTIPOINTFROMWKB = 785;
	public static readonly MULTIPOLYGONFROMTEXT = 786;
	public static readonly MULTIPOLYGONFROMWKB = 787;
	public static readonly NAME_CONST = 788;
	public static readonly NULLIF = 789;
	public static readonly NUMGEOMETRIES = 790;
	public static readonly NUMINTERIORRINGS = 791;
	public static readonly NUMPOINTS = 792;
	public static readonly OCT = 793;
	public static readonly OCTET_LENGTH = 794;
	public static readonly ORD = 795;
	public static readonly OVERLAPS = 796;
	public static readonly PERIOD_ADD = 797;
	public static readonly PERIOD_DIFF = 798;
	public static readonly PI = 799;
	public static readonly POINTFROMTEXT = 800;
	public static readonly POINTFROMWKB = 801;
	public static readonly POINTN = 802;
	public static readonly POLYFROMTEXT = 803;
	public static readonly POLYFROMWKB = 804;
	public static readonly POLYGONFROMTEXT = 805;
	public static readonly POLYGONFROMWKB = 806;
	public static readonly POW = 807;
	public static readonly POWER = 808;
	public static readonly QUOTE = 809;
	public static readonly RADIANS = 810;
	public static readonly RAND = 811;
	public static readonly RANDOM_BYTES = 812;
	public static readonly RELEASE_LOCK = 813;
	public static readonly REVERSE = 814;
	public static readonly ROUND = 815;
	public static readonly ROW_COUNT = 816;
	public static readonly RPAD = 817;
	public static readonly RTRIM = 818;
	public static readonly SEC_TO_TIME = 819;
	public static readonly SESSION_USER = 820;
	public static readonly SHA = 821;
	public static readonly SHA1 = 822;
	public static readonly SHA2 = 823;
	public static readonly SIGN = 824;
	public static readonly SIN = 825;
	public static readonly SLEEP = 826;
	public static readonly SOUNDEX = 827;
	public static readonly SQL_THREAD_WAIT_AFTER_GTIDS = 828;
	public static readonly SQRT = 829;
	public static readonly SRID = 830;
	public static readonly STARTPOINT = 831;
	public static readonly STRCMP = 832;
	public static readonly STR_TO_DATE = 833;
	public static readonly ST_AREA = 834;
	public static readonly ST_ASBINARY = 835;
	public static readonly ST_ASTEXT = 836;
	public static readonly ST_ASWKB = 837;
	public static readonly ST_ASWKT = 838;
	public static readonly ST_BUFFER = 839;
	public static readonly ST_CENTROID = 840;
	public static readonly ST_CONTAINS = 841;
	public static readonly ST_CROSSES = 842;
	public static readonly ST_DIFFERENCE = 843;
	public static readonly ST_DIMENSION = 844;
	public static readonly ST_DISJOINT = 845;
	public static readonly ST_DISTANCE = 846;
	public static readonly ST_ENDPOINT = 847;
	public static readonly ST_ENVELOPE = 848;
	public static readonly ST_EQUALS = 849;
	public static readonly ST_EXTERIORRING = 850;
	public static readonly ST_GEOMCOLLFROMTEXT = 851;
	public static readonly ST_GEOMCOLLFROMTXT = 852;
	public static readonly ST_GEOMCOLLFROMWKB = 853;
	public static readonly ST_GEOMETRYCOLLECTIONFROMTEXT = 854;
	public static readonly ST_GEOMETRYCOLLECTIONFROMWKB = 855;
	public static readonly ST_GEOMETRYFROMTEXT = 856;
	public static readonly ST_GEOMETRYFROMWKB = 857;
	public static readonly ST_GEOMETRYN = 858;
	public static readonly ST_GEOMETRYTYPE = 859;
	public static readonly ST_GEOMFROMTEXT = 860;
	public static readonly ST_GEOMFROMWKB = 861;
	public static readonly ST_INTERIORRINGN = 862;
	public static readonly ST_INTERSECTION = 863;
	public static readonly ST_INTERSECTS = 864;
	public static readonly ST_ISCLOSED = 865;
	public static readonly ST_ISEMPTY = 866;
	public static readonly ST_ISSIMPLE = 867;
	public static readonly ST_LINEFROMTEXT = 868;
	public static readonly ST_LINEFROMWKB = 869;
	public static readonly ST_LINESTRINGFROMTEXT = 870;
	public static readonly ST_LINESTRINGFROMWKB = 871;
	public static readonly ST_NUMGEOMETRIES = 872;
	public static readonly ST_NUMINTERIORRING = 873;
	public static readonly ST_NUMINTERIORRINGS = 874;
	public static readonly ST_NUMPOINTS = 875;
	public static readonly ST_OVERLAPS = 876;
	public static readonly ST_POINTFROMTEXT = 877;
	public static readonly ST_POINTFROMWKB = 878;
	public static readonly ST_POINTN = 879;
	public static readonly ST_POLYFROMTEXT = 880;
	public static readonly ST_POLYFROMWKB = 881;
	public static readonly ST_POLYGONFROMTEXT = 882;
	public static readonly ST_POLYGONFROMWKB = 883;
	public static readonly ST_SRID = 884;
	public static readonly ST_STARTPOINT = 885;
	public static readonly ST_SYMDIFFERENCE = 886;
	public static readonly ST_TOUCHES = 887;
	public static readonly ST_UNION = 888;
	public static readonly ST_WITHIN = 889;
	public static readonly ST_X = 890;
	public static readonly ST_Y = 891;
	public static readonly SUBDATE = 892;
	public static readonly SUBSTRING_INDEX = 893;
	public static readonly SUBTIME = 894;
	public static readonly SYSTEM_USER = 895;
	public static readonly TAN = 896;
	public static readonly TIMEDIFF = 897;
	public static readonly TIMESTAMPADD = 898;
	public static readonly TIMESTAMPDIFF = 899;
	public static readonly TIME_FORMAT = 900;
	public static readonly TIME_TO_SEC = 901;
	public static readonly TOUCHES = 902;
	public static readonly TO_BASE64 = 903;
	public static readonly TO_DAYS = 904;
	public static readonly TO_SECONDS = 905;
	public static readonly UCASE = 906;
	public static readonly UNCOMPRESS = 907;
	public static readonly UNCOMPRESSED_LENGTH = 908;
	public static readonly UNHEX = 909;
	public static readonly UNIX_TIMESTAMP = 910;
	public static readonly UPDATEXML = 911;
	public static readonly UPPER = 912;
	public static readonly UUID = 913;
	public static readonly UUID_SHORT = 914;
	public static readonly VALIDATE_PASSWORD_STRENGTH = 915;
	public static readonly VERSION = 916;
	public static readonly WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 917;
	public static readonly WEEKDAY = 918;
	public static readonly WEEKOFYEAR = 919;
	public static readonly WEIGHT_STRING = 920;
	public static readonly WITHIN = 921;
	public static readonly YEARWEEK = 922;
	public static readonly Y_FUNCTION = 923;
	public static readonly X_FUNCTION = 924;
	public static readonly VAR_ASSIGN = 925;
	public static readonly PLUS_ASSIGN = 926;
	public static readonly MINUS_ASSIGN = 927;
	public static readonly MULT_ASSIGN = 928;
	public static readonly DIV_ASSIGN = 929;
	public static readonly MOD_ASSIGN = 930;
	public static readonly AND_ASSIGN = 931;
	public static readonly XOR_ASSIGN = 932;
	public static readonly OR_ASSIGN = 933;
	public static readonly STAR = 934;
	public static readonly DIVIDE = 935;
	public static readonly MODULE = 936;
	public static readonly PLUS = 937;
	public static readonly MINUSMINUS = 938;
	public static readonly MINUS = 939;
	public static readonly DIV = 940;
	public static readonly MOD = 941;
	public static readonly EQUAL_SYMBOL = 942;
	public static readonly GREATER_SYMBOL = 943;
	public static readonly LESS_SYMBOL = 944;
	public static readonly EXCLAMATION_SYMBOL = 945;
	public static readonly BIT_NOT_OP = 946;
	public static readonly BIT_OR_OP = 947;
	public static readonly BIT_AND_OP = 948;
	public static readonly BIT_XOR_OP = 949;
	public static readonly DOT = 950;
	public static readonly LR_BRACKET = 951;
	public static readonly RR_BRACKET = 952;
	public static readonly COMMA = 953;
	public static readonly AT_SIGN = 954;
	public static readonly ZERO_DECIMAL = 955;
	public static readonly ONE_DECIMAL = 956;
	public static readonly TWO_DECIMAL = 957;
	public static readonly SINGLE_QUOTE_SYMB = 958;
	public static readonly DOUBLE_QUOTE_SYMB = 959;
	public static readonly REVERSE_QUOTE_SYMB = 960;
	public static readonly COLON_SYMB = 961;
	public static readonly CHARSET_REVERSE_QOUTE_STRING = 962;
	public static readonly FILESIZE_LITERAL = 963;
	public static readonly START_NATIONAL_STRING_LITERAL = 964;
	public static readonly STRING_LITERAL = 965;
	public static readonly DECIMAL_LITERAL = 966;
	public static readonly HEXADECIMAL_LITERAL = 967;
	public static readonly REAL_LITERAL = 968;
	public static readonly NULL_SPEC_LITERAL = 969;
	public static readonly BIT_STRING = 970;
	public static readonly STRING_CHARSET_NAME = 971;
	public static readonly DOT_ID = 972;
	public static readonly ID = 973;
	public static readonly REVERSE_QUOTE_ID = 974;
	public static readonly STRING_USER_NAME = 975;
	public static readonly LOCAL_ID = 976;
	public static readonly GLOBAL_ID = 977;
	public static readonly UNRECOGNIZED = 978;
	public static readonly RULE_sqlStatement = 0;
	public static readonly RULE_ddlStatement = 1;
	public static readonly RULE_dmlStatement = 2;
	public static readonly RULE_transactionStatement = 3;
	public static readonly RULE_replicationStatement = 4;
	public static readonly RULE_preparedStatement = 5;
	public static readonly RULE_compoundStatement = 6;
	public static readonly RULE_administrationStatement = 7;
	public static readonly RULE_utilityStatement = 8;
	public static readonly RULE_createDatabase = 9;
	public static readonly RULE_createEvent = 10;
	public static readonly RULE_createIndex = 11;
	public static readonly RULE_createLogfileGroup = 12;
	public static readonly RULE_createProcedure = 13;
	public static readonly RULE_createFunction = 14;
	public static readonly RULE_createServer = 15;
	public static readonly RULE_createTable = 16;
	public static readonly RULE_createTablespaceInnodb = 17;
	public static readonly RULE_createTablespaceNdb = 18;
	public static readonly RULE_createTrigger = 19;
	public static readonly RULE_createView = 20;
	public static readonly RULE_createDatabaseOption = 21;
	public static readonly RULE_ownerStatement = 22;
	public static readonly RULE_scheduleExpression = 23;
	public static readonly RULE_timestampValue = 24;
	public static readonly RULE_intervalExpr = 25;
	public static readonly RULE_intervalType = 26;
	public static readonly RULE_enableType = 27;
	public static readonly RULE_indexType = 28;
	public static readonly RULE_indexOption = 29;
	public static readonly RULE_procedureParameter = 30;
	public static readonly RULE_functionParameter = 31;
	public static readonly RULE_routineOption = 32;
	public static readonly RULE_serverOption = 33;
	public static readonly RULE_createDefinitions = 34;
	public static readonly RULE_createDefinition = 35;
	public static readonly RULE_columnDefinition = 36;
	public static readonly RULE_columnConstraint = 37;
	public static readonly RULE_tableConstraint = 38;
	public static readonly RULE_referenceDefinition = 39;
	public static readonly RULE_referenceAction = 40;
	public static readonly RULE_referenceControlType = 41;
	public static readonly RULE_indexColumnDefinition = 42;
	public static readonly RULE_tableOption = 43;
	public static readonly RULE_tablespaceStorage = 44;
	public static readonly RULE_partitionDefinitions = 45;
	public static readonly RULE_partitionFunctionDefinition = 46;
	public static readonly RULE_subpartitionFunctionDefinition = 47;
	public static readonly RULE_partitionDefinition = 48;
	public static readonly RULE_partitionDefinerAtom = 49;
	public static readonly RULE_partitionDefinerVector = 50;
	public static readonly RULE_subpartitionDefinition = 51;
	public static readonly RULE_partitionOption = 52;
	public static readonly RULE_alterDatabase = 53;
	public static readonly RULE_alterEvent = 54;
	public static readonly RULE_alterFunction = 55;
	public static readonly RULE_alterInstance = 56;
	public static readonly RULE_alterLogfileGroup = 57;
	public static readonly RULE_alterProcedure = 58;
	public static readonly RULE_alterServer = 59;
	public static readonly RULE_alterTable = 60;
	public static readonly RULE_alterTablespace = 61;
	public static readonly RULE_alterView = 62;
	public static readonly RULE_alterSpecification = 63;
	public static readonly RULE_dropDatabase = 64;
	public static readonly RULE_dropEvent = 65;
	public static readonly RULE_dropIndex = 66;
	public static readonly RULE_dropLogfileGroup = 67;
	public static readonly RULE_dropProcedure = 68;
	public static readonly RULE_dropFunction = 69;
	public static readonly RULE_dropServer = 70;
	public static readonly RULE_dropTable = 71;
	public static readonly RULE_dropTablespace = 72;
	public static readonly RULE_dropTrigger = 73;
	public static readonly RULE_dropView = 74;
	public static readonly RULE_renameTable = 75;
	public static readonly RULE_renameTableClause = 76;
	public static readonly RULE_truncateTable = 77;
	public static readonly RULE_callStatement = 78;
	public static readonly RULE_deleteStatement = 79;
	public static readonly RULE_doStatement = 80;
	public static readonly RULE_handlerStatement = 81;
	public static readonly RULE_insertStatement = 82;
	public static readonly RULE_loadDataStatement = 83;
	public static readonly RULE_loadXmlStatement = 84;
	public static readonly RULE_replaceStatement = 85;
	public static readonly RULE_selectStatement = 86;
	public static readonly RULE_updateStatement = 87;
	public static readonly RULE_insertStatementValue = 88;
	public static readonly RULE_updatedElement = 89;
	public static readonly RULE_assignmentField = 90;
	public static readonly RULE_lockClause = 91;
	public static readonly RULE_singleDeleteStatement = 92;
	public static readonly RULE_multipleDeleteStatement = 93;
	public static readonly RULE_handlerOpenStatement = 94;
	public static readonly RULE_handlerReadIndexStatement = 95;
	public static readonly RULE_handlerReadStatement = 96;
	public static readonly RULE_handlerCloseStatement = 97;
	public static readonly RULE_singleUpdateStatement = 98;
	public static readonly RULE_multipleUpdateStatement = 99;
	public static readonly RULE_orderByClause = 100;
	public static readonly RULE_orderByExpression = 101;
	public static readonly RULE_tableSources = 102;
	public static readonly RULE_tableSource = 103;
	public static readonly RULE_tableSourceItem = 104;
	public static readonly RULE_indexHint = 105;
	public static readonly RULE_indexHintType = 106;
	public static readonly RULE_joinPart = 107;
	public static readonly RULE_queryExpression = 108;
	public static readonly RULE_queryExpressionNointo = 109;
	public static readonly RULE_querySpecification = 110;
	public static readonly RULE_querySpecificationNointo = 111;
	public static readonly RULE_unionParenthesis = 112;
	public static readonly RULE_unionStatement = 113;
	public static readonly RULE_selectSpec = 114;
	public static readonly RULE_selectElements = 115;
	public static readonly RULE_selectElement = 116;
	public static readonly RULE_selectIntoExpression = 117;
	public static readonly RULE_selectFieldsInto = 118;
	public static readonly RULE_selectLinesInto = 119;
	public static readonly RULE_fromClause = 120;
	public static readonly RULE_groupByItem = 121;
	public static readonly RULE_limitClause = 122;
	public static readonly RULE_startTransaction = 123;
	public static readonly RULE_beginWork = 124;
	public static readonly RULE_commitWork = 125;
	public static readonly RULE_rollbackWork = 126;
	public static readonly RULE_savepointStatement = 127;
	public static readonly RULE_rollbackStatement = 128;
	public static readonly RULE_releaseStatement = 129;
	public static readonly RULE_lockTables = 130;
	public static readonly RULE_unlockTables = 131;
	public static readonly RULE_setAutocommitStatement = 132;
	public static readonly RULE_setTransactionStatement = 133;
	public static readonly RULE_transactionMode = 134;
	public static readonly RULE_lockTableElement = 135;
	public static readonly RULE_lockAction = 136;
	public static readonly RULE_transactionOption = 137;
	public static readonly RULE_transactionLevel = 138;
	public static readonly RULE_changeMaster = 139;
	public static readonly RULE_changeReplicationFilter = 140;
	public static readonly RULE_purgeBinaryLogs = 141;
	public static readonly RULE_resetMaster = 142;
	public static readonly RULE_resetSlave = 143;
	public static readonly RULE_startSlave = 144;
	public static readonly RULE_stopSlave = 145;
	public static readonly RULE_startGroupReplication = 146;
	public static readonly RULE_stopGroupReplication = 147;
	public static readonly RULE_masterOption = 148;
	public static readonly RULE_stringMasterOption = 149;
	public static readonly RULE_decimalMasterOption = 150;
	public static readonly RULE_boolMasterOption = 151;
	public static readonly RULE_channelOption = 152;
	public static readonly RULE_replicationFilter = 153;
	public static readonly RULE_tablePair = 154;
	public static readonly RULE_threadType = 155;
	public static readonly RULE_untilOption = 156;
	public static readonly RULE_connectionOption = 157;
	public static readonly RULE_gtuidSet = 158;
	public static readonly RULE_xaStartTransaction = 159;
	public static readonly RULE_xaEndTransaction = 160;
	public static readonly RULE_xaPrepareStatement = 161;
	public static readonly RULE_xaCommitWork = 162;
	public static readonly RULE_xaRollbackWork = 163;
	public static readonly RULE_xaRecoverWork = 164;
	public static readonly RULE_prepareStatement = 165;
	public static readonly RULE_executeStatement = 166;
	public static readonly RULE_deallocatePrepare = 167;
	public static readonly RULE_routineBody = 168;
	public static readonly RULE_blockStatement = 169;
	public static readonly RULE_caseStatement = 170;
	public static readonly RULE_ifStatement = 171;
	public static readonly RULE_iterateStatement = 172;
	public static readonly RULE_leaveStatement = 173;
	public static readonly RULE_loopStatement = 174;
	public static readonly RULE_repeatStatement = 175;
	public static readonly RULE_returnStatement = 176;
	public static readonly RULE_whileStatement = 177;
	public static readonly RULE_cursorStatement = 178;
	public static readonly RULE_declareVariable = 179;
	public static readonly RULE_declareCondition = 180;
	public static readonly RULE_declareCursor = 181;
	public static readonly RULE_declareHandler = 182;
	public static readonly RULE_handlerConditionValue = 183;
	public static readonly RULE_procedureSqlStatement = 184;
	public static readonly RULE_caseAlternative = 185;
	public static readonly RULE_elifAlternative = 186;
	public static readonly RULE_alterUser = 187;
	public static readonly RULE_createUser = 188;
	public static readonly RULE_dropUser = 189;
	public static readonly RULE_grantStatement = 190;
	public static readonly RULE_grantProxy = 191;
	public static readonly RULE_renameUser = 192;
	public static readonly RULE_revokeStatement = 193;
	public static readonly RULE_revokeProxy = 194;
	public static readonly RULE_setPasswordStatement = 195;
	public static readonly RULE_userSpecification = 196;
	public static readonly RULE_userAuthOption = 197;
	public static readonly RULE_tlsOption = 198;
	public static readonly RULE_userResourceOption = 199;
	public static readonly RULE_userPasswordOption = 200;
	public static readonly RULE_userLockOption = 201;
	public static readonly RULE_privelegeClause = 202;
	public static readonly RULE_privilege = 203;
	public static readonly RULE_privilegeLevel = 204;
	public static readonly RULE_renameUserClause = 205;
	public static readonly RULE_analyzeTable = 206;
	public static readonly RULE_checkTable = 207;
	public static readonly RULE_checksumTable = 208;
	public static readonly RULE_optimizeTable = 209;
	public static readonly RULE_repairTable = 210;
	public static readonly RULE_checkTableOption = 211;
	public static readonly RULE_createUdfunction = 212;
	public static readonly RULE_installPlugin = 213;
	public static readonly RULE_uninstallPlugin = 214;
	public static readonly RULE_setStatement = 215;
	public static readonly RULE_showStatement = 216;
	public static readonly RULE_variableClause = 217;
	public static readonly RULE_showCommonEntity = 218;
	public static readonly RULE_showFilter = 219;
	public static readonly RULE_showGlobalInfoClause = 220;
	public static readonly RULE_showSchemaEntity = 221;
	public static readonly RULE_showProfileType = 222;
	public static readonly RULE_binlogStatement = 223;
	public static readonly RULE_cacheIndexStatement = 224;
	public static readonly RULE_flushStatement = 225;
	public static readonly RULE_killStatement = 226;
	public static readonly RULE_loadIndexIntoCache = 227;
	public static readonly RULE_resetStatement = 228;
	public static readonly RULE_shutdownStatement = 229;
	public static readonly RULE_tableIndexes = 230;
	public static readonly RULE_flushOption = 231;
	public static readonly RULE_flushTableOption = 232;
	public static readonly RULE_loadedTableIndexes = 233;
	public static readonly RULE_simpleDescribeStatement = 234;
	public static readonly RULE_fullDescribeStatement = 235;
	public static readonly RULE_helpStatement = 236;
	public static readonly RULE_useStatement = 237;
	public static readonly RULE_describeObjectClause = 238;
	public static readonly RULE_fullId = 239;
	public static readonly RULE_tableName = 240;
	public static readonly RULE_fullColumnName = 241;
	public static readonly RULE_indexColumnName = 242;
	public static readonly RULE_userName = 243;
	public static readonly RULE_mysqlVariable = 244;
	public static readonly RULE_charsetName = 245;
	public static readonly RULE_collationName = 246;
	public static readonly RULE_engineName = 247;
	public static readonly RULE_uuidSet = 248;
	public static readonly RULE_xid = 249;
	public static readonly RULE_xuidStringId = 250;
	public static readonly RULE_authPlugin = 251;
	public static readonly RULE_uid = 252;
	public static readonly RULE_simpleId = 253;
	public static readonly RULE_dottedId = 254;
	public static readonly RULE_decimalLiteral = 255;
	public static readonly RULE_fileSizeLiteral = 256;
	public static readonly RULE_stringLiteral = 257;
	public static readonly RULE_booleanLiteral = 258;
	public static readonly RULE_hexadecimalLiteral = 259;
	public static readonly RULE_nullNotnull = 260;
	public static readonly RULE_constant = 261;
	public static readonly RULE_dataType = 262;
	public static readonly RULE_convertedDataType = 263;
	public static readonly RULE_lengthOneDimension = 264;
	public static readonly RULE_lengthTwoDimension = 265;
	public static readonly RULE_lengthTwoOptionalDimension = 266;
	public static readonly RULE_uidList = 267;
	public static readonly RULE_tables = 268;
	public static readonly RULE_indexColumnNames = 269;
	public static readonly RULE_expressions = 270;
	public static readonly RULE_expressionsWithDefaults = 271;
	public static readonly RULE_constants = 272;
	public static readonly RULE_simpleStrings = 273;
	public static readonly RULE_userVariables = 274;
	public static readonly RULE_defaultValue = 275;
	public static readonly RULE_currentTimestamp = 276;
	public static readonly RULE_expressionOrDefault = 277;
	public static readonly RULE_ifExists = 278;
	public static readonly RULE_ifNotExists = 279;
	public static readonly RULE_functionCall = 280;
	public static readonly RULE_specificFunction = 281;
	public static readonly RULE_caseFuncAlternative = 282;
	public static readonly RULE_levelsInWeightString = 283;
	public static readonly RULE_levelInWeightListElement = 284;
	public static readonly RULE_aggregateWindowedFunction = 285;
	public static readonly RULE_scalarFunctionName = 286;
	public static readonly RULE_passwordFunctionClause = 287;
	public static readonly RULE_functionArgs = 288;
	public static readonly RULE_functionArg = 289;
	public static readonly RULE_expression = 290;
	public static readonly RULE_predicate = 291;
	public static readonly RULE_expressionAtom = 292;
	public static readonly RULE_unaryOperator = 293;
	public static readonly RULE_comparisonOperator = 294;
	public static readonly RULE_logicalOperator = 295;
	public static readonly RULE_bitOperator = 296;
	public static readonly RULE_mathOperator = 297;
	public static readonly RULE_charsetNameBase = 298;
	public static readonly RULE_transactionLevelBase = 299;
	public static readonly RULE_privilegesBase = 300;
	public static readonly RULE_intervalTypeBase = 301;
	public static readonly RULE_dataTypeBase = 302;
	public static readonly RULE_keywordsCanBeId = 303;
	public static readonly RULE_functionNameBase = 304;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"sqlStatement", "ddlStatement", "dmlStatement", "transactionStatement", 
		"replicationStatement", "preparedStatement", "compoundStatement", "administrationStatement", 
		"utilityStatement", "createDatabase", "createEvent", "createIndex", "createLogfileGroup", 
		"createProcedure", "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
		"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
		"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
		"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", 
		"setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
		"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
		"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
		"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
		"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
		"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
		"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
		"mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'ADD'", 
		"'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", 
		"'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
		"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
		"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
		"'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", 
		"'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
		"'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
		"'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", "'EXIT'", 
		"'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", 
		"'FULLTEXT'", "'GENERATED'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
		"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
		"'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
		"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
		"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
		"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
		"'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
		"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
		"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", 
		"'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
		"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
		"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
		"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
		"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
		"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
		"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'", 
		"'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
		"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
		"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", 
		"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
		"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
		"'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
		"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBJECT'", 
		"'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", 
		"'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
		"'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", 
		"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
		"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
		"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'WAIT'", "'WARNINGS'", "'WITHOUT'", 
		"'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", 
		"'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
		"'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
		"'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
		"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
		"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
		"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
		"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
		"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
		"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
		"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
		"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
		"'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", 
		"'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
		"'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
		"'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CEIL'", "'CEILING'", 
		"'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", 
		"'COLLATION'", "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", 
		"'CONV'", "'CONVERT_TZ'", "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
		"'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", 
		"'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", 
		"'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", 
		"'DES_ENCRYPT'", "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
		"'ENDPOINT'", "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
		"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", 
		"'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
		"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
		"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
		"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
		"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
		"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
		"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
		"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
		"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
		"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
		"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
		"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
		"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", 
		"'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", 
		"'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
		"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
		"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
		"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
		"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
		"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
		"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
		"'^'", "'.'", "'('", "')'", "','", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DELIMITER", "WS", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
		"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
		"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
		"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
		"DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
		"ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
		"FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GRANT", "GROUP", 
		"HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
		"OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
		"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
		"REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", "REVOKE", "RIGHT", 
		"RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", 
		"SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
		"SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", 
		"NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
		"BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", 
		"TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
		"MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
		"VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
		"LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", 
		"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
		"AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
		"AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
		"BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", 
		"CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", "COALESCE", 
		"CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
		"COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", 
		"CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", "DATAFILE", 
		"DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
		"DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
		"DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
		"ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
		"EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", 
		"FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
		"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
		"INSTANCE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", 
		"JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", 
		"LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
		"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
		"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
		"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
		"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBJECT", "SUBPARTITION", 
		"SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", 
		"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", 
		"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", 
		"UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", 
		"VARIABLES", "VIEW", "VIRTUAL", "WAIT", "WARNINGS", "WITHOUT", "WORK", 
		"WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
		"QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
		"TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
		"SUPER", "PRIVILEGES", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
		"CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
		"EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", 
		"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
		"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
		"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
		"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		"LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "POINT", 
		"POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", 
		"AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", 
		"ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
		"ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", 
		"CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
		"COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
		"CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
		"CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", 
		"CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
		"DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", 
		"DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", 
		"EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "AT_SIGN", "ZERO_DECIMAL", 
		"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "UNRECOGNIZED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MySqlParser._LITERAL_NAMES, MySqlParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MySqlParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "MySqlParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return MySqlParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return MySqlParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(MySqlParser._ATN, this);
	}
	// @RuleVersion(0)
	public sqlStatement(): SqlStatementContext {
		let _localctx: SqlStatementContext = new SqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, MySqlParser.RULE_sqlStatement);
		try {
			this.state = 617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 610;
				this.ddlStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 611;
				this.dmlStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 612;
				this.transactionStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 613;
				this.replicationStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 614;
				this.preparedStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 615;
				this.administrationStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 616;
				this.utilityStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let _localctx: DdlStatementContext = new DdlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, MySqlParser.RULE_ddlStatement);
		try {
			this.state = 654;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 619;
				this.createDatabase();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 620;
				this.createEvent();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 621;
				this.createIndex();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 622;
				this.createLogfileGroup();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 623;
				this.createProcedure();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 624;
				this.createFunction();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 625;
				this.createServer();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 626;
				this.createTable();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 627;
				this.createTablespaceInnodb();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 628;
				this.createTablespaceNdb();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 629;
				this.createTrigger();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 630;
				this.createView();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 631;
				this.alterDatabase();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 632;
				this.alterEvent();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 633;
				this.alterFunction();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 634;
				this.alterInstance();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 635;
				this.alterLogfileGroup();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 636;
				this.alterProcedure();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 637;
				this.alterServer();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 638;
				this.alterTable();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 639;
				this.alterTablespace();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 640;
				this.alterView();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 641;
				this.dropDatabase();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 642;
				this.dropEvent();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 643;
				this.dropIndex();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 644;
				this.dropLogfileGroup();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 645;
				this.dropProcedure();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 646;
				this.dropFunction();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 647;
				this.dropServer();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 648;
				this.dropTable();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 649;
				this.dropTablespace();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 650;
				this.dropTrigger();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 651;
				this.dropView();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 652;
				this.renameTable();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 653;
				this.truncateTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dmlStatement(): DmlStatementContext {
		let _localctx: DmlStatementContext = new DmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, MySqlParser.RULE_dmlStatement);
		try {
			this.state = 666;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 656;
				this.selectStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 657;
				this.insertStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 658;
				this.updateStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 659;
				this.deleteStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 660;
				this.replaceStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 661;
				this.callStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 662;
				this.loadDataStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 663;
				this.loadXmlStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 664;
				this.doStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 665;
				this.handlerStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let _localctx: TransactionStatementContext = new TransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, MySqlParser.RULE_transactionStatement);
		try {
			this.state = 677;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 668;
				this.startTransaction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 669;
				this.beginWork();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 670;
				this.commitWork();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 671;
				this.rollbackWork();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 672;
				this.savepointStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 673;
				this.rollbackStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 674;
				this.releaseStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 675;
				this.lockTables();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 676;
				this.unlockTables();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let _localctx: ReplicationStatementContext = new ReplicationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, MySqlParser.RULE_replicationStatement);
		try {
			this.state = 694;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 679;
				this.changeMaster();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 680;
				this.changeReplicationFilter();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 681;
				this.purgeBinaryLogs();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 682;
				this.resetMaster();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 683;
				this.resetSlave();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 684;
				this.startSlave();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 685;
				this.stopSlave();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 686;
				this.startGroupReplication();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 687;
				this.stopGroupReplication();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 688;
				this.xaStartTransaction();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 689;
				this.xaEndTransaction();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 690;
				this.xaPrepareStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 691;
				this.xaCommitWork();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 692;
				this.xaRollbackWork();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 693;
				this.xaRecoverWork();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let _localctx: PreparedStatementContext = new PreparedStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, MySqlParser.RULE_preparedStatement);
		try {
			this.state = 699;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.PREPARE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 696;
				this.prepareStatement();
				}
				break;
			case MySqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 697;
				this.executeStatement();
				}
				break;
			case MySqlParser.DROP:
			case MySqlParser.DEALLOCATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 698;
				this.deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let _localctx: CompoundStatementContext = new CompoundStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, MySqlParser.RULE_compoundStatement);
		try {
			this.state = 711;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 701;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 702;
				this.caseStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 703;
				this.ifStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 704;
				this.leaveStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 705;
				this.loopStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 706;
				this.repeatStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 707;
				this.whileStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 708;
				this.iterateStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 709;
				this.returnStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 710;
				this.cursorStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public administrationStatement(): AdministrationStatementContext {
		let _localctx: AdministrationStatementContext = new AdministrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, MySqlParser.RULE_administrationStatement);
		try {
			this.state = 738;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 713;
				this.alterUser();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 714;
				this.createUser();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 715;
				this.dropUser();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 716;
				this.grantStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 717;
				this.grantProxy();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 718;
				this.renameUser();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 719;
				this.revokeStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 720;
				this.revokeProxy();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 721;
				this.analyzeTable();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 722;
				this.checkTable();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 723;
				this.checksumTable();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 724;
				this.optimizeTable();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 725;
				this.repairTable();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 726;
				this.createUdfunction();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 727;
				this.installPlugin();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 728;
				this.uninstallPlugin();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 729;
				this.setStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 730;
				this.showStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 731;
				this.binlogStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 732;
				this.cacheIndexStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 733;
				this.flushStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 734;
				this.killStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 735;
				this.loadIndexIntoCache();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 736;
				this.resetStatement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 737;
				this.shutdownStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let _localctx: UtilityStatementContext = new UtilityStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, MySqlParser.RULE_utilityStatement);
		try {
			this.state = 744;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 740;
				this.simpleDescribeStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 741;
				this.fullDescribeStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 742;
				this.helpStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 743;
				this.useStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let _localctx: CreateDatabaseContext = new CreateDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, MySqlParser.RULE_createDatabase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 746;
			this.match(MySqlParser.CREATE);
			this.state = 747;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 749;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 748;
				this.ifNotExists();
				}
			}

			this.state = 751;
			this.uid();
			this.state = 755;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 752;
					this.createDatabaseOption();
					}
					}
				}
				this.state = 757;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let _localctx: CreateEventContext = new CreateEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, MySqlParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 758;
			this.match(MySqlParser.CREATE);
			this.state = 760;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 759;
				this.ownerStatement();
				}
			}

			this.state = 762;
			this.match(MySqlParser.EVENT);
			this.state = 764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 763;
				this.ifNotExists();
				}
			}

			this.state = 766;
			this.fullId();
			this.state = 767;
			this.match(MySqlParser.ON);
			this.state = 768;
			this.match(MySqlParser.SCHEDULE);
			this.state = 769;
			this.scheduleExpression();
			this.state = 776;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 770;
				this.match(MySqlParser.ON);
				this.state = 771;
				this.match(MySqlParser.COMPLETION);
				this.state = 773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 772;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 775;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DISABLE || _la === MySqlParser.ENABLE) {
				{
				this.state = 778;
				this.enableType();
				}
			}

			this.state = 783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 781;
				this.match(MySqlParser.COMMENT);
				this.state = 782;
				this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 785;
			this.match(MySqlParser.DO);
			this.state = 786;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let _localctx: CreateIndexContext = new CreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, MySqlParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 788;
			this.match(MySqlParser.CREATE);
			this.state = 790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE) {
				{
				this.state = 789;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL || _la === MySqlParser.UNIQUE) {
				{
				this.state = 792;
				_localctx._indexCategory = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL || _la === MySqlParser.UNIQUE)) {
					_localctx._indexCategory = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 795;
			this.match(MySqlParser.INDEX);
			this.state = 796;
			this.uid();
			this.state = 798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USING) {
				{
				this.state = 797;
				this.indexType();
				}
			}

			this.state = 800;
			this.match(MySqlParser.ON);
			this.state = 801;
			this.tableName();
			this.state = 802;
			this.indexColumnNames();
			this.state = 806;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 803;
					this.indexOption();
					}
					}
				}
				this.state = 808;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			}
			this.state = 819;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 809;
				this.match(MySqlParser.ALGORITHM);
				this.state = 811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 810;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 813;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				{
				this.state = 814;
				this.match(MySqlParser.LOCK);
				this.state = 816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 815;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 818;
				_localctx._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
					_localctx._lockType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let _localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, MySqlParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 821;
			this.match(MySqlParser.CREATE);
			this.state = 822;
			this.match(MySqlParser.LOGFILE);
			this.state = 823;
			this.match(MySqlParser.GROUP);
			this.state = 824;
			this.uid();
			this.state = 825;
			this.match(MySqlParser.ADD);
			this.state = 826;
			this.match(MySqlParser.UNDOFILE);
			this.state = 827;
			_localctx._undoFile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 828;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 829;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 832;
				_localctx._initSize = this.fileSizeLiteral();
				}
			}

			this.state = 840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.UNDO_BUFFER_SIZE) {
				{
				this.state = 835;
				this.match(MySqlParser.UNDO_BUFFER_SIZE);
				this.state = 837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 836;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 839;
				_localctx._undoSize = this.fileSizeLiteral();
				}
			}

			this.state = 847;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.REDO_BUFFER_SIZE) {
				{
				this.state = 842;
				this.match(MySqlParser.REDO_BUFFER_SIZE);
				this.state = 844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 843;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 846;
				_localctx._redoSize = this.fileSizeLiteral();
				}
			}

			this.state = 854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NODEGROUP) {
				{
				this.state = 849;
				this.match(MySqlParser.NODEGROUP);
				this.state = 851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 850;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 853;
				this.uid();
				}
			}

			this.state = 857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 856;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 859;
				this.match(MySqlParser.COMMENT);
				this.state = 861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 860;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 863;
				_localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 866;
			this.match(MySqlParser.ENGINE);
			this.state = 868;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 867;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 870;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let _localctx: CreateProcedureContext = new CreateProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, MySqlParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 872;
			this.match(MySqlParser.CREATE);
			this.state = 874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 873;
				this.ownerStatement();
				}
			}

			this.state = 876;
			this.match(MySqlParser.PROCEDURE);
			this.state = 877;
			this.fullId();
			this.state = 878;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IN || _la === MySqlParser.INOUT || _la === MySqlParser.OUT) {
				{
				this.state = 879;
				this.procedureParameter();
				}
			}

			this.state = 886;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 882;
				this.match(MySqlParser.COMMA);
				this.state = 883;
				this.procedureParameter();
				}
				}
				this.state = 888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 889;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 893;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 890;
					this.routineOption();
					}
					}
				}
				this.state = 895;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
			}
			this.state = 896;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let _localctx: CreateFunctionContext = new CreateFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, MySqlParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 898;
			this.match(MySqlParser.CREATE);
			this.state = 900;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 899;
				this.ownerStatement();
				}
			}

			this.state = 902;
			this.match(MySqlParser.FUNCTION);
			this.state = 903;
			this.fullId();
			this.state = 904;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 905;
				this.functionParameter();
				}
			}

			this.state = 912;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 908;
				this.match(MySqlParser.COMMA);
				this.state = 909;
				this.functionParameter();
				}
				}
				this.state = 914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 915;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 916;
			this.match(MySqlParser.RETURNS);
			this.state = 917;
			this.dataType();
			this.state = 921;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 918;
					this.routineOption();
					}
					}
				}
				this.state = 923;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
			}
			this.state = 924;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let _localctx: CreateServerContext = new CreateServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, MySqlParser.RULE_createServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 926;
			this.match(MySqlParser.CREATE);
			this.state = 927;
			this.match(MySqlParser.SERVER);
			this.state = 928;
			this.uid();
			this.state = 929;
			this.match(MySqlParser.FOREIGN);
			this.state = 930;
			this.match(MySqlParser.DATA);
			this.state = 931;
			this.match(MySqlParser.WRAPPER);
			this.state = 932;
			_localctx._wrapperName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MYSQL || _la === MySqlParser.STRING_LITERAL)) {
				_localctx._wrapperName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 933;
			this.match(MySqlParser.OPTIONS);
			this.state = 934;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 935;
			this.serverOption();
			this.state = 940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 936;
				this.match(MySqlParser.COMMA);
				this.state = 937;
				this.serverOption();
				}
				}
				this.state = 942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 943;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let _localctx: CreateTableContext = new CreateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, MySqlParser.RULE_createTable);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1023;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 63, this._ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 945;
				this.match(MySqlParser.CREATE);
				this.state = 947;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 946;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 949;
				this.match(MySqlParser.TABLE);
				this.state = 951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 950;
					this.ifNotExists();
					}
				}

				this.state = 953;
				this.tableName();
				this.state = 961;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LIKE:
					{
					this.state = 954;
					this.match(MySqlParser.LIKE);
					this.state = 955;
					this.tableName();
					}
					break;
				case MySqlParser.LR_BRACKET:
					{
					this.state = 956;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 957;
					this.match(MySqlParser.LIKE);
					this.state = 958;
					(_localctx as CopyCreateTableContext)._parenthesisTable = this.tableName();
					this.state = 959;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 963;
				this.match(MySqlParser.CREATE);
				this.state = 965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 964;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 967;
				this.match(MySqlParser.TABLE);
				this.state = 969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 968;
					this.ifNotExists();
					}
				}

				this.state = 971;
				this.tableName();
				this.state = 973;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 50, this._ctx) ) {
				case 1:
					{
					this.state = 972;
					this.createDefinitions();
					}
					break;
				}
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (MySqlParser.CHARACTER - 23)) | (1 << (MySqlParser.COLLATE - 23)) | (1 << (MySqlParser.DEFAULT - 23)))) !== 0) || _la === MySqlParser.INDEX || _la === MySqlParser.UNION || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (MySqlParser.AUTO_INCREMENT - 258)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 258)) | (1 << (MySqlParser.CHECKSUM - 258)) | (1 << (MySqlParser.COMMENT - 258)) | (1 << (MySqlParser.COMPRESSION - 258)) | (1 << (MySqlParser.CONNECTION - 258)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (MySqlParser.DATA - 294)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 294)) | (1 << (MySqlParser.ENCRYPTION - 294)) | (1 << (MySqlParser.ENGINE - 294)))) !== 0) || _la === MySqlParser.INSERT_METHOD || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.MAX_ROWS || _la === MySqlParser.MIN_ROWS || _la === MySqlParser.PACK_KEYS || _la === MySqlParser.PASSWORD || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (MySqlParser.ROW_FORMAT - 479)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 479)) | (1 << (MySqlParser.STATS_PERSISTENT - 479)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 479)))) !== 0) || _la === MySqlParser.TABLESPACE || _la === MySqlParser.CHARSET) {
					{
					this.state = 975;
					this.tableOption();
					this.state = 982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (MySqlParser.CHARACTER - 23)) | (1 << (MySqlParser.COLLATE - 23)) | (1 << (MySqlParser.DEFAULT - 23)))) !== 0) || _la === MySqlParser.INDEX || _la === MySqlParser.UNION || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & ((1 << (MySqlParser.AUTO_INCREMENT - 258)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 258)) | (1 << (MySqlParser.CHECKSUM - 258)) | (1 << (MySqlParser.COMMENT - 258)) | (1 << (MySqlParser.COMPRESSION - 258)) | (1 << (MySqlParser.CONNECTION - 258)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (MySqlParser.DATA - 294)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 294)) | (1 << (MySqlParser.ENCRYPTION - 294)) | (1 << (MySqlParser.ENGINE - 294)))) !== 0) || _la === MySqlParser.INSERT_METHOD || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.MAX_ROWS || _la === MySqlParser.MIN_ROWS || _la === MySqlParser.PACK_KEYS || _la === MySqlParser.PASSWORD || ((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & ((1 << (MySqlParser.ROW_FORMAT - 479)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 479)) | (1 << (MySqlParser.STATS_PERSISTENT - 479)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 479)))) !== 0) || _la === MySqlParser.TABLESPACE || _la === MySqlParser.CHARSET || _la === MySqlParser.COMMA) {
						{
						{
						this.state = 977;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.COMMA) {
							{
							this.state = 976;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 979;
						this.tableOption();
						}
						}
						this.state = 984;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 987;
					this.partitionDefinitions();
					}
				}

				this.state = 991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
					{
					this.state = 990;
					(_localctx as QueryCreateTableContext)._keyViolate = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
						(_localctx as QueryCreateTableContext)._keyViolate = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 993;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 996;
				this.selectStatement();
				}
				break;

			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 998;
				this.match(MySqlParser.CREATE);
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 999;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1002;
				this.match(MySqlParser.TABLE);
				this.state = 1004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 1003;
					this.ifNotExists();
					}
				}

				this.state = 1006;
				this.tableName();
				this.state = 1007;
				this.createDefinitions();
				this.state = 1018;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 1008;
					this.tableOption();
					this.state = 1015;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1010;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MySqlParser.COMMA) {
								{
								this.state = 1009;
								this.match(MySqlParser.COMMA);
								}
							}

							this.state = 1012;
							this.tableOption();
							}
							}
						}
						this.state = 1017;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
					}
					}
					break;
				}
				this.state = 1021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 1020;
					this.partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceInnodb(): CreateTablespaceInnodbContext {
		let _localctx: CreateTablespaceInnodbContext = new CreateTablespaceInnodbContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, MySqlParser.RULE_createTablespaceInnodb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1025;
			this.match(MySqlParser.CREATE);
			this.state = 1026;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1027;
			this.uid();
			this.state = 1028;
			this.match(MySqlParser.ADD);
			this.state = 1029;
			this.match(MySqlParser.DATAFILE);
			this.state = 1030;
			_localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1034;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
			case 1:
				{
				this.state = 1031;
				this.match(MySqlParser.FILE_BLOCK_SIZE);
				this.state = 1032;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1033;
				_localctx._fileBlockSize = this.fileSizeLiteral();
				}
				break;
			}
			this.state = 1041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 66, this._ctx) ) {
			case 1:
				{
				this.state = 1036;
				this.match(MySqlParser.ENGINE);
				this.state = 1038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1037;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1040;
				this.engineName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceNdb(): CreateTablespaceNdbContext {
		let _localctx: CreateTablespaceNdbContext = new CreateTablespaceNdbContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, MySqlParser.RULE_createTablespaceNdb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1043;
			this.match(MySqlParser.CREATE);
			this.state = 1044;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1045;
			this.uid();
			this.state = 1046;
			this.match(MySqlParser.ADD);
			this.state = 1047;
			this.match(MySqlParser.DATAFILE);
			this.state = 1048;
			_localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1049;
			this.match(MySqlParser.USE);
			this.state = 1050;
			this.match(MySqlParser.LOGFILE);
			this.state = 1051;
			this.match(MySqlParser.GROUP);
			this.state = 1052;
			this.uid();
			this.state = 1058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENT_SIZE) {
				{
				this.state = 1053;
				this.match(MySqlParser.EXTENT_SIZE);
				this.state = 1055;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1054;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1057;
				_localctx._extentSize = this.fileSizeLiteral();
				}
			}

			this.state = 1065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 1060;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 1062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1061;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1064;
				_localctx._initialSize = this.fileSizeLiteral();
				}
			}

			this.state = 1072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AUTOEXTEND_SIZE) {
				{
				this.state = 1067;
				this.match(MySqlParser.AUTOEXTEND_SIZE);
				this.state = 1069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1068;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1071;
				_localctx._autoextendSize = this.fileSizeLiteral();
				}
			}

			this.state = 1079;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.MAX_SIZE) {
				{
				this.state = 1074;
				this.match(MySqlParser.MAX_SIZE);
				this.state = 1076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1075;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1078;
				_localctx._maxSize = this.fileSizeLiteral();
				}
			}

			this.state = 1086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NODEGROUP) {
				{
				this.state = 1081;
				this.match(MySqlParser.NODEGROUP);
				this.state = 1083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1082;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1085;
				this.uid();
				}
			}

			this.state = 1089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 1088;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 1096;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 1091;
				this.match(MySqlParser.COMMENT);
				this.state = 1093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1092;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1095;
				_localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 1098;
			this.match(MySqlParser.ENGINE);
			this.state = 1100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 1099;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1102;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let _localctx: CreateTriggerContext = new CreateTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, MySqlParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1104;
			this.match(MySqlParser.CREATE);
			this.state = 1106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 1105;
				this.ownerStatement();
				}
			}

			this.state = 1108;
			this.match(MySqlParser.TRIGGER);
			this.state = 1109;
			_localctx._thisTrigger = this.fullId();
			this.state = 1110;
			_localctx._triggerTime = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BEFORE || _la === MySqlParser.AFTER)) {
				_localctx._triggerTime = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1111;
			_localctx._triggerEvent = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DELETE || _la === MySqlParser.INSERT || _la === MySqlParser.UPDATE)) {
				_localctx._triggerEvent = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1112;
			this.match(MySqlParser.ON);
			this.state = 1113;
			this.tableName();
			this.state = 1114;
			this.match(MySqlParser.FOR);
			this.state = 1115;
			this.match(MySqlParser.EACH);
			this.state = 1116;
			this.match(MySqlParser.ROW);
			this.state = 1119;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				{
				this.state = 1117;
				_localctx._triggerPlace = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FOLLOWS || _la === MySqlParser.PRECEDES)) {
					_localctx._triggerPlace = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1118;
				_localctx._otherTrigger = this.fullId();
				}
				break;
			}
			this.state = 1121;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let _localctx: CreateViewContext = new CreateViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, MySqlParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1123;
			this.match(MySqlParser.CREATE);
			this.state = 1126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OR) {
				{
				this.state = 1124;
				this.match(MySqlParser.OR);
				this.state = 1125;
				this.match(MySqlParser.REPLACE);
				}
			}

			this.state = 1131;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALGORITHM) {
				{
				this.state = 1128;
				this.match(MySqlParser.ALGORITHM);
				this.state = 1129;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1130;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MERGE || _la === MySqlParser.TEMPTABLE || _la === MySqlParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 1133;
				this.ownerStatement();
				}
			}

			this.state = 1139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SQL) {
				{
				this.state = 1136;
				this.match(MySqlParser.SQL);
				this.state = 1137;
				this.match(MySqlParser.SECURITY);
				this.state = 1138;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1141;
			this.match(MySqlParser.VIEW);
			this.state = 1142;
			this.fullId();
			this.state = 1147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 1143;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1144;
				this.uidList();
				this.state = 1145;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 1149;
			this.match(MySqlParser.AS);
			this.state = 1150;
			this.selectStatement();
			this.state = 1157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 1151;
				this.match(MySqlParser.WITH);
				this.state = 1153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL) {
					{
					this.state = 1152;
					_localctx._checkOption = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL)) {
						_localctx._checkOption = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1155;
				this.match(MySqlParser.CHECK);
				this.state = 1156;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let _localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, MySqlParser.RULE_createDatabaseOption);
		let _la: number;
		try {
			this.state = 1179;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1159;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1165;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 1162;
					this.match(MySqlParser.CHARACTER);
					this.state = 1163;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 1164;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1168;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1167;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1170;
				this.charsetName();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1171;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1174;
				this.match(MySqlParser.COLLATE);
				this.state = 1176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1175;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1178;
				this.collationName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ownerStatement(): OwnerStatementContext {
		let _localctx: OwnerStatementContext = new OwnerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, MySqlParser.RULE_ownerStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1181;
			this.match(MySqlParser.DEFINER);
			this.state = 1182;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 1189;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ID:
			case MySqlParser.STRING_USER_NAME:
				{
				this.state = 1183;
				this.userName();
				}
				break;
			case MySqlParser.CURRENT_USER:
				{
				this.state = 1184;
				this.match(MySqlParser.CURRENT_USER);
				this.state = 1187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 1185;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1186;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scheduleExpression(): ScheduleExpressionContext {
		let _localctx: ScheduleExpressionContext = new ScheduleExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, MySqlParser.RULE_scheduleExpression);
		let _la: number;
		try {
			this.state = 1225;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.AT:
				_localctx = new PreciseScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1191;
				this.match(MySqlParser.AT);
				this.state = 1192;
				this.timestampValue();
				this.state = 1196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.PLUS) {
					{
					{
					this.state = 1193;
					this.intervalExpr();
					}
					}
					this.state = 1198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1199;
				this.match(MySqlParser.EVERY);
				this.state = 1202;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
				case 1:
					{
					this.state = 1200;
					this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 1201;
					this.expression(0);
					}
					break;
				}
				this.state = 1204;
				this.intervalType();
				this.state = 1213;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 101, this._ctx) ) {
				case 1:
					{
					this.state = 1205;
					this.match(MySqlParser.STARTS);
					this.state = 1206;
					(_localctx as IntervalScheduleContext)._start = this.timestampValue();
					this.state = 1210;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.PLUS) {
						{
						{
						this.state = 1207;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._startIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1212;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				this.state = 1223;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
				case 1:
					{
					this.state = 1215;
					this.match(MySqlParser.ENDS);
					this.state = 1216;
					(_localctx as IntervalScheduleContext)._end = this.timestampValue();
					this.state = 1220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.PLUS) {
						{
						{
						this.state = 1217;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._endIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1222;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestampValue(): TimestampValueContext {
		let _localctx: TimestampValueContext = new TimestampValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, MySqlParser.RULE_timestampValue);
		try {
			this.state = 1231;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1227;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1228;
				this.stringLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1229;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1230;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalExpr(): IntervalExprContext {
		let _localctx: IntervalExprContext = new IntervalExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, MySqlParser.RULE_intervalExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1233;
			this.match(MySqlParser.PLUS);
			this.state = 1234;
			this.match(MySqlParser.INTERVAL);
			this.state = 1237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1235;
				this.decimalLiteral();
				}
				break;

			case 2:
				{
				this.state = 1236;
				this.expression(0);
				}
				break;
			}
			this.state = 1239;
			this.intervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalType(): IntervalTypeContext {
		let _localctx: IntervalTypeContext = new IntervalTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, MySqlParser.RULE_intervalType);
		try {
			this.state = 1254;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1241;
				this.intervalTypeBase();
				}
				break;
			case MySqlParser.YEAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1242;
				this.match(MySqlParser.YEAR);
				}
				break;
			case MySqlParser.YEAR_MONTH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1243;
				this.match(MySqlParser.YEAR_MONTH);
				}
				break;
			case MySqlParser.DAY_HOUR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1244;
				this.match(MySqlParser.DAY_HOUR);
				}
				break;
			case MySqlParser.DAY_MINUTE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1245;
				this.match(MySqlParser.DAY_MINUTE);
				}
				break;
			case MySqlParser.DAY_SECOND:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1246;
				this.match(MySqlParser.DAY_SECOND);
				}
				break;
			case MySqlParser.HOUR_MINUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1247;
				this.match(MySqlParser.HOUR_MINUTE);
				}
				break;
			case MySqlParser.HOUR_SECOND:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1248;
				this.match(MySqlParser.HOUR_SECOND);
				}
				break;
			case MySqlParser.MINUTE_SECOND:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1249;
				this.match(MySqlParser.MINUTE_SECOND);
				}
				break;
			case MySqlParser.SECOND_MICROSECOND:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1250;
				this.match(MySqlParser.SECOND_MICROSECOND);
				}
				break;
			case MySqlParser.MINUTE_MICROSECOND:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1251;
				this.match(MySqlParser.MINUTE_MICROSECOND);
				}
				break;
			case MySqlParser.HOUR_MICROSECOND:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1252;
				this.match(MySqlParser.HOUR_MICROSECOND);
				}
				break;
			case MySqlParser.DAY_MICROSECOND:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1253;
				this.match(MySqlParser.DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableType(): EnableTypeContext {
		let _localctx: EnableTypeContext = new EnableTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, MySqlParser.RULE_enableType);
		try {
			this.state = 1261;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1256;
				this.match(MySqlParser.ENABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1257;
				this.match(MySqlParser.DISABLE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1258;
				this.match(MySqlParser.DISABLE);
				this.state = 1259;
				this.match(MySqlParser.ON);
				this.state = 1260;
				this.match(MySqlParser.SLAVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let _localctx: IndexTypeContext = new IndexTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, MySqlParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1263;
			this.match(MySqlParser.USING);
			this.state = 1264;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BTREE || _la === MySqlParser.HASH)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let _localctx: IndexOptionContext = new IndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, MySqlParser.RULE_indexOption);
		let _la: number;
		try {
			this.state = 1277;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.KEY_BLOCK_SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1266;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1267;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1270;
				this.fileSizeLiteral();
				}
				break;
			case MySqlParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1271;
				this.indexType();
				}
				break;
			case MySqlParser.WITH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1272;
				this.match(MySqlParser.WITH);
				this.state = 1273;
				this.match(MySqlParser.PARSER);
				this.state = 1274;
				this.uid();
				}
				break;
			case MySqlParser.COMMENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1275;
				this.match(MySqlParser.COMMENT);
				this.state = 1276;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let _localctx: ProcedureParameterContext = new ProcedureParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, MySqlParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1279;
			_localctx._direction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.IN || _la === MySqlParser.INOUT || _la === MySqlParser.OUT)) {
				_localctx._direction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1280;
			this.uid();
			this.state = 1281;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let _localctx: FunctionParameterContext = new FunctionParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, MySqlParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1283;
			this.uid();
			this.state = 1284;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let _localctx: RoutineOptionContext = new RoutineOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, MySqlParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 1309;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1286;
				this.match(MySqlParser.COMMENT);
				this.state = 1287;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1288;
				this.match(MySqlParser.LANGUAGE);
				this.state = 1289;
				this.match(MySqlParser.SQL);
				}
				break;
			case MySqlParser.DETERMINISTIC:
			case MySqlParser.NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 1290;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 1293;
				this.match(MySqlParser.DETERMINISTIC);
				}
				break;
			case MySqlParser.MODIFIES:
			case MySqlParser.READS:
			case MySqlParser.CONTAINS:
			case MySqlParser.NO:
				_localctx = new RoutineDataContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1304;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CONTAINS:
					{
					this.state = 1294;
					this.match(MySqlParser.CONTAINS);
					this.state = 1295;
					this.match(MySqlParser.SQL);
					}
					break;
				case MySqlParser.NO:
					{
					this.state = 1296;
					this.match(MySqlParser.NO);
					this.state = 1297;
					this.match(MySqlParser.SQL);
					}
					break;
				case MySqlParser.READS:
					{
					this.state = 1298;
					this.match(MySqlParser.READS);
					this.state = 1299;
					this.match(MySqlParser.SQL);
					this.state = 1300;
					this.match(MySqlParser.DATA);
					}
					break;
				case MySqlParser.MODIFIES:
					{
					this.state = 1301;
					this.match(MySqlParser.MODIFIES);
					this.state = 1302;
					this.match(MySqlParser.SQL);
					this.state = 1303;
					this.match(MySqlParser.DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1306;
				this.match(MySqlParser.SQL);
				this.state = 1307;
				this.match(MySqlParser.SECURITY);
				this.state = 1308;
				(_localctx as RoutineSecurityContext)._context = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					(_localctx as RoutineSecurityContext)._context = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let _localctx: ServerOptionContext = new ServerOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, MySqlParser.RULE_serverOption);
		try {
			this.state = 1325;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.HOST:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1311;
				this.match(MySqlParser.HOST);
				this.state = 1312;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATABASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1313;
				this.match(MySqlParser.DATABASE);
				this.state = 1314;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1315;
				this.match(MySqlParser.USER);
				this.state = 1316;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PASSWORD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1317;
				this.match(MySqlParser.PASSWORD);
				this.state = 1318;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.SOCKET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1319;
				this.match(MySqlParser.SOCKET);
				this.state = 1320;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.OWNER:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1321;
				this.match(MySqlParser.OWNER);
				this.state = 1322;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PORT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1323;
				this.match(MySqlParser.PORT);
				this.state = 1324;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinitions(): CreateDefinitionsContext {
		let _localctx: CreateDefinitionsContext = new CreateDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, MySqlParser.RULE_createDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1327;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1328;
			this.createDefinition();
			this.state = 1333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 1329;
				this.match(MySqlParser.COMMA);
				this.state = 1330;
				this.createDefinition();
				}
				}
				this.state = 1335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1336;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinition(): CreateDefinitionContext {
		let _localctx: CreateDefinitionContext = new CreateDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, MySqlParser.RULE_createDefinition);
		try {
			this.state = 1343;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1338;
				this.uid();
				this.state = 1339;
				this.columnDefinition();
				}
				break;
			case MySqlParser.CHECK:
			case MySqlParser.CONSTRAINT:
			case MySqlParser.FOREIGN:
			case MySqlParser.PRIMARY:
			case MySqlParser.UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1341;
				this.tableConstraint();
				}
				break;
			case MySqlParser.FULLTEXT:
			case MySqlParser.INDEX:
			case MySqlParser.KEY:
			case MySqlParser.SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1342;
				this.indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let _localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, MySqlParser.RULE_columnDefinition);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1345;
			this.dataType();
			this.state = 1349;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1346;
					this.columnConstraint();
					}
					}
				}
				this.state = 1351;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let _localctx: ColumnConstraintContext = new ColumnConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, MySqlParser.RULE_columnConstraint);
		let _la: number;
		try {
			this.state = 1385;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1352;
				this.nullNotnull();
				}
				break;
			case MySqlParser.DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1353;
				this.match(MySqlParser.DEFAULT);
				this.state = 1354;
				this.defaultValue();
				}
				break;
			case MySqlParser.AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1355;
				this.match(MySqlParser.AUTO_INCREMENT);
				}
				break;
			case MySqlParser.KEY:
			case MySqlParser.PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIMARY) {
					{
					this.state = 1356;
					this.match(MySqlParser.PRIMARY);
					}
				}

				this.state = 1359;
				this.match(MySqlParser.KEY);
				}
				break;
			case MySqlParser.UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1360;
				this.match(MySqlParser.UNIQUE);
				this.state = 1362;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
				case 1:
					{
					this.state = 1361;
					this.match(MySqlParser.KEY);
					}
					break;
				}
				}
				break;
			case MySqlParser.COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1364;
				this.match(MySqlParser.COMMENT);
				this.state = 1365;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1366;
				this.match(MySqlParser.COLUMN_FORMAT);
				this.state = 1367;
				(_localctx as FormatColumnConstraintContext)._colformat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DYNAMIC || _la === MySqlParser.FIXED)) {
					(_localctx as FormatColumnConstraintContext)._colformat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1368;
				this.match(MySqlParser.STORAGE);
				this.state = 1369;
				(_localctx as StorageColumnConstraintContext)._storageval = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DISK || _la === MySqlParser.MEMORY)) {
					(_localctx as StorageColumnConstraintContext)._storageval = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1370;
				this.referenceDefinition();
				}
				break;
			case MySqlParser.AS:
			case MySqlParser.GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.GENERATED) {
					{
					this.state = 1371;
					this.match(MySqlParser.GENERATED);
					this.state = 1372;
					this.match(MySqlParser.ALWAYS);
					}
				}

				this.state = 1375;
				this.match(MySqlParser.AS);
				this.state = 1376;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1377;
				this.expression(0);
				this.state = 1378;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORED || _la === MySqlParser.VIRTUAL) {
					{
					this.state = 1379;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.STORED || _la === MySqlParser.VIRTUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case MySqlParser.SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1382;
				this.match(MySqlParser.SERIAL);
				this.state = 1383;
				this.match(MySqlParser.DEFAULT);
				this.state = 1384;
				this.match(MySqlParser.VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let _localctx: TableConstraintContext = new TableConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, MySqlParser.RULE_tableConstraint);
		let _la: number;
		try {
			this.state = 1453;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1387;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 1388;
						(_localctx as PrimaryKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1393;
				this.match(MySqlParser.PRIMARY);
				this.state = 1394;
				this.match(MySqlParser.KEY);
				this.state = 1396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1395;
					this.indexType();
					}
				}

				this.state = 1398;
				this.indexColumnNames();
				this.state = 1402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.KEY_BLOCK_SIZE) {
					{
					{
					this.state = 1399;
					this.indexOption();
					}
					}
					this.state = 1404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1405;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 1406;
						(_localctx as UniqueKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1411;
				this.match(MySqlParser.UNIQUE);
				this.state = 1413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 1412;
					(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 1415;
					(_localctx as UniqueKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1418;
					this.indexType();
					}
				}

				this.state = 1421;
				this.indexColumnNames();
				this.state = 1425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.KEY_BLOCK_SIZE) {
					{
					{
					this.state = 1422;
					this.indexOption();
					}
					}
					this.state = 1427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1428;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 1429;
						(_localctx as ForeignKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1434;
				this.match(MySqlParser.FOREIGN);
				this.state = 1435;
				this.match(MySqlParser.KEY);
				this.state = 1437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 1436;
					(_localctx as ForeignKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1439;
				this.indexColumnNames();
				this.state = 1440;
				this.referenceDefinition();
				}
				break;

			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1442;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 1443;
						(_localctx as CheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1448;
				this.match(MySqlParser.CHECK);
				this.state = 1449;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1450;
				this.expression(0);
				this.state = 1451;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceDefinition(): ReferenceDefinitionContext {
		let _localctx: ReferenceDefinitionContext = new ReferenceDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, MySqlParser.RULE_referenceDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1455;
			this.match(MySqlParser.REFERENCES);
			this.state = 1456;
			this.tableName();
			this.state = 1457;
			this.indexColumnNames();
			this.state = 1460;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.MATCH) {
				{
				this.state = 1458;
				this.match(MySqlParser.MATCH);
				this.state = 1459;
				_localctx._matchType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULL || _la === MySqlParser.PARTIAL || _la === MySqlParser.SIMPLE)) {
					_localctx._matchType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1463;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 1462;
				this.referenceAction();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceAction(): ReferenceActionContext {
		let _localctx: ReferenceActionContext = new ReferenceActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, MySqlParser.RULE_referenceAction);
		let _la: number;
		try {
			this.state = 1481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1465;
				this.match(MySqlParser.ON);
				this.state = 1466;
				this.match(MySqlParser.DELETE);
				this.state = 1467;
				_localctx._onDelete = this.referenceControlType();
				this.state = 1471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ON) {
					{
					this.state = 1468;
					this.match(MySqlParser.ON);
					this.state = 1469;
					this.match(MySqlParser.UPDATE);
					this.state = 1470;
					_localctx._onUpdate = this.referenceControlType();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1473;
				this.match(MySqlParser.ON);
				this.state = 1474;
				this.match(MySqlParser.UPDATE);
				this.state = 1475;
				_localctx._onUpdate = this.referenceControlType();
				this.state = 1479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ON) {
					{
					this.state = 1476;
					this.match(MySqlParser.ON);
					this.state = 1477;
					this.match(MySqlParser.DELETE);
					this.state = 1478;
					_localctx._onDelete = this.referenceControlType();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceControlType(): ReferenceControlTypeContext {
		let _localctx: ReferenceControlTypeContext = new ReferenceControlTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, MySqlParser.RULE_referenceControlType);
		try {
			this.state = 1489;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.RESTRICT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1483;
				this.match(MySqlParser.RESTRICT);
				}
				break;
			case MySqlParser.CASCADE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1484;
				this.match(MySqlParser.CASCADE);
				}
				break;
			case MySqlParser.SET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1485;
				this.match(MySqlParser.SET);
				this.state = 1486;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case MySqlParser.NO:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1487;
				this.match(MySqlParser.NO);
				this.state = 1488;
				this.match(MySqlParser.ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		let _localctx: IndexColumnDefinitionContext = new IndexColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, MySqlParser.RULE_indexColumnDefinition);
		let _la: number;
		try {
			this.state = 1519;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.INDEX:
			case MySqlParser.KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1491;
				(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 1492;
					this.uid();
					}
				}

				this.state = 1496;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1495;
					this.indexType();
					}
				}

				this.state = 1498;
				this.indexColumnNames();
				this.state = 1502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.KEY_BLOCK_SIZE) {
					{
					{
					this.state = 1499;
					this.indexOption();
					}
					}
					this.state = 1504;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.FULLTEXT:
			case MySqlParser.SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1505;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 1506;
					(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 1509;
					this.uid();
					}
				}

				this.state = 1512;
				this.indexColumnNames();
				this.state = 1516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.KEY_BLOCK_SIZE) {
					{
					{
					this.state = 1513;
					this.indexOption();
					}
					}
					this.state = 1518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableOption(): TableOptionContext {
		let _localctx: TableOptionContext = new TableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, MySqlParser.RULE_tableOption);
		let _la: number;
		try {
			this.state = 1661;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1521;
				this.match(MySqlParser.ENGINE);
				this.state = 1523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1522;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1525;
				this.engineName();
				}
				break;

			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1526;
				this.match(MySqlParser.AUTO_INCREMENT);
				this.state = 1528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1527;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1530;
				this.decimalLiteral();
				}
				break;

			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1531;
				this.match(MySqlParser.AVG_ROW_LENGTH);
				this.state = 1533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1532;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1535;
				this.decimalLiteral();
				}
				break;

			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1536;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1542;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 1539;
					this.match(MySqlParser.CHARACTER);
					this.state = 1540;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 1541;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1544;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1547;
				this.charsetName();
				}
				break;

			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1548;
				this.match(MySqlParser.CHECKSUM);
				this.state = 1550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1549;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1552;
				(_localctx as TableOptionChecksumContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionChecksumContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1554;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1553;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1556;
				this.match(MySqlParser.COLLATE);
				this.state = 1558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1557;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1560;
				this.collationName();
				}
				break;

			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1561;
				this.match(MySqlParser.COMMENT);
				this.state = 1563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1562;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1565;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1566;
				this.match(MySqlParser.COMPRESSION);
				this.state = 1568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1567;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1570;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1571;
				this.match(MySqlParser.CONNECTION);
				this.state = 1573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1572;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1575;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1576;
				this.match(MySqlParser.DATA);
				this.state = 1577;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1578;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1581;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1582;
				this.match(MySqlParser.DELAY_KEY_WRITE);
				this.state = 1584;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1583;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1586;
				(_localctx as TableOptionDelayContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionDelayContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1587;
				this.match(MySqlParser.ENCRYPTION);
				this.state = 1589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1588;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1591;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1592;
				this.match(MySqlParser.INDEX);
				this.state = 1593;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1594;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1597;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1598;
				this.match(MySqlParser.INSERT_METHOD);
				this.state = 1600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1599;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1602;
				(_localctx as TableOptionInsertMethodContext)._insertMethod = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FIRST || _la === MySqlParser.LAST || _la === MySqlParser.NO)) {
					(_localctx as TableOptionInsertMethodContext)._insertMethod = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1603;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1604;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1607;
				this.fileSizeLiteral();
				}
				break;

			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1608;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 1610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1609;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1612;
				this.decimalLiteral();
				}
				break;

			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1613;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 1615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1614;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1617;
				this.decimalLiteral();
				}
				break;

			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1618;
				this.match(MySqlParser.PACK_KEYS);
				this.state = 1620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1619;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1622;
				(_localctx as TableOptionPackKeysContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPackKeysContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1623;
				this.match(MySqlParser.PASSWORD);
				this.state = 1625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1624;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1627;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1628;
				this.match(MySqlParser.ROW_FORMAT);
				this.state = 1630;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1629;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1632;
				(_localctx as TableOptionRowFormatContext)._rowFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (MySqlParser.COMPACT - 282)) | (1 << (MySqlParser.COMPRESSED - 282)) | (1 << (MySqlParser.DYNAMIC - 282)))) !== 0) || _la === MySqlParser.FIXED || _la === MySqlParser.REDUNDANT)) {
					(_localctx as TableOptionRowFormatContext)._rowFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1633;
				this.match(MySqlParser.STATS_AUTO_RECALC);
				this.state = 1635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1634;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1637;
				(_localctx as TableOptionRecalculationContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionRecalculationContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1638;
				this.match(MySqlParser.STATS_PERSISTENT);
				this.state = 1640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1639;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1642;
				(_localctx as TableOptionPersistentContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPersistentContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1643;
				this.match(MySqlParser.STATS_SAMPLE_PAGES);
				this.state = 1645;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1644;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1647;
				this.decimalLiteral();
				}
				break;

			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1648;
				this.match(MySqlParser.TABLESPACE);
				this.state = 1649;
				this.uid();
				this.state = 1651;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 178, this._ctx) ) {
				case 1:
					{
					this.state = 1650;
					this.tablespaceStorage();
					}
					break;
				}
				}
				break;

			case 25:
				_localctx = new TableOptionUnionContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1653;
				this.match(MySqlParser.UNION);
				this.state = 1655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1654;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1657;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1658;
				this.tables();
				this.state = 1659;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceStorage(): TablespaceStorageContext {
		let _localctx: TablespaceStorageContext = new TablespaceStorageContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, MySqlParser.RULE_tablespaceStorage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1663;
			this.match(MySqlParser.STORAGE);
			this.state = 1664;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DISK || _la === MySqlParser.MEMORY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let _localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, MySqlParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1666;
			this.match(MySqlParser.PARTITION);
			this.state = 1667;
			this.match(MySqlParser.BY);
			this.state = 1668;
			this.partitionFunctionDefinition();
			this.state = 1671;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				{
				this.state = 1669;
				this.match(MySqlParser.PARTITIONS);
				this.state = 1670;
				_localctx._count = this.decimalLiteral();
				}
				break;
			}
			this.state = 1680;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				{
				this.state = 1673;
				this.match(MySqlParser.SUBPARTITION);
				this.state = 1674;
				this.match(MySqlParser.BY);
				this.state = 1675;
				this.subpartitionFunctionDefinition();
				this.state = 1678;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 182, this._ctx) ) {
				case 1:
					{
					this.state = 1676;
					this.match(MySqlParser.SUBPARTITIONS);
					this.state = 1677;
					_localctx._subCount = this.decimalLiteral();
					}
					break;
				}
				}
				break;
			}
			this.state = 1693;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 185, this._ctx) ) {
			case 1:
				{
				this.state = 1682;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1683;
				this.partitionDefinition();
				this.state = 1688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1684;
					this.match(MySqlParser.COMMA);
					this.state = 1685;
					this.partitionDefinition();
					}
					}
					this.state = 1690;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1691;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		let _localctx: PartitionFunctionDefinitionContext = new PartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, MySqlParser.RULE_partitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 1740;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1695;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1698;
				this.match(MySqlParser.HASH);
				this.state = 1699;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1700;
				this.expression(0);
				this.state = 1701;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1703;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1706;
				this.match(MySqlParser.KEY);
				this.state = 1710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALGORITHM) {
					{
					this.state = 1707;
					this.match(MySqlParser.ALGORITHM);
					this.state = 1708;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 1709;
					(_localctx as PartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ONE_DECIMAL || _la === MySqlParser.TWO_DECIMAL)) {
						(_localctx as PartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1712;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1713;
				this.uidList();
				this.state = 1714;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1716;
				this.match(MySqlParser.RANGE);
				this.state = 1726;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LR_BRACKET:
					{
					this.state = 1717;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1718;
					this.expression(0);
					this.state = 1719;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case MySqlParser.COLUMNS:
					{
					this.state = 1721;
					this.match(MySqlParser.COLUMNS);
					this.state = 1722;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1723;
					this.uidList();
					this.state = 1724;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1728;
				this.match(MySqlParser.LIST);
				this.state = 1738;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LR_BRACKET:
					{
					this.state = 1729;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1730;
					this.expression(0);
					this.state = 1731;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case MySqlParser.COLUMNS:
					{
					this.state = 1733;
					this.match(MySqlParser.COLUMNS);
					this.state = 1734;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1735;
					this.uidList();
					this.state = 1736;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
		let _localctx: SubpartitionFunctionDefinitionContext = new SubpartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, MySqlParser.RULE_subpartitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 1763;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1742;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1745;
				this.match(MySqlParser.HASH);
				this.state = 1746;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1747;
				this.expression(0);
				this.state = 1748;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1750;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1753;
				this.match(MySqlParser.KEY);
				this.state = 1757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALGORITHM) {
					{
					this.state = 1754;
					this.match(MySqlParser.ALGORITHM);
					this.state = 1755;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 1756;
					(_localctx as SubPartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ONE_DECIMAL || _la === MySqlParser.TWO_DECIMAL)) {
						(_localctx as SubPartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1759;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1760;
				this.uidList();
				this.state = 1761;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let _localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, MySqlParser.RULE_partitionDefinition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1874;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1765;
				this.match(MySqlParser.PARTITION);
				this.state = 1766;
				this.uid();
				this.state = 1767;
				this.match(MySqlParser.VALUES);
				this.state = 1768;
				this.match(MySqlParser.LESS);
				this.state = 1769;
				this.match(MySqlParser.THAN);
				this.state = 1770;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1771;
				this.partitionDefinerAtom();
				this.state = 1776;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1772;
					this.match(MySqlParser.COMMA);
					this.state = 1773;
					this.partitionDefinerAtom();
					}
					}
					this.state = 1778;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1779;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MIN_ROWS - 398)) | (1 << (MySqlParser.NODEGROUP - 398)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1780;
					this.partitionOption();
					}
					}
					this.state = 1785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1786;
					this.subpartitionDefinition();
					this.state = 1791;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1787;
							this.match(MySqlParser.COMMA);
							this.state = 1788;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1793;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);
					}
					}
				}

				}
				break;

			case 2:
				_localctx = new PartitionListAtomContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1796;
				this.match(MySqlParser.PARTITION);
				this.state = 1797;
				this.uid();
				this.state = 1798;
				this.match(MySqlParser.VALUES);
				this.state = 1799;
				this.match(MySqlParser.IN);
				this.state = 1800;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1801;
				this.partitionDefinerAtom();
				this.state = 1806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1802;
					this.match(MySqlParser.COMMA);
					this.state = 1803;
					this.partitionDefinerAtom();
					}
					}
					this.state = 1808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1809;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MIN_ROWS - 398)) | (1 << (MySqlParser.NODEGROUP - 398)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1810;
					this.partitionOption();
					}
					}
					this.state = 1815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1816;
					this.subpartitionDefinition();
					this.state = 1821;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1817;
							this.match(MySqlParser.COMMA);
							this.state = 1818;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1823;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
					}
					}
				}

				}
				break;

			case 3:
				_localctx = new PartitionListVectorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1826;
				this.match(MySqlParser.PARTITION);
				this.state = 1827;
				this.uid();
				this.state = 1828;
				this.match(MySqlParser.VALUES);
				this.state = 1829;
				this.match(MySqlParser.IN);
				this.state = 1830;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1831;
				this.partitionDefinerVector();
				this.state = 1836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1832;
					this.match(MySqlParser.COMMA);
					this.state = 1833;
					this.partitionDefinerVector();
					}
					}
					this.state = 1838;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1839;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MIN_ROWS - 398)) | (1 << (MySqlParser.NODEGROUP - 398)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1840;
					this.partitionOption();
					}
					}
					this.state = 1845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1846;
					this.subpartitionDefinition();
					this.state = 1851;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1847;
							this.match(MySqlParser.COMMA);
							this.state = 1848;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1853;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
					}
					}
				}

				}
				break;

			case 4:
				_localctx = new PartitionSimpleContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1856;
				this.match(MySqlParser.PARTITION);
				this.state = 1857;
				this.uid();
				this.state = 1861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MIN_ROWS - 398)) | (1 << (MySqlParser.NODEGROUP - 398)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1858;
					this.partitionOption();
					}
					}
					this.state = 1863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1864;
					this.subpartitionDefinition();
					this.state = 1869;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1865;
							this.match(MySqlParser.COMMA);
							this.state = 1866;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1871;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerAtom(): PartitionDefinerAtomContext {
		let _localctx: PartitionDefinerAtomContext = new PartitionDefinerAtomContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, MySqlParser.RULE_partitionDefinerAtom);
		try {
			this.state = 1879;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 212, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1876;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1877;
				this.match(MySqlParser.MAXVALUE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1878;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerVector(): PartitionDefinerVectorContext {
		let _localctx: PartitionDefinerVectorContext = new PartitionDefinerVectorContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, MySqlParser.RULE_partitionDefinerVector);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1881;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1882;
			this.partitionDefinerAtom();
			this.state = 1885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1883;
				this.match(MySqlParser.COMMA);
				this.state = 1884;
				this.partitionDefinerAtom();
				}
				}
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.COMMA);
			this.state = 1889;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let _localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, MySqlParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1891;
			this.match(MySqlParser.SUBPARTITION);
			this.state = 1892;
			this.uid();
			this.state = 1896;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MIN_ROWS - 398)) | (1 << (MySqlParser.NODEGROUP - 398)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
				{
				{
				this.state = 1893;
				this.partitionOption();
				}
				}
				this.state = 1898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let _localctx: PartitionOptionContext = new PartitionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, MySqlParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 1944;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ENGINE:
			case MySqlParser.STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORAGE) {
					{
					this.state = 1899;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 1902;
				this.match(MySqlParser.ENGINE);
				this.state = 1904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1903;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1906;
				this.engineName();
				}
				break;
			case MySqlParser.COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1907;
				this.match(MySqlParser.COMMENT);
				this.state = 1909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1908;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1911;
				(_localctx as PartitionOptionCommentContext)._comment = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1912;
				this.match(MySqlParser.DATA);
				this.state = 1913;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1914;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1917;
				(_localctx as PartitionOptionDataDirectoryContext)._dataDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1918;
				this.match(MySqlParser.INDEX);
				this.state = 1919;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1920;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1923;
				(_localctx as PartitionOptionIndexDirectoryContext)._indexDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1924;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 1926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1925;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1928;
				(_localctx as PartitionOptionMaxRowsContext)._maxRows = this.decimalLiteral();
				}
				break;
			case MySqlParser.MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1929;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 1931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1930;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1933;
				(_localctx as PartitionOptionMinRowsContext)._minRows = this.decimalLiteral();
				}
				break;
			case MySqlParser.TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1934;
				this.match(MySqlParser.TABLESPACE);
				this.state = 1936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1935;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1938;
				(_localctx as PartitionOptionTablespaceContext)._tablespace = this.uid();
				}
				break;
			case MySqlParser.NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1939;
				this.match(MySqlParser.NODEGROUP);
				this.state = 1941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1940;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1943;
				(_localctx as PartitionOptionNodeGroupContext)._nodegroup = this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let _localctx: AlterDatabaseContext = new AlterDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, MySqlParser.RULE_alterDatabase);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1964;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1946;
				this.match(MySqlParser.ALTER);
				this.state = 1947;
				(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1949;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
				case 1:
					{
					this.state = 1948;
					this.uid();
					}
					break;
				}
				this.state = 1952;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1951;
						this.createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1954;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1956;
				this.match(MySqlParser.ALTER);
				this.state = 1957;
				(_localctx as AlterUpgradeNameContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as AlterUpgradeNameContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1958;
				this.uid();
				this.state = 1959;
				this.match(MySqlParser.UPGRADE);
				this.state = 1960;
				this.match(MySqlParser.DATA);
				this.state = 1961;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1962;
				this.match(MySqlParser.NAME);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let _localctx: AlterEventContext = new AlterEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, MySqlParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1966;
			this.match(MySqlParser.ALTER);
			this.state = 1968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 1967;
				this.ownerStatement();
				}
			}

			this.state = 1970;
			this.match(MySqlParser.EVENT);
			this.state = 1971;
			this.fullId();
			this.state = 1975;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				{
				this.state = 1972;
				this.match(MySqlParser.ON);
				this.state = 1973;
				this.match(MySqlParser.SCHEDULE);
				this.state = 1974;
				this.scheduleExpression();
				}
				break;
			}
			this.state = 1983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 1977;
				this.match(MySqlParser.ON);
				this.state = 1978;
				this.match(MySqlParser.COMPLETION);
				this.state = 1980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 1979;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 1982;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 1988;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 1985;
				this.match(MySqlParser.RENAME);
				this.state = 1986;
				this.match(MySqlParser.TO);
				this.state = 1987;
				this.fullId();
				}
				break;
			}
			this.state = 1991;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				{
				this.state = 1990;
				this.enableType();
				}
				break;
			}
			this.state = 1995;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 1993;
				this.match(MySqlParser.COMMENT);
				this.state = 1994;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			this.state = 1999;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				{
				this.state = 1997;
				this.match(MySqlParser.DO);
				this.state = 1998;
				this.routineBody();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterFunction(): AlterFunctionContext {
		let _localctx: AlterFunctionContext = new AlterFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, MySqlParser.RULE_alterFunction);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2001;
			this.match(MySqlParser.ALTER);
			this.state = 2002;
			this.match(MySqlParser.FUNCTION);
			this.state = 2003;
			this.fullId();
			this.state = 2007;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2004;
					this.routineOption();
					}
					}
				}
				this.state = 2009;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterInstance(): AlterInstanceContext {
		let _localctx: AlterInstanceContext = new AlterInstanceContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, MySqlParser.RULE_alterInstance);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2010;
			this.match(MySqlParser.ALTER);
			this.state = 2011;
			this.match(MySqlParser.INSTANCE);
			this.state = 2012;
			this.match(MySqlParser.ROTATE);
			this.state = 2013;
			this.match(MySqlParser.INNODB);
			this.state = 2014;
			this.match(MySqlParser.MASTER);
			this.state = 2015;
			this.match(MySqlParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let _localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, MySqlParser.RULE_alterLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2017;
			this.match(MySqlParser.ALTER);
			this.state = 2018;
			this.match(MySqlParser.LOGFILE);
			this.state = 2019;
			this.match(MySqlParser.GROUP);
			this.state = 2020;
			this.uid();
			this.state = 2021;
			this.match(MySqlParser.ADD);
			this.state = 2022;
			this.match(MySqlParser.UNDOFILE);
			this.state = 2023;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2029;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 2024;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2025;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2028;
				this.fileSizeLiteral();
				}
			}

			this.state = 2032;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 2031;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2034;
			this.match(MySqlParser.ENGINE);
			this.state = 2036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 2035;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2038;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterProcedure(): AlterProcedureContext {
		let _localctx: AlterProcedureContext = new AlterProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, MySqlParser.RULE_alterProcedure);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2040;
			this.match(MySqlParser.ALTER);
			this.state = 2041;
			this.match(MySqlParser.PROCEDURE);
			this.state = 2042;
			this.fullId();
			this.state = 2046;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2043;
					this.routineOption();
					}
					}
				}
				this.state = 2048;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let _localctx: AlterServerContext = new AlterServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, MySqlParser.RULE_alterServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2049;
			this.match(MySqlParser.ALTER);
			this.state = 2050;
			this.match(MySqlParser.SERVER);
			this.state = 2051;
			this.uid();
			this.state = 2052;
			this.match(MySqlParser.OPTIONS);
			this.state = 2053;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 2054;
			this.serverOption();
			this.state = 2059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2055;
				this.match(MySqlParser.COMMA);
				this.state = 2056;
				this.serverOption();
				}
				}
				this.state = 2061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2062;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let _localctx: AlterTableContext = new AlterTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, MySqlParser.RULE_alterTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2064;
			this.match(MySqlParser.ALTER);
			this.state = 2066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE) {
				{
				this.state = 2065;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2068;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2071;
			this.match(MySqlParser.TABLE);
			this.state = 2072;
			this.tableName();
			this.state = 2073;
			this.alterSpecification();
			this.state = 2078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2074;
				this.match(MySqlParser.COMMA);
				this.state = 2075;
				this.alterSpecification();
				}
				}
				this.state = 2080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2081;
				this.partitionDefinitions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let _localctx: AlterTablespaceContext = new AlterTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, MySqlParser.RULE_alterTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2084;
			this.match(MySqlParser.ALTER);
			this.state = 2085;
			this.match(MySqlParser.TABLESPACE);
			this.state = 2086;
			this.uid();
			this.state = 2087;
			_localctx._objectAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.ADD || _la === MySqlParser.DROP)) {
				_localctx._objectAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2088;
			this.match(MySqlParser.DATAFILE);
			this.state = 2089;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2093;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 2090;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2091;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2092;
				this.fileSizeLiteral();
				}
			}

			this.state = 2096;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 2095;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2098;
			this.match(MySqlParser.ENGINE);
			this.state = 2100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 2099;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2102;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let _localctx: AlterViewContext = new AlterViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, MySqlParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2104;
			this.match(MySqlParser.ALTER);
			this.state = 2108;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALGORITHM) {
				{
				this.state = 2105;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2106;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2107;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MERGE || _la === MySqlParser.TEMPTABLE || _la === MySqlParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 2110;
				this.ownerStatement();
				}
			}

			this.state = 2116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SQL) {
				{
				this.state = 2113;
				this.match(MySqlParser.SQL);
				this.state = 2114;
				this.match(MySqlParser.SECURITY);
				this.state = 2115;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2118;
			this.match(MySqlParser.VIEW);
			this.state = 2119;
			this.fullId();
			this.state = 2124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 2120;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2121;
				this.uidList();
				this.state = 2122;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2126;
			this.match(MySqlParser.AS);
			this.state = 2127;
			this.selectStatement();
			this.state = 2134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 2128;
				this.match(MySqlParser.WITH);
				this.state = 2130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL) {
					{
					this.state = 2129;
					_localctx._checkOpt = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL)) {
						_localctx._checkOpt = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2132;
				this.match(MySqlParser.CHECK);
				this.state = 2133;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSpecification(): AlterSpecificationContext {
		let _localctx: AlterSpecificationContext = new AlterSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, MySqlParser.RULE_alterSpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2482;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 308, this._ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2136;
				this.tableOption();
				this.state = 2143;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2138;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.COMMA) {
							{
							this.state = 2137;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 2140;
						this.tableOption();
						}
						}
					}
					this.state = 2145;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2146;
				this.match(MySqlParser.ADD);
				this.state = 2148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2147;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2150;
				this.uid();
				this.state = 2151;
				this.columnDefinition();
				this.state = 2155;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 2152;
					this.match(MySqlParser.FIRST);
					}
					break;

				case 2:
					{
					this.state = 2153;
					this.match(MySqlParser.AFTER);
					this.state = 2154;
					this.uid();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2157;
				this.match(MySqlParser.ADD);
				this.state = 2159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2158;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2161;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2162;
				this.uid();
				this.state = 2163;
				this.columnDefinition();
				this.state = 2170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2164;
					this.match(MySqlParser.COMMA);
					this.state = 2165;
					this.uid();
					this.state = 2166;
					this.columnDefinition();
					}
					}
					this.state = 2172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2173;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2175;
				this.match(MySqlParser.ADD);
				this.state = 2176;
				(_localctx as AlterByAddIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as AlterByAddIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 2177;
					this.uid();
					}
				}

				this.state = 2181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2180;
					this.indexType();
					}
				}

				this.state = 2183;
				this.indexColumnNames();
				this.state = 2187;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2184;
						this.indexOption();
						}
						}
					}
					this.state = 2189;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
				}
				}
				break;

			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2190;
				this.match(MySqlParser.ADD);
				this.state = 2195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2191;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2193;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 2192;
						(_localctx as AlterByAddPrimaryKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2197;
				this.match(MySqlParser.PRIMARY);
				this.state = 2198;
				this.match(MySqlParser.KEY);
				this.state = 2200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2199;
					this.indexType();
					}
				}

				this.state = 2202;
				this.indexColumnNames();
				this.state = 2206;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2203;
						this.indexOption();
						}
						}
					}
					this.state = 2208;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
				}
				}
				break;

			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2209;
				this.match(MySqlParser.ADD);
				this.state = 2214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2210;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 2211;
						(_localctx as AlterByAddUniqueKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2216;
				this.match(MySqlParser.UNIQUE);
				this.state = 2218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 2217;
					(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2221;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 2220;
					(_localctx as AlterByAddUniqueKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2223;
					this.indexType();
					}
				}

				this.state = 2226;
				this.indexColumnNames();
				this.state = 2230;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2227;
						this.indexOption();
						}
						}
					}
					this.state = 2232;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
				}
				}
				break;

			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2233;
				this.match(MySqlParser.ADD);
				this.state = 2234;
				(_localctx as AlterByAddSpecialIndexContext)._keyType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL)) {
					(_localctx as AlterByAddSpecialIndexContext)._keyType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 2235;
					(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 2238;
					this.uid();
					}
				}

				this.state = 2241;
				this.indexColumnNames();
				this.state = 2245;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2242;
						this.indexOption();
						}
						}
					}
					this.state = 2247;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
				}
				}
				break;

			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2248;
				this.match(MySqlParser.ADD);
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2249;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 2250;
						(_localctx as AlterByAddForeignKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2255;
				this.match(MySqlParser.FOREIGN);
				this.state = 2256;
				this.match(MySqlParser.KEY);
				this.state = 2258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 2257;
					(_localctx as AlterByAddForeignKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2260;
				this.indexColumnNames();
				this.state = 2261;
				this.referenceDefinition();
				}
				break;

			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2263;
				this.match(MySqlParser.ADD);
				this.state = 2268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2264;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
						{
						this.state = 2265;
						(_localctx as AlterByAddCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2270;
				this.match(MySqlParser.CHECK);
				this.state = 2271;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2272;
				this.expression(0);
				this.state = 2273;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2275;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2276;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2279;
				(_localctx as AlterBySetAlgorithmContext)._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
					(_localctx as AlterBySetAlgorithmContext)._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2280;
				this.match(MySqlParser.ALTER);
				this.state = 2282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2281;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2284;
				this.uid();
				this.state = 2290;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.SET:
					{
					this.state = 2285;
					this.match(MySqlParser.SET);
					this.state = 2286;
					this.match(MySqlParser.DEFAULT);
					this.state = 2287;
					this.defaultValue();
					}
					break;
				case MySqlParser.DROP:
					{
					this.state = 2288;
					this.match(MySqlParser.DROP);
					this.state = 2289;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2292;
				this.match(MySqlParser.CHANGE);
				this.state = 2294;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2293;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2296;
				(_localctx as AlterByChangeColumnContext)._oldColumn = this.uid();
				this.state = 2297;
				(_localctx as AlterByChangeColumnContext)._newColumn = this.uid();
				this.state = 2298;
				this.columnDefinition();
				this.state = 2302;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
				case 1:
					{
					this.state = 2299;
					this.match(MySqlParser.FIRST);
					}
					break;

				case 2:
					{
					this.state = 2300;
					this.match(MySqlParser.AFTER);
					this.state = 2301;
					(_localctx as AlterByChangeColumnContext)._afterColumn = this.uid();
					}
					break;
				}
				}
				break;

			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2304;
				this.match(MySqlParser.RENAME);
				this.state = 2305;
				this.match(MySqlParser.COLUMN);
				this.state = 2306;
				(_localctx as AlterByRenameColumnContext)._oldColumn = this.uid();
				this.state = 2307;
				this.match(MySqlParser.TO);
				this.state = 2308;
				(_localctx as AlterByRenameColumnContext)._newColumn = this.uid();
				}
				break;

			case 14:
				_localctx = new AlterByLockContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2310;
				this.match(MySqlParser.LOCK);
				this.state = 2312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2311;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2314;
				(_localctx as AlterByLockContext)._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
					(_localctx as AlterByLockContext)._lockType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2315;
				this.match(MySqlParser.MODIFY);
				this.state = 2317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2316;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2319;
				this.uid();
				this.state = 2320;
				this.columnDefinition();
				this.state = 2324;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
				case 1:
					{
					this.state = 2321;
					this.match(MySqlParser.FIRST);
					}
					break;

				case 2:
					{
					this.state = 2322;
					this.match(MySqlParser.AFTER);
					this.state = 2323;
					this.uid();
					}
					break;
				}
				}
				break;

			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2326;
				this.match(MySqlParser.DROP);
				this.state = 2328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2327;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2330;
				this.uid();
				}
				break;

			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2331;
				this.match(MySqlParser.DROP);
				this.state = 2332;
				this.match(MySqlParser.PRIMARY);
				this.state = 2333;
				this.match(MySqlParser.KEY);
				}
				break;

			case 18:
				_localctx = new AlterByDropIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2334;
				this.match(MySqlParser.DROP);
				this.state = 2335;
				(_localctx as AlterByDropIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as AlterByDropIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2336;
				this.uid();
				}
				break;

			case 19:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2337;
				this.match(MySqlParser.DROP);
				this.state = 2338;
				this.match(MySqlParser.FOREIGN);
				this.state = 2339;
				this.match(MySqlParser.KEY);
				this.state = 2340;
				this.uid();
				}
				break;

			case 20:
				_localctx = new AlterByDisableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2341;
				this.match(MySqlParser.DISABLE);
				this.state = 2342;
				this.match(MySqlParser.KEYS);
				}
				break;

			case 21:
				_localctx = new AlterByEnableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2343;
				this.match(MySqlParser.ENABLE);
				this.state = 2344;
				this.match(MySqlParser.KEYS);
				}
				break;

			case 22:
				_localctx = new AlterByRenameContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2345;
				this.match(MySqlParser.RENAME);
				this.state = 2347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS || _la === MySqlParser.TO) {
					{
					this.state = 2346;
					(_localctx as AlterByRenameContext)._renameFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.AS || _la === MySqlParser.TO)) {
						(_localctx as AlterByRenameContext)._renameFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2351;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 293, this._ctx) ) {
				case 1:
					{
					this.state = 2349;
					this.uid();
					}
					break;

				case 2:
					{
					this.state = 2350;
					this.fullId();
					}
					break;
				}
				}
				break;

			case 23:
				_localctx = new AlterByOrderContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2353;
				this.match(MySqlParser.ORDER);
				this.state = 2354;
				this.match(MySqlParser.BY);
				this.state = 2355;
				this.uidList();
				}
				break;

			case 24:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2356;
				this.match(MySqlParser.CONVERT);
				this.state = 2357;
				this.match(MySqlParser.TO);
				this.state = 2358;
				this.match(MySqlParser.CHARACTER);
				this.state = 2359;
				this.match(MySqlParser.SET);
				this.state = 2360;
				this.charsetName();
				this.state = 2363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 2361;
					this.match(MySqlParser.COLLATE);
					this.state = 2362;
					this.collationName();
					}
				}

				}
				break;

			case 25:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 2365;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 2368;
				this.match(MySqlParser.CHARACTER);
				this.state = 2369;
				this.match(MySqlParser.SET);
				this.state = 2370;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2371;
				this.charsetName();
				this.state = 2375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 2372;
					this.match(MySqlParser.COLLATE);
					this.state = 2373;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 2374;
					this.collationName();
					}
				}

				}
				break;

			case 26:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2377;
				this.match(MySqlParser.DISCARD);
				this.state = 2378;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 27:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2379;
				this.match(MySqlParser.IMPORT);
				this.state = 2380;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 28:
				_localctx = new AlterByForceContext(_localctx);
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2381;
				this.match(MySqlParser.FORCE);
				}
				break;

			case 29:
				_localctx = new AlterByValidateContext(_localctx);
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2382;
				(_localctx as AlterByValidateContext)._validationFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.WITH || _la === MySqlParser.WITHOUT)) {
					(_localctx as AlterByValidateContext)._validationFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2383;
				this.match(MySqlParser.VALIDATION);
				}
				break;

			case 30:
				_localctx = new AlterByAddPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2384;
				this.match(MySqlParser.ADD);
				this.state = 2385;
				this.match(MySqlParser.PARTITION);
				this.state = 2386;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2387;
				this.partitionDefinition();
				this.state = 2392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2388;
					this.match(MySqlParser.COMMA);
					this.state = 2389;
					this.partitionDefinition();
					}
					}
					this.state = 2394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2395;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 31:
				_localctx = new AlterByDropPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2397;
				this.match(MySqlParser.DROP);
				this.state = 2398;
				this.match(MySqlParser.PARTITION);
				this.state = 2399;
				this.uidList();
				}
				break;

			case 32:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2400;
				this.match(MySqlParser.DISCARD);
				this.state = 2401;
				this.match(MySqlParser.PARTITION);
				this.state = 2404;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2402;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2403;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2406;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 33:
				_localctx = new AlterByImportPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2407;
				this.match(MySqlParser.IMPORT);
				this.state = 2408;
				this.match(MySqlParser.PARTITION);
				this.state = 2411;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2409;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2410;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2413;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 34:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2414;
				this.match(MySqlParser.TRUNCATE);
				this.state = 2415;
				this.match(MySqlParser.PARTITION);
				this.state = 2418;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2416;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2417;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 35:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 2420;
				this.match(MySqlParser.COALESCE);
				this.state = 2421;
				this.match(MySqlParser.PARTITION);
				this.state = 2422;
				this.decimalLiteral();
				}
				break;

			case 36:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 2423;
				this.match(MySqlParser.REORGANIZE);
				this.state = 2424;
				this.match(MySqlParser.PARTITION);
				this.state = 2425;
				this.uidList();
				this.state = 2426;
				this.match(MySqlParser.INTO);
				this.state = 2427;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2428;
				this.partitionDefinition();
				this.state = 2433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2429;
					this.match(MySqlParser.COMMA);
					this.state = 2430;
					this.partitionDefinition();
					}
					}
					this.state = 2435;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2436;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 37:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 2438;
				this.match(MySqlParser.EXCHANGE);
				this.state = 2439;
				this.match(MySqlParser.PARTITION);
				this.state = 2440;
				this.uid();
				this.state = 2441;
				this.match(MySqlParser.WITH);
				this.state = 2442;
				this.match(MySqlParser.TABLE);
				this.state = 2443;
				this.tableName();
				this.state = 2446;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 302, this._ctx) ) {
				case 1:
					{
					this.state = 2444;
					(_localctx as AlterByExchangePartitionContext)._validationFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.WITH || _la === MySqlParser.WITHOUT)) {
						(_localctx as AlterByExchangePartitionContext)._validationFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2445;
					this.match(MySqlParser.VALIDATION);
					}
					break;
				}
				}
				break;

			case 38:
				_localctx = new AlterByAnalyzePartitiionContext(_localctx);
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 2448;
				this.match(MySqlParser.ANALYZE);
				this.state = 2449;
				this.match(MySqlParser.PARTITION);
				this.state = 2452;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2450;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2451;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 39:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 2454;
				this.match(MySqlParser.CHECK);
				this.state = 2455;
				this.match(MySqlParser.PARTITION);
				this.state = 2458;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2456;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2457;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 40:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 2460;
				this.match(MySqlParser.OPTIMIZE);
				this.state = 2461;
				this.match(MySqlParser.PARTITION);
				this.state = 2464;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2462;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2463;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 41:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 2466;
				this.match(MySqlParser.REBUILD);
				this.state = 2467;
				this.match(MySqlParser.PARTITION);
				this.state = 2470;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2468;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2469;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 42:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 2472;
				this.match(MySqlParser.REPAIR);
				this.state = 2473;
				this.match(MySqlParser.PARTITION);
				this.state = 2476;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2474;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2475;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 43:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 2478;
				this.match(MySqlParser.REMOVE);
				this.state = 2479;
				this.match(MySqlParser.PARTITIONING);
				}
				break;

			case 44:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 2480;
				this.match(MySqlParser.UPGRADE);
				this.state = 2481;
				this.match(MySqlParser.PARTITIONING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let _localctx: DropDatabaseContext = new DropDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, MySqlParser.RULE_dropDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2484;
			this.match(MySqlParser.DROP);
			this.state = 2485;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2487;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2486;
				this.ifExists();
				}
			}

			this.state = 2489;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let _localctx: DropEventContext = new DropEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, MySqlParser.RULE_dropEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2491;
			this.match(MySqlParser.DROP);
			this.state = 2492;
			this.match(MySqlParser.EVENT);
			this.state = 2494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2493;
				this.ifExists();
				}
			}

			this.state = 2496;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let _localctx: DropIndexContext = new DropIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, MySqlParser.RULE_dropIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2498;
			this.match(MySqlParser.DROP);
			this.state = 2499;
			this.match(MySqlParser.INDEX);
			this.state = 2501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 311, this._ctx) ) {
			case 1:
				{
				this.state = 2500;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2503;
			this.uid();
			this.state = 2504;
			this.match(MySqlParser.ON);
			this.state = 2505;
			this.tableName();
			this.state = 2511;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
			case 1:
				{
				this.state = 2506;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2507;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2510;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2518;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
			case 1:
				{
				this.state = 2513;
				this.match(MySqlParser.LOCK);
				this.state = 2515;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2514;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2517;
				_localctx._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
					_localctx._lockType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let _localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, MySqlParser.RULE_dropLogfileGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2520;
			this.match(MySqlParser.DROP);
			this.state = 2521;
			this.match(MySqlParser.LOGFILE);
			this.state = 2522;
			this.match(MySqlParser.GROUP);
			this.state = 2523;
			this.uid();
			this.state = 2524;
			this.match(MySqlParser.ENGINE);
			this.state = 2525;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 2526;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let _localctx: DropProcedureContext = new DropProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, MySqlParser.RULE_dropProcedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2528;
			this.match(MySqlParser.DROP);
			this.state = 2529;
			this.match(MySqlParser.PROCEDURE);
			this.state = 2531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2530;
				this.ifExists();
				}
			}

			this.state = 2533;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let _localctx: DropFunctionContext = new DropFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, MySqlParser.RULE_dropFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2535;
			this.match(MySqlParser.DROP);
			this.state = 2536;
			this.match(MySqlParser.FUNCTION);
			this.state = 2538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2537;
				this.ifExists();
				}
			}

			this.state = 2540;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let _localctx: DropServerContext = new DropServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, MySqlParser.RULE_dropServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2542;
			this.match(MySqlParser.DROP);
			this.state = 2543;
			this.match(MySqlParser.SERVER);
			this.state = 2545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2544;
				this.ifExists();
				}
			}

			this.state = 2547;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let _localctx: DropTableContext = new DropTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, MySqlParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2549;
			this.match(MySqlParser.DROP);
			this.state = 2551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.TEMPORARY) {
				{
				this.state = 2550;
				this.match(MySqlParser.TEMPORARY);
				}
			}

			this.state = 2553;
			this.match(MySqlParser.TABLE);
			this.state = 2555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2554;
				this.ifExists();
				}
			}

			this.state = 2557;
			this.tables();
			this.state = 2559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT) {
				{
				this.state = 2558;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTablespace(): DropTablespaceContext {
		let _localctx: DropTablespaceContext = new DropTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, MySqlParser.RULE_dropTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2561;
			this.match(MySqlParser.DROP);
			this.state = 2562;
			this.match(MySqlParser.TABLESPACE);
			this.state = 2563;
			this.uid();
			this.state = 2569;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				{
				this.state = 2564;
				this.match(MySqlParser.ENGINE);
				this.state = 2566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2565;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2568;
				this.engineName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let _localctx: DropTriggerContext = new DropTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, MySqlParser.RULE_dropTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2571;
			this.match(MySqlParser.DROP);
			this.state = 2572;
			this.match(MySqlParser.TRIGGER);
			this.state = 2574;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2573;
				this.ifExists();
				}
			}

			this.state = 2576;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let _localctx: DropViewContext = new DropViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, MySqlParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2578;
			this.match(MySqlParser.DROP);
			this.state = 2579;
			this.match(MySqlParser.VIEW);
			this.state = 2581;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2580;
				this.ifExists();
				}
			}

			this.state = 2583;
			this.fullId();
			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2584;
				this.match(MySqlParser.COMMA);
				this.state = 2585;
				this.fullId();
				}
				}
				this.state = 2590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT) {
				{
				this.state = 2591;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTable(): RenameTableContext {
		let _localctx: RenameTableContext = new RenameTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, MySqlParser.RULE_renameTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2594;
			this.match(MySqlParser.RENAME);
			this.state = 2595;
			this.match(MySqlParser.TABLE);
			this.state = 2596;
			this.renameTableClause();
			this.state = 2601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2597;
				this.match(MySqlParser.COMMA);
				this.state = 2598;
				this.renameTableClause();
				}
				}
				this.state = 2603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTableClause(): RenameTableClauseContext {
		let _localctx: RenameTableClauseContext = new RenameTableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, MySqlParser.RULE_renameTableClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2604;
			this.tableName();
			this.state = 2605;
			this.match(MySqlParser.TO);
			this.state = 2606;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTable(): TruncateTableContext {
		let _localctx: TruncateTableContext = new TruncateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, MySqlParser.RULE_truncateTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2608;
			this.match(MySqlParser.TRUNCATE);
			this.state = 2610;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.TABLE) {
				{
				this.state = 2609;
				this.match(MySqlParser.TABLE);
				}
			}

			this.state = 2612;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let _localctx: CallStatementContext = new CallStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, MySqlParser.RULE_callStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2614;
			this.match(MySqlParser.CALL);
			this.state = 2615;
			this.fullId();
			this.state = 2622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 2616;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2619;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
				case 1:
					{
					this.state = 2617;
					this.constants();
					}
					break;

				case 2:
					{
					this.state = 2618;
					this.expressions();
					}
					break;
				}
				this.state = 2621;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, MySqlParser.RULE_deleteStatement);
		try {
			this.state = 2626;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2624;
				this.singleDeleteStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2625;
				this.multipleDeleteStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let _localctx: DoStatementContext = new DoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, MySqlParser.RULE_doStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2628;
			this.match(MySqlParser.DO);
			this.state = 2629;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let _localctx: HandlerStatementContext = new HandlerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, MySqlParser.RULE_handlerStatement);
		try {
			this.state = 2635;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2631;
				this.handlerOpenStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2632;
				this.handlerReadIndexStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2633;
				this.handlerReadStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2634;
				this.handlerCloseStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let _localctx: InsertStatementContext = new InsertStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, MySqlParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2637;
			this.match(MySqlParser.INSERT);
			this.state = 2639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DELAYED || _la === MySqlParser.HIGH_PRIORITY || _la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2638;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DELAYED || _la === MySqlParser.HIGH_PRIORITY || _la === MySqlParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2641;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INTO) {
				{
				this.state = 2644;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 2647;
			this.tableName();
			this.state = 2653;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2648;
				this.match(MySqlParser.PARTITION);
				this.state = 2649;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2650;
				_localctx._partitions = this.uidList();
				this.state = 2651;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2671;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
			case MySqlParser.LR_BRACKET:
				{
				this.state = 2659;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 338, this._ctx) ) {
				case 1:
					{
					this.state = 2655;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2656;
					_localctx._columns = this.uidList();
					this.state = 2657;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2661;
				this.insertStatementValue();
				}
				break;
			case MySqlParser.SET:
				{
				this.state = 2662;
				this.match(MySqlParser.SET);
				this.state = 2663;
				_localctx._setFirst = this.updatedElement();
				this.state = 2668;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2664;
					this.match(MySqlParser.COMMA);
					this.state = 2665;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2670;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 2673;
				this.match(MySqlParser.ON);
				this.state = 2674;
				this.match(MySqlParser.DUPLICATE);
				this.state = 2675;
				this.match(MySqlParser.KEY);
				this.state = 2676;
				this.match(MySqlParser.UPDATE);
				this.state = 2677;
				_localctx._duplicatedFirst = this.updatedElement();
				this.state = 2682;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2678;
					this.match(MySqlParser.COMMA);
					this.state = 2679;
					_localctx._updatedElement = this.updatedElement();
					_localctx._duplicatedElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2684;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadDataStatement(): LoadDataStatementContext {
		let _localctx: LoadDataStatementContext = new LoadDataStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, MySqlParser.RULE_loadDataStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2687;
			this.match(MySqlParser.LOAD);
			this.state = 2688;
			this.match(MySqlParser.DATA);
			this.state = 2690;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT) {
				{
				this.state = 2689;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2693;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOCAL) {
				{
				this.state = 2692;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 2695;
			this.match(MySqlParser.INFILE);
			this.state = 2696;
			_localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 2698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
				{
				this.state = 2697;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2700;
			this.match(MySqlParser.INTO);
			this.state = 2701;
			this.match(MySqlParser.TABLE);
			this.state = 2702;
			this.tableName();
			this.state = 2708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2703;
				this.match(MySqlParser.PARTITION);
				this.state = 2704;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2705;
				this.uidList();
				this.state = 2706;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CHARACTER) {
				{
				this.state = 2710;
				this.match(MySqlParser.CHARACTER);
				this.state = 2711;
				this.match(MySqlParser.SET);
				this.state = 2712;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 2721;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 349, this._ctx) ) {
			case 1:
				{
				this.state = 2715;
				_localctx._fieldsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
					_localctx._fieldsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2716;
					this.selectFieldsInto();
					}
					}
					this.state = 2719;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.ENCLOSED || _la === MySqlParser.ESCAPED || _la === MySqlParser.OPTIONALLY || _la === MySqlParser.TERMINATED);
				}
				break;
			}
			this.state = 2729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LINES) {
				{
				this.state = 2723;
				this.match(MySqlParser.LINES);
				this.state = 2725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2724;
					this.selectLinesInto();
					}
					}
					this.state = 2727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.STARTING || _la === MySqlParser.TERMINATED);
				}
			}

			this.state = 2735;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2731;
				this.match(MySqlParser.IGNORE);
				this.state = 2732;
				this.decimalLiteral();
				this.state = 2733;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LINES || _la === MySqlParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2748;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 354, this._ctx) ) {
			case 1:
				{
				this.state = 2737;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2738;
				this.assignmentField();
				this.state = 2743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2739;
					this.match(MySqlParser.COMMA);
					this.state = 2740;
					this.assignmentField();
					}
					}
					this.state = 2745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2746;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 2759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 356, this._ctx) ) {
			case 1:
				{
				this.state = 2750;
				this.match(MySqlParser.SET);
				this.state = 2751;
				this.updatedElement();
				this.state = 2756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2752;
					this.match(MySqlParser.COMMA);
					this.state = 2753;
					this.updatedElement();
					}
					}
					this.state = 2758;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadXmlStatement(): LoadXmlStatementContext {
		let _localctx: LoadXmlStatementContext = new LoadXmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, MySqlParser.RULE_loadXmlStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2761;
			this.match(MySqlParser.LOAD);
			this.state = 2762;
			this.match(MySqlParser.XML);
			this.state = 2764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT) {
				{
				this.state = 2763;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOCAL) {
				{
				this.state = 2766;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 2769;
			this.match(MySqlParser.INFILE);
			this.state = 2770;
			_localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 2772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
				{
				this.state = 2771;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2774;
			this.match(MySqlParser.INTO);
			this.state = 2775;
			this.match(MySqlParser.TABLE);
			this.state = 2776;
			this.tableName();
			this.state = 2780;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CHARACTER) {
				{
				this.state = 2777;
				this.match(MySqlParser.CHARACTER);
				this.state = 2778;
				this.match(MySqlParser.SET);
				this.state = 2779;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 2788;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
			case 1:
				{
				this.state = 2782;
				this.match(MySqlParser.ROWS);
				this.state = 2783;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 2784;
				this.match(MySqlParser.BY);
				this.state = 2785;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 2786;
				_localctx._tag = this.match(MySqlParser.STRING_LITERAL);
				this.state = 2787;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			}
			this.state = 2794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2790;
				this.match(MySqlParser.IGNORE);
				this.state = 2791;
				this.decimalLiteral();
				this.state = 2792;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LINES || _la === MySqlParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2807;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
			case 1:
				{
				this.state = 2796;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2797;
				this.assignmentField();
				this.state = 2802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2798;
					this.match(MySqlParser.COMMA);
					this.state = 2799;
					this.assignmentField();
					}
					}
					this.state = 2804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2805;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 2818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
			case 1:
				{
				this.state = 2809;
				this.match(MySqlParser.SET);
				this.state = 2810;
				this.updatedElement();
				this.state = 2815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2811;
					this.match(MySqlParser.COMMA);
					this.state = 2812;
					this.updatedElement();
					}
					}
					this.state = 2817;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let _localctx: ReplaceStatementContext = new ReplaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, MySqlParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2820;
			this.match(MySqlParser.REPLACE);
			this.state = 2822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DELAYED || _la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2821;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DELAYED || _la === MySqlParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INTO) {
				{
				this.state = 2824;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 2827;
			this.tableName();
			this.state = 2833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2828;
				this.match(MySqlParser.PARTITION);
				this.state = 2829;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2830;
				_localctx._partitions = this.uidList();
				this.state = 2831;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2851;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
			case MySqlParser.LR_BRACKET:
				{
				this.state = 2839;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 370, this._ctx) ) {
				case 1:
					{
					this.state = 2835;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2836;
					_localctx._columns = this.uidList();
					this.state = 2837;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2841;
				this.insertStatementValue();
				}
				break;
			case MySqlParser.SET:
				{
				this.state = 2842;
				this.match(MySqlParser.SET);
				this.state = 2843;
				_localctx._setFirst = this.updatedElement();
				this.state = 2848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2844;
					this.match(MySqlParser.COMMA);
					this.state = 2845;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2850;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let _localctx: SelectStatementContext = new SelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, MySqlParser.RULE_selectStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2908;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2853;
				this.querySpecification();
				this.state = 2855;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 373, this._ctx) ) {
				case 1:
					{
					this.state = 2854;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2857;
				this.queryExpression();
				this.state = 2859;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
				case 1:
					{
					this.state = 2858;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new UnionSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2861;
				this.querySpecificationNointo();
				this.state = 2863;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2862;
						this.unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2865;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 375, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2875;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNION) {
					{
					this.state = 2867;
					this.match(MySqlParser.UNION);
					this.state = 2869;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
						{
						this.state = 2868;
						(_localctx as UnionSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
							(_localctx as UnionSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 2873;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.SELECT:
						{
						this.state = 2871;
						this.querySpecification();
						}
						break;
					case MySqlParser.LR_BRACKET:
						{
						this.state = 2872;
						this.queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 2878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 2877;
					this.orderByClause();
					}
				}

				this.state = 2881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 2880;
					this.limitClause();
					}
				}

				this.state = 2884;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 381, this._ctx) ) {
				case 1:
					{
					this.state = 2883;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2886;
				this.queryExpressionNointo();
				this.state = 2888;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2887;
						this.unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2890;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 382, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNION) {
					{
					this.state = 2892;
					this.match(MySqlParser.UNION);
					this.state = 2894;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
						{
						this.state = 2893;
						(_localctx as UnionParenthesisSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
							(_localctx as UnionParenthesisSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 2896;
					this.queryExpression();
					}
				}

				this.state = 2900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 2899;
					this.orderByClause();
					}
				}

				this.state = 2903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 2902;
					this.limitClause();
					}
				}

				this.state = 2906;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 387, this._ctx) ) {
				case 1:
					{
					this.state = 2905;
					this.lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, MySqlParser.RULE_updateStatement);
		try {
			this.state = 2912;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2910;
				this.singleUpdateStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2911;
				this.multipleUpdateStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatementValue(): InsertStatementValueContext {
		let _localctx: InsertStatementValueContext = new InsertStatementValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, MySqlParser.RULE_insertStatementValue);
		let _la: number;
		try {
			this.state = 2929;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2914;
				this.selectStatement();
				}
				break;
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2915;
				_localctx._insertFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.VALUES || _la === MySqlParser.VALUE)) {
					_localctx._insertFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2916;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2917;
				this.expressionsWithDefaults();
				this.state = 2918;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 2926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2919;
					this.match(MySqlParser.COMMA);
					this.state = 2920;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2921;
					this.expressionsWithDefaults();
					this.state = 2922;
					this.match(MySqlParser.RR_BRACKET);
					}
					}
					this.state = 2928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updatedElement(): UpdatedElementContext {
		let _localctx: UpdatedElementContext = new UpdatedElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, MySqlParser.RULE_updatedElement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2931;
			this.fullColumnName();
			this.state = 2932;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 2935;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				{
				this.state = 2933;
				this.expression(0);
				}
				break;
			case MySqlParser.DEFAULT:
				{
				this.state = 2934;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignmentField(): AssignmentFieldContext {
		let _localctx: AssignmentFieldContext = new AssignmentFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, MySqlParser.RULE_assignmentField);
		try {
			this.state = 2939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2937;
				this.uid();
				}
				break;
			case MySqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2938;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockClause(): LockClauseContext {
		let _localctx: LockClauseContext = new LockClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, MySqlParser.RULE_lockClause);
		try {
			this.state = 2947;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2941;
				this.match(MySqlParser.FOR);
				this.state = 2942;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case MySqlParser.LOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2943;
				this.match(MySqlParser.LOCK);
				this.state = 2944;
				this.match(MySqlParser.IN);
				this.state = 2945;
				this.match(MySqlParser.SHARE);
				this.state = 2946;
				this.match(MySqlParser.MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleDeleteStatement(): SingleDeleteStatementContext {
		let _localctx: SingleDeleteStatementContext = new SingleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, MySqlParser.RULE_singleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2949;
			this.match(MySqlParser.DELETE);
			this.state = 2951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2950;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 2954;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.QUICK) {
				{
				this.state = 2953;
				this.match(MySqlParser.QUICK);
				}
			}

			this.state = 2957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2956;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2959;
			this.match(MySqlParser.FROM);
			this.state = 2960;
			this.tableName();
			this.state = 2966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2961;
				this.match(MySqlParser.PARTITION);
				this.state = 2962;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2963;
				this.uidList();
				this.state = 2964;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 2968;
				this.match(MySqlParser.WHERE);
				this.state = 2969;
				this.expression(0);
				}
			}

			this.state = 2973;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ORDER) {
				{
				this.state = 2972;
				this.orderByClause();
				}
			}

			this.state = 2977;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 2975;
				this.match(MySqlParser.LIMIT);
				this.state = 2976;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleDeleteStatement(): MultipleDeleteStatementContext {
		let _localctx: MultipleDeleteStatementContext = new MultipleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, MySqlParser.RULE_multipleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2979;
			this.match(MySqlParser.DELETE);
			this.state = 2981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2980;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 2984;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				{
				this.state = 2983;
				this.match(MySqlParser.QUICK);
				}
				break;
			}
			this.state = 2987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2986;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3028;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				{
				this.state = 2989;
				this.tableName();
				this.state = 2992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DOT) {
					{
					this.state = 2990;
					this.match(MySqlParser.DOT);
					this.state = 2991;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2994;
					this.match(MySqlParser.COMMA);
					this.state = 2995;
					this.tableName();
					this.state = 2998;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DOT) {
						{
						this.state = 2996;
						this.match(MySqlParser.DOT);
						this.state = 2997;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3005;
				this.match(MySqlParser.FROM);
				this.state = 3006;
				this.tableSources();
				}
				break;
			case MySqlParser.FROM:
				{
				this.state = 3008;
				this.match(MySqlParser.FROM);
				this.state = 3009;
				this.tableName();
				this.state = 3012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DOT) {
					{
					this.state = 3010;
					this.match(MySqlParser.DOT);
					this.state = 3011;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3014;
					this.match(MySqlParser.COMMA);
					this.state = 3015;
					this.tableName();
					this.state = 3018;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DOT) {
						{
						this.state = 3016;
						this.match(MySqlParser.DOT);
						this.state = 3017;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3024;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3025;
				this.match(MySqlParser.USING);
				this.state = 3026;
				this.tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3032;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3030;
				this.match(MySqlParser.WHERE);
				this.state = 3031;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerOpenStatement(): HandlerOpenStatementContext {
		let _localctx: HandlerOpenStatementContext = new HandlerOpenStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, MySqlParser.RULE_handlerOpenStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3034;
			this.match(MySqlParser.HANDLER);
			this.state = 3035;
			this.tableName();
			this.state = 3036;
			this.match(MySqlParser.OPEN);
			this.state = 3041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				{
				this.state = 3038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3037;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3040;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
		let _localctx: HandlerReadIndexStatementContext = new HandlerReadIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, MySqlParser.RULE_handlerReadIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3043;
			this.match(MySqlParser.HANDLER);
			this.state = 3044;
			this.tableName();
			this.state = 3045;
			this.match(MySqlParser.READ);
			this.state = 3046;
			_localctx._index = this.uid();
			this.state = 3053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.EQUAL_SYMBOL:
			case MySqlParser.GREATER_SYMBOL:
			case MySqlParser.LESS_SYMBOL:
			case MySqlParser.EXCLAMATION_SYMBOL:
				{
				this.state = 3047;
				this.comparisonOperator();
				this.state = 3048;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3049;
				this.constants();
				this.state = 3050;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.FIRST:
			case MySqlParser.LAST:
			case MySqlParser.NEXT:
			case MySqlParser.PREV:
				{
				this.state = 3052;
				_localctx._moveOrder = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FIRST || _la === MySqlParser.LAST || _la === MySqlParser.NEXT || _la === MySqlParser.PREV)) {
					_localctx._moveOrder = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3055;
				this.match(MySqlParser.WHERE);
				this.state = 3056;
				this.expression(0);
				}
			}

			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3059;
				this.match(MySqlParser.LIMIT);
				this.state = 3060;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadStatement(): HandlerReadStatementContext {
		let _localctx: HandlerReadStatementContext = new HandlerReadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, MySqlParser.RULE_handlerReadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3063;
			this.match(MySqlParser.HANDLER);
			this.state = 3064;
			this.tableName();
			this.state = 3065;
			this.match(MySqlParser.READ);
			this.state = 3066;
			_localctx._moveOrder = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FIRST || _la === MySqlParser.NEXT)) {
				_localctx._moveOrder = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3067;
				this.match(MySqlParser.WHERE);
				this.state = 3068;
				this.expression(0);
				}
			}

			this.state = 3073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3071;
				this.match(MySqlParser.LIMIT);
				this.state = 3072;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerCloseStatement(): HandlerCloseStatementContext {
		let _localctx: HandlerCloseStatementContext = new HandlerCloseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, MySqlParser.RULE_handlerCloseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3075;
			this.match(MySqlParser.HANDLER);
			this.state = 3076;
			this.tableName();
			this.state = 3077;
			this.match(MySqlParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleUpdateStatement(): SingleUpdateStatementContext {
		let _localctx: SingleUpdateStatementContext = new SingleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, MySqlParser.RULE_singleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3079;
			this.match(MySqlParser.UPDATE);
			this.state = 3081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3080;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3083;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3086;
			this.tableName();
			this.state = 3091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AS || _la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 3088;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3087;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3090;
				this.uid();
				}
			}

			this.state = 3093;
			this.match(MySqlParser.SET);
			this.state = 3094;
			this.updatedElement();
			this.state = 3099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3095;
				this.match(MySqlParser.COMMA);
				this.state = 3096;
				this.updatedElement();
				}
				}
				this.state = 3101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3102;
				this.match(MySqlParser.WHERE);
				this.state = 3103;
				this.expression(0);
				}
			}

			this.state = 3107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ORDER) {
				{
				this.state = 3106;
				this.orderByClause();
				}
			}

			this.state = 3110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3109;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleUpdateStatement(): MultipleUpdateStatementContext {
		let _localctx: MultipleUpdateStatementContext = new MultipleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, MySqlParser.RULE_multipleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3112;
			this.match(MySqlParser.UPDATE);
			this.state = 3114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3113;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3116;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3119;
			this.tableSources();
			this.state = 3120;
			this.match(MySqlParser.SET);
			this.state = 3121;
			this.updatedElement();
			this.state = 3126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3122;
				this.match(MySqlParser.COMMA);
				this.state = 3123;
				this.updatedElement();
				}
				}
				this.state = 3128;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3131;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3129;
				this.match(MySqlParser.WHERE);
				this.state = 3130;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let _localctx: OrderByClauseContext = new OrderByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, MySqlParser.RULE_orderByClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3133;
			this.match(MySqlParser.ORDER);
			this.state = 3134;
			this.match(MySqlParser.BY);
			this.state = 3135;
			this.orderByExpression();
			this.state = 3140;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3136;
				this.match(MySqlParser.COMMA);
				this.state = 3137;
				this.orderByExpression();
				}
				}
				this.state = 3142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByExpression(): OrderByExpressionContext {
		let _localctx: OrderByExpressionContext = new OrderByExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, MySqlParser.RULE_orderByExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3143;
			this.expression(0);
			this.state = 3145;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				{
				this.state = 3144;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSources(): TableSourcesContext {
		let _localctx: TableSourcesContext = new TableSourcesContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, MySqlParser.RULE_tableSources);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3147;
			this.tableSource();
			this.state = 3152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3148;
				this.match(MySqlParser.COMMA);
				this.state = 3149;
				this.tableSource();
				}
				}
				this.state = 3154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let _localctx: TableSourceContext = new TableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, MySqlParser.RULE_tableSource);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3172;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3155;
				this.tableSourceItem();
				this.state = 3159;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3156;
						this.joinPart();
						}
						}
					}
					this.state = 3161;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3162;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3163;
				this.tableSourceItem();
				this.state = 3167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.CROSS || ((((_la - 72)) & ~0x1F) === 0 && ((1 << (_la - 72)) & ((1 << (MySqlParser.INNER - 72)) | (1 << (MySqlParser.JOIN - 72)) | (1 << (MySqlParser.LEFT - 72)) | (1 << (MySqlParser.NATURAL - 72)))) !== 0) || _la === MySqlParser.RIGHT || _la === MySqlParser.STRAIGHT_JOIN) {
					{
					{
					this.state = 3164;
					this.joinPart();
					}
					}
					this.state = 3169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3170;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSourceItem(): TableSourceItemContext {
		let _localctx: TableSourceItemContext = new TableSourceItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, MySqlParser.RULE_tableSourceItem);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3214;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3174;
				this.tableName();
				this.state = 3180;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 3175;
					this.match(MySqlParser.PARTITION);
					this.state = 3176;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3177;
					this.uidList();
					this.state = 3178;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 3186;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
				case 1:
					{
					this.state = 3183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3182;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3185;
					(_localctx as AtomTableItemContext)._alias = this.uid();
					}
					break;
				}
				this.state = 3196;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
				case 1:
					{
					this.state = 3188;
					this.indexHint();
					this.state = 3193;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3189;
							this.match(MySqlParser.COMMA);
							this.state = 3190;
							this.indexHint();
							}
							}
						}
						this.state = 3195;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 441, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3203;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
				case 1:
					{
					this.state = 3198;
					this.selectStatement();
					}
					break;

				case 2:
					{
					this.state = 3199;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3200;
					(_localctx as SubqueryTableItemContext)._parenthesisSubquery = this.selectStatement();
					this.state = 3201;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3205;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3208;
				(_localctx as SubqueryTableItemContext)._alias = this.uid();
				}
				break;

			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3210;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3211;
				this.tableSources();
				this.state = 3212;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let _localctx: IndexHintContext = new IndexHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, MySqlParser.RULE_indexHint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3216;
			_localctx._indexHintAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FORCE || _la === MySqlParser.IGNORE || _la === MySqlParser.USE)) {
				_localctx._indexHintAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3217;
			_localctx._keyFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
				_localctx._keyFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3220;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3218;
				this.match(MySqlParser.FOR);
				this.state = 3219;
				this.indexHintType();
				}
			}

			this.state = 3222;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3223;
			this.uidList();
			this.state = 3224;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let _localctx: IndexHintTypeContext = new IndexHintTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, MySqlParser.RULE_indexHintType);
		try {
			this.state = 3231;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3226;
				this.match(MySqlParser.JOIN);
				}
				break;
			case MySqlParser.ORDER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3227;
				this.match(MySqlParser.ORDER);
				this.state = 3228;
				this.match(MySqlParser.BY);
				}
				break;
			case MySqlParser.GROUP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3229;
				this.match(MySqlParser.GROUP);
				this.state = 3230;
				this.match(MySqlParser.BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinPart(): JoinPartContext {
		let _localctx: JoinPartContext = new JoinPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, MySqlParser.RULE_joinPart);
		let _la: number;
		try {
			this.state = 3277;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CROSS:
			case MySqlParser.INNER:
			case MySqlParser.JOIN:
				_localctx = new InnerJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CROSS || _la === MySqlParser.INNER) {
					{
					this.state = 3233;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CROSS || _la === MySqlParser.INNER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3236;
				this.match(MySqlParser.JOIN);
				this.state = 3237;
				this.tableSourceItem();
				this.state = 3245;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 449, this._ctx) ) {
				case 1:
					{
					this.state = 3238;
					this.match(MySqlParser.ON);
					this.state = 3239;
					this.expression(0);
					}
					break;

				case 2:
					{
					this.state = 3240;
					this.match(MySqlParser.USING);
					this.state = 3241;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3242;
					this.uidList();
					this.state = 3243;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MySqlParser.STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3247;
				this.match(MySqlParser.STRAIGHT_JOIN);
				this.state = 3248;
				this.tableSourceItem();
				this.state = 3251;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 450, this._ctx) ) {
				case 1:
					{
					this.state = 3249;
					this.match(MySqlParser.ON);
					this.state = 3250;
					this.expression(0);
					}
					break;
				}
				}
				break;
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3253;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.OUTER) {
					{
					this.state = 3254;
					this.match(MySqlParser.OUTER);
					}
				}

				this.state = 3257;
				this.match(MySqlParser.JOIN);
				this.state = 3258;
				this.tableSourceItem();
				this.state = 3266;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.ON:
					{
					this.state = 3259;
					this.match(MySqlParser.ON);
					this.state = 3260;
					this.expression(0);
					}
					break;
				case MySqlParser.USING:
					{
					this.state = 3261;
					this.match(MySqlParser.USING);
					this.state = 3262;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3263;
					this.uidList();
					this.state = 3264;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3268;
				this.match(MySqlParser.NATURAL);
				this.state = 3273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT) {
					{
					this.state = 3269;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3271;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.OUTER) {
						{
						this.state = 3270;
						this.match(MySqlParser.OUTER);
						}
					}

					}
				}

				this.state = 3275;
				this.match(MySqlParser.JOIN);
				this.state = 3276;
				this.tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let _localctx: QueryExpressionContext = new QueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, MySqlParser.RULE_queryExpression);
		try {
			this.state = 3287;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3279;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3280;
				this.querySpecification();
				this.state = 3281;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3283;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3284;
				this.queryExpression();
				this.state = 3285;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpressionNointo(): QueryExpressionNointoContext {
		let _localctx: QueryExpressionNointoContext = new QueryExpressionNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, MySqlParser.RULE_queryExpressionNointo);
		try {
			this.state = 3297;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 457, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3289;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3290;
				this.querySpecificationNointo();
				this.state = 3291;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3293;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3294;
				this.queryExpressionNointo();
				this.state = 3295;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, MySqlParser.RULE_querySpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3339;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3299;
				this.match(MySqlParser.SELECT);
				this.state = 3303;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3300;
						this.selectSpec();
						}
						}
					}
					this.state = 3305;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
				}
				this.state = 3306;
				this.selectElements();
				this.state = 3308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTO) {
					{
					this.state = 3307;
					this.selectIntoExpression();
					}
				}

				this.state = 3311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 3310;
					this.fromClause();
					}
				}

				this.state = 3314;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
				case 1:
					{
					this.state = 3313;
					this.orderByClause();
					}
					break;
				}
				this.state = 3317;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
				case 1:
					{
					this.state = 3316;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3319;
				this.match(MySqlParser.SELECT);
				this.state = 3323;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3320;
						this.selectSpec();
						}
						}
					}
					this.state = 3325;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
				}
				this.state = 3326;
				this.selectElements();
				this.state = 3328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 3327;
					this.fromClause();
					}
				}

				this.state = 3331;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 3330;
					this.orderByClause();
					}
					break;
				}
				this.state = 3334;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 466, this._ctx) ) {
				case 1:
					{
					this.state = 3333;
					this.limitClause();
					}
					break;
				}
				this.state = 3337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTO) {
					{
					this.state = 3336;
					this.selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		let _localctx: QuerySpecificationNointoContext = new QuerySpecificationNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, MySqlParser.RULE_querySpecificationNointo);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3341;
			this.match(MySqlParser.SELECT);
			this.state = 3345;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3342;
					this.selectSpec();
					}
					}
				}
				this.state = 3347;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 469, this._ctx);
			}
			this.state = 3348;
			this.selectElements();
			this.state = 3350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FROM) {
				{
				this.state = 3349;
				this.fromClause();
				}
			}

			this.state = 3353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				{
				this.state = 3352;
				this.orderByClause();
				}
				break;
			}
			this.state = 3356;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
			case 1:
				{
				this.state = 3355;
				this.limitClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionParenthesis(): UnionParenthesisContext {
		let _localctx: UnionParenthesisContext = new UnionParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, MySqlParser.RULE_unionParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3358;
			this.match(MySqlParser.UNION);
			this.state = 3360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
				{
				this.state = 3359;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3362;
			this.queryExpressionNointo();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionStatement(): UnionStatementContext {
		let _localctx: UnionStatementContext = new UnionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, MySqlParser.RULE_unionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3364;
			this.match(MySqlParser.UNION);
			this.state = 3366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
				{
				this.state = 3365;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3370;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
				{
				this.state = 3368;
				this.querySpecificationNointo();
				}
				break;
			case MySqlParser.LR_BRACKET:
				{
				this.state = 3369;
				this.queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectSpec(): SelectSpecContext {
		let _localctx: SelectSpecContext = new SelectSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, MySqlParser.RULE_selectSpec);
		let _la: number;
		try {
			this.state = 3380;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
			case MySqlParser.DISTINCT:
			case MySqlParser.DISTINCTROW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3372;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT || _la === MySqlParser.DISTINCTROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.HIGH_PRIORITY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3373;
				this.match(MySqlParser.HIGH_PRIORITY);
				}
				break;
			case MySqlParser.STRAIGHT_JOIN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3374;
				this.match(MySqlParser.STRAIGHT_JOIN);
				}
				break;
			case MySqlParser.SQL_SMALL_RESULT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3375;
				this.match(MySqlParser.SQL_SMALL_RESULT);
				}
				break;
			case MySqlParser.SQL_BIG_RESULT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3376;
				this.match(MySqlParser.SQL_BIG_RESULT);
				}
				break;
			case MySqlParser.SQL_BUFFER_RESULT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3377;
				this.match(MySqlParser.SQL_BUFFER_RESULT);
				}
				break;
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3378;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SQL_CACHE || _la === MySqlParser.SQL_NO_CACHE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SQL_CALC_FOUND_ROWS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3379;
				this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElements(): SelectElementsContext {
		let _localctx: SelectElementsContext = new SelectElementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, MySqlParser.RULE_selectElements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3384;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STAR:
				{
				this.state = 3382;
				_localctx._star = this.match(MySqlParser.STAR);
				}
				break;
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				{
				this.state = 3383;
				this.selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3390;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3386;
				this.match(MySqlParser.COMMA);
				this.state = 3387;
				this.selectElement();
				}
				}
				this.state = 3392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElement(): SelectElementContext {
		let _localctx: SelectElementContext = new SelectElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, MySqlParser.RULE_selectElement);
		let _la: number;
		try {
			this.state = 3422;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 486, this._ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3393;
				this.fullId();
				this.state = 3394;
				this.match(MySqlParser.DOT);
				this.state = 3395;
				this.match(MySqlParser.STAR);
				}
				break;

			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3397;
				this.fullColumnName();
				this.state = 3402;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 480, this._ctx) ) {
				case 1:
					{
					this.state = 3399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3398;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3401;
					this.uid();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3404;
				this.functionCall();
				this.state = 3409;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 482, this._ctx) ) {
				case 1:
					{
					this.state = 3406;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3405;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3408;
					this.uid();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3413;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
				case 1:
					{
					this.state = 3411;
					this.match(MySqlParser.LOCAL_ID);
					this.state = 3412;
					this.match(MySqlParser.VAR_ASSIGN);
					}
					break;
				}
				this.state = 3415;
				this.expression(0);
				this.state = 3420;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 485, this._ctx) ) {
				case 1:
					{
					this.state = 3417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3416;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3419;
					this.uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectIntoExpression(): SelectIntoExpressionContext {
		let _localctx: SelectIntoExpressionContext = new SelectIntoExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, MySqlParser.RULE_selectIntoExpression);
		let _la: number;
		try {
			this.state = 3460;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3424;
				this.match(MySqlParser.INTO);
				this.state = 3425;
				this.assignmentField();
				this.state = 3430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3426;
					this.match(MySqlParser.COMMA);
					this.state = 3427;
					this.assignmentField();
					}
					}
					this.state = 3432;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3433;
				this.match(MySqlParser.INTO);
				this.state = 3434;
				this.match(MySqlParser.DUMPFILE);
				this.state = 3435;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 3436;
				this.match(MySqlParser.INTO);
				this.state = 3437;
				this.match(MySqlParser.OUTFILE);
				this.state = 3438;
				(_localctx as SelectIntoTextFileContext)._filename = this.match(MySqlParser.STRING_LITERAL);
				this.state = 3442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER) {
					{
					this.state = 3439;
					this.match(MySqlParser.CHARACTER);
					this.state = 3440;
					this.match(MySqlParser.SET);
					this.state = 3441;
					(_localctx as SelectIntoTextFileContext)._charset = this.charsetName();
					}
				}

				this.state = 3450;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
				case 1:
					{
					this.state = 3444;
					(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
						(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3445;
						this.selectFieldsInto();
						}
						}
						this.state = 3448;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MySqlParser.ENCLOSED || _la === MySqlParser.ESCAPED || _la === MySqlParser.OPTIONALLY || _la === MySqlParser.TERMINATED);
					}
					break;
				}
				this.state = 3458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINES) {
					{
					this.state = 3452;
					this.match(MySqlParser.LINES);
					this.state = 3454;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3453;
						this.selectLinesInto();
						}
						}
						this.state = 3456;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MySqlParser.STARTING || _la === MySqlParser.TERMINATED);
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectFieldsInto(): SelectFieldsIntoContext {
		let _localctx: SelectFieldsIntoContext = new SelectFieldsIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, MySqlParser.RULE_selectFieldsInto);
		let _la: number;
		try {
			this.state = 3474;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.TERMINATED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3462;
				this.match(MySqlParser.TERMINATED);
				this.state = 3463;
				this.match(MySqlParser.BY);
				this.state = 3464;
				_localctx._terminationField = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ENCLOSED:
			case MySqlParser.OPTIONALLY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.OPTIONALLY) {
					{
					this.state = 3465;
					this.match(MySqlParser.OPTIONALLY);
					}
				}

				this.state = 3468;
				this.match(MySqlParser.ENCLOSED);
				this.state = 3469;
				this.match(MySqlParser.BY);
				this.state = 3470;
				_localctx._enclosion = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ESCAPED:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3471;
				this.match(MySqlParser.ESCAPED);
				this.state = 3472;
				this.match(MySqlParser.BY);
				this.state = 3473;
				_localctx._escaping = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectLinesInto(): SelectLinesIntoContext {
		let _localctx: SelectLinesIntoContext = new SelectLinesIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, MySqlParser.RULE_selectLinesInto);
		try {
			this.state = 3482;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STARTING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3476;
				this.match(MySqlParser.STARTING);
				this.state = 3477;
				this.match(MySqlParser.BY);
				this.state = 3478;
				_localctx._starting = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.TERMINATED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3479;
				this.match(MySqlParser.TERMINATED);
				this.state = 3480;
				this.match(MySqlParser.BY);
				this.state = 3481;
				_localctx._terminationLine = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, MySqlParser.RULE_fromClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3484;
			this.match(MySqlParser.FROM);
			this.state = 3485;
			this.tableSources();
			this.state = 3488;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3486;
				this.match(MySqlParser.WHERE);
				this.state = 3487;
				_localctx._whereExpr = this.expression(0);
				}
			}

			this.state = 3504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.GROUP) {
				{
				this.state = 3490;
				this.match(MySqlParser.GROUP);
				this.state = 3491;
				this.match(MySqlParser.BY);
				this.state = 3492;
				this.groupByItem();
				this.state = 3497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3493;
					this.match(MySqlParser.COMMA);
					this.state = 3494;
					this.groupByItem();
					}
					}
					this.state = 3499;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3502;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
				case 1:
					{
					this.state = 3500;
					this.match(MySqlParser.WITH);
					this.state = 3501;
					this.match(MySqlParser.ROLLUP);
					}
					break;
				}
				}
			}

			this.state = 3508;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.HAVING) {
				{
				this.state = 3506;
				this.match(MySqlParser.HAVING);
				this.state = 3507;
				_localctx._havingExpr = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByItem(): GroupByItemContext {
		let _localctx: GroupByItemContext = new GroupByItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, MySqlParser.RULE_groupByItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3510;
			this.expression(0);
			this.state = 3512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 502, this._ctx) ) {
			case 1:
				{
				this.state = 3511;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let _localctx: LimitClauseContext = new LimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, MySqlParser.RULE_limitClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3514;
			this.match(MySqlParser.LIMIT);
			this.state = 3525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 504, this._ctx) ) {
			case 1:
				{
				this.state = 3518;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 503, this._ctx) ) {
				case 1:
					{
					this.state = 3515;
					_localctx._offset = this.decimalLiteral();
					this.state = 3516;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 3520;
				_localctx._limit = this.decimalLiteral();
				}
				break;

			case 2:
				{
				this.state = 3521;
				_localctx._limit = this.decimalLiteral();
				this.state = 3522;
				this.match(MySqlParser.OFFSET);
				this.state = 3523;
				_localctx._offset = this.decimalLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startTransaction(): StartTransactionContext {
		let _localctx: StartTransactionContext = new StartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, MySqlParser.RULE_startTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3527;
			this.match(MySqlParser.START);
			this.state = 3528;
			this.match(MySqlParser.TRANSACTION);
			this.state = 3537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.READ || _la === MySqlParser.WITH) {
				{
				this.state = 3529;
				this.transactionMode();
				this.state = 3534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3530;
					this.match(MySqlParser.COMMA);
					this.state = 3531;
					this.transactionMode();
					}
					}
					this.state = 3536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let _localctx: BeginWorkContext = new BeginWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, MySqlParser.RULE_beginWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3539;
			this.match(MySqlParser.BEGIN);
			this.state = 3541;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 507, this._ctx) ) {
			case 1:
				{
				this.state = 3540;
				this.match(MySqlParser.WORK);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commitWork(): CommitWorkContext {
		let _localctx: CommitWorkContext = new CommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, MySqlParser.RULE_commitWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3543;
			this.match(MySqlParser.COMMIT);
			this.state = 3545;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 508, this._ctx) ) {
			case 1:
				{
				this.state = 3544;
				this.match(MySqlParser.WORK);
				}
				break;
			}
			this.state = 3552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AND) {
				{
				this.state = 3547;
				this.match(MySqlParser.AND);
				this.state = 3549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3548;
					_localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 3551;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 3558;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 512, this._ctx) ) {
			case 1:
				{
				this.state = 3555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3554;
					_localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 3557;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackWork(): RollbackWorkContext {
		let _localctx: RollbackWorkContext = new RollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, MySqlParser.RULE_rollbackWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3560;
			this.match(MySqlParser.ROLLBACK);
			this.state = 3562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 513, this._ctx) ) {
			case 1:
				{
				this.state = 3561;
				this.match(MySqlParser.WORK);
				}
				break;
			}
			this.state = 3569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AND) {
				{
				this.state = 3564;
				this.match(MySqlParser.AND);
				this.state = 3566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3565;
					_localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 3568;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 3575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
			case 1:
				{
				this.state = 3572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3571;
					_localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 3574;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let _localctx: SavepointStatementContext = new SavepointStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, MySqlParser.RULE_savepointStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3577;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 3578;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let _localctx: RollbackStatementContext = new RollbackStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, MySqlParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3580;
			this.match(MySqlParser.ROLLBACK);
			this.state = 3582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WORK) {
				{
				this.state = 3581;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 3584;
			this.match(MySqlParser.TO);
			this.state = 3586;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
			case 1:
				{
				this.state = 3585;
				this.match(MySqlParser.SAVEPOINT);
				}
				break;
			}
			this.state = 3588;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public releaseStatement(): ReleaseStatementContext {
		let _localctx: ReleaseStatementContext = new ReleaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, MySqlParser.RULE_releaseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3590;
			this.match(MySqlParser.RELEASE);
			this.state = 3591;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 3592;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTables(): LockTablesContext {
		let _localctx: LockTablesContext = new LockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, MySqlParser.RULE_lockTables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3594;
			this.match(MySqlParser.LOCK);
			this.state = 3595;
			this.match(MySqlParser.TABLES);
			this.state = 3596;
			this.lockTableElement();
			this.state = 3601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3597;
				this.match(MySqlParser.COMMA);
				this.state = 3598;
				this.lockTableElement();
				}
				}
				this.state = 3603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlockTables(): UnlockTablesContext {
		let _localctx: UnlockTablesContext = new UnlockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, MySqlParser.RULE_unlockTables);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3604;
			this.match(MySqlParser.UNLOCK);
			this.state = 3605;
			this.match(MySqlParser.TABLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setAutocommitStatement(): SetAutocommitStatementContext {
		let _localctx: SetAutocommitStatementContext = new SetAutocommitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, MySqlParser.RULE_setAutocommitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3607;
			this.match(MySqlParser.SET);
			this.state = 3608;
			this.match(MySqlParser.AUTOCOMMIT);
			this.state = 3609;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 3610;
			_localctx._autocommitValue = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
				_localctx._autocommitValue = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setTransactionStatement(): SetTransactionStatementContext {
		let _localctx: SetTransactionStatementContext = new SetTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, MySqlParser.RULE_setTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3612;
			this.match(MySqlParser.SET);
			this.state = 3614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION) {
				{
				this.state = 3613;
				_localctx._transactionContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION)) {
					_localctx._transactionContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3616;
			this.match(MySqlParser.TRANSACTION);
			this.state = 3617;
			this.transactionOption();
			this.state = 3622;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3618;
				this.match(MySqlParser.COMMA);
				this.state = 3619;
				this.transactionOption();
				}
				}
				this.state = 3624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let _localctx: TransactionModeContext = new TransactionModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, MySqlParser.RULE_transactionMode);
		try {
			this.state = 3632;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 523, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3625;
				this.match(MySqlParser.WITH);
				this.state = 3626;
				this.match(MySqlParser.CONSISTENT);
				this.state = 3627;
				this.match(MySqlParser.SNAPSHOT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3628;
				this.match(MySqlParser.READ);
				this.state = 3629;
				this.match(MySqlParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3630;
				this.match(MySqlParser.READ);
				this.state = 3631;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTableElement(): LockTableElementContext {
		let _localctx: LockTableElementContext = new LockTableElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, MySqlParser.RULE_lockTableElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3634;
			this.tableName();
			this.state = 3639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AS || _la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 3636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3635;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3638;
				this.uid();
				}
			}

			this.state = 3641;
			this.lockAction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockAction(): LockActionContext {
		let _localctx: LockActionContext = new LockActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, MySqlParser.RULE_lockAction);
		let _la: number;
		try {
			this.state = 3651;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.READ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3643;
				this.match(MySqlParser.READ);
				this.state = 3645;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
				case 1:
					{
					this.state = 3644;
					this.match(MySqlParser.LOCAL);
					}
					break;
				}
				}
				break;
			case MySqlParser.LOW_PRIORITY:
			case MySqlParser.WRITE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LOW_PRIORITY) {
					{
					this.state = 3647;
					this.match(MySqlParser.LOW_PRIORITY);
					}
				}

				this.state = 3650;
				this.match(MySqlParser.WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionOption(): TransactionOptionContext {
		let _localctx: TransactionOptionContext = new TransactionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, MySqlParser.RULE_transactionOption);
		try {
			this.state = 3660;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3653;
				this.match(MySqlParser.ISOLATION);
				this.state = 3654;
				this.match(MySqlParser.LEVEL);
				this.state = 3655;
				this.transactionLevel();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3656;
				this.match(MySqlParser.READ);
				this.state = 3657;
				this.match(MySqlParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3658;
				this.match(MySqlParser.READ);
				this.state = 3659;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevel(): TransactionLevelContext {
		let _localctx: TransactionLevelContext = new TransactionLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, MySqlParser.RULE_transactionLevel);
		try {
			this.state = 3669;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 530, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3662;
				this.match(MySqlParser.REPEATABLE);
				this.state = 3663;
				this.match(MySqlParser.READ);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3664;
				this.match(MySqlParser.READ);
				this.state = 3665;
				this.match(MySqlParser.COMMITTED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3666;
				this.match(MySqlParser.READ);
				this.state = 3667;
				this.match(MySqlParser.UNCOMMITTED);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3668;
				this.match(MySqlParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let _localctx: ChangeMasterContext = new ChangeMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, MySqlParser.RULE_changeMaster);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3671;
			this.match(MySqlParser.CHANGE);
			this.state = 3672;
			this.match(MySqlParser.MASTER);
			this.state = 3673;
			this.match(MySqlParser.TO);
			this.state = 3674;
			this.masterOption();
			this.state = 3679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3675;
				this.match(MySqlParser.COMMA);
				this.state = 3676;
				this.masterOption();
				}
				}
				this.state = 3681;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3682;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeReplicationFilter(): ChangeReplicationFilterContext {
		let _localctx: ChangeReplicationFilterContext = new ChangeReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, MySqlParser.RULE_changeReplicationFilter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3685;
			this.match(MySqlParser.CHANGE);
			this.state = 3686;
			this.match(MySqlParser.REPLICATION);
			this.state = 3687;
			this.match(MySqlParser.FILTER);
			this.state = 3688;
			this.replicationFilter();
			this.state = 3693;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3689;
				this.match(MySqlParser.COMMA);
				this.state = 3690;
				this.replicationFilter();
				}
				}
				this.state = 3695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public purgeBinaryLogs(): PurgeBinaryLogsContext {
		let _localctx: PurgeBinaryLogsContext = new PurgeBinaryLogsContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, MySqlParser.RULE_purgeBinaryLogs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3696;
			this.match(MySqlParser.PURGE);
			this.state = 3697;
			_localctx._purgeFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BINARY || _la === MySqlParser.MASTER)) {
				_localctx._purgeFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3698;
			this.match(MySqlParser.LOGS);
			this.state = 3703;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.TO:
				{
				this.state = 3699;
				this.match(MySqlParser.TO);
				this.state = 3700;
				_localctx._fileName = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.BEFORE:
				{
				this.state = 3701;
				this.match(MySqlParser.BEFORE);
				this.state = 3702;
				_localctx._timeValue = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetMaster(): ResetMasterContext {
		let _localctx: ResetMasterContext = new ResetMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, MySqlParser.RULE_resetMaster);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3705;
			this.match(MySqlParser.RESET);
			this.state = 3706;
			this.match(MySqlParser.MASTER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetSlave(): ResetSlaveContext {
		let _localctx: ResetSlaveContext = new ResetSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, MySqlParser.RULE_resetSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3708;
			this.match(MySqlParser.RESET);
			this.state = 3709;
			this.match(MySqlParser.SLAVE);
			this.state = 3711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL) {
				{
				this.state = 3710;
				this.match(MySqlParser.ALL);
				}
			}

			this.state = 3714;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3713;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startSlave(): StartSlaveContext {
		let _localctx: StartSlaveContext = new StartSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, MySqlParser.RULE_startSlave);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3716;
			this.match(MySqlParser.START);
			this.state = 3717;
			this.match(MySqlParser.SLAVE);
			this.state = 3726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				{
				this.state = 3718;
				this.threadType();
				this.state = 3723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3719;
					this.match(MySqlParser.COMMA);
					this.state = 3720;
					this.threadType();
					}
					}
					this.state = 3725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 3730;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 539, this._ctx) ) {
			case 1:
				{
				this.state = 3728;
				this.match(MySqlParser.UNTIL);
				this.state = 3729;
				this.untilOption();
				}
				break;
			}
			this.state = 3735;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3732;
					this.connectionOption();
					}
					}
				}
				this.state = 3737;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			}
			this.state = 3739;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3738;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopSlave(): StopSlaveContext {
		let _localctx: StopSlaveContext = new StopSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, MySqlParser.RULE_stopSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3741;
			this.match(MySqlParser.STOP);
			this.state = 3742;
			this.match(MySqlParser.SLAVE);
			this.state = 3751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
			case 1:
				{
				this.state = 3743;
				this.threadType();
				this.state = 3748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3744;
					this.match(MySqlParser.COMMA);
					this.state = 3745;
					this.threadType();
					}
					}
					this.state = 3750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startGroupReplication(): StartGroupReplicationContext {
		let _localctx: StartGroupReplicationContext = new StartGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, MySqlParser.RULE_startGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3753;
			this.match(MySqlParser.START);
			this.state = 3754;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopGroupReplication(): StopGroupReplicationContext {
		let _localctx: StopGroupReplicationContext = new StopGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, MySqlParser.RULE_stopGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3756;
			this.match(MySqlParser.STOP);
			this.state = 3757;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let _localctx: MasterOptionContext = new MasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, MySqlParser.RULE_masterOption);
		let _la: number;
		try {
			this.state = 3788;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.MASTER_BIND:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3759;
				this.stringMasterOption();
				this.state = 3760;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3761;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3763;
				this.decimalMasterOption();
				this.state = 3764;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3765;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3767;
				this.boolMasterOption();
				this.state = 3768;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3769;
				(_localctx as MasterBoolOptionContext)._boolVal = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as MasterBoolOptionContext)._boolVal = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3771;
				this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
				this.state = 3772;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3773;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;
			case MySqlParser.IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3774;
				this.match(MySqlParser.IGNORE_SERVER_IDS);
				this.state = 3775;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3776;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
					{
					this.state = 3777;
					this.uid();
					this.state = 3782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.COMMA) {
						{
						{
						this.state = 3778;
						this.match(MySqlParser.COMMA);
						this.state = 3779;
						this.uid();
						}
						}
						this.state = 3784;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3787;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringMasterOption(): StringMasterOptionContext {
		let _localctx: StringMasterOptionContext = new StringMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, MySqlParser.RULE_stringMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3790;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MASTER_BIND || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (MySqlParser.MASTER_HOST - 380)) | (1 << (MySqlParser.MASTER_LOG_FILE - 380)) | (1 << (MySqlParser.MASTER_PASSWORD - 380)) | (1 << (MySqlParser.MASTER_SSL_CA - 380)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 380)) | (1 << (MySqlParser.MASTER_SSL_CERT - 380)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 380)) | (1 << (MySqlParser.MASTER_SSL_CRL - 380)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 380)) | (1 << (MySqlParser.MASTER_SSL_KEY - 380)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 380)) | (1 << (MySqlParser.MASTER_USER - 380)))) !== 0) || _la === MySqlParser.RELAY_LOG_FILE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalMasterOption(): DecimalMasterOptionContext {
		let _localctx: DecimalMasterOptionContext = new DecimalMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, MySqlParser.RULE_decimalMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3792;
			_la = this._input.LA(1);
			if (!(((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)))) !== 0) || _la === MySqlParser.RELAY_LOG_POS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolMasterOption(): BoolMasterOptionContext {
		let _localctx: BoolMasterOptionContext = new BoolMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, MySqlParser.RULE_boolMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3794;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT || _la === MySqlParser.MASTER_AUTO_POSITION || _la === MySqlParser.MASTER_SSL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public channelOption(): ChannelOptionContext {
		let _localctx: ChannelOptionContext = new ChannelOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, MySqlParser.RULE_channelOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3796;
			this.match(MySqlParser.FOR);
			this.state = 3797;
			this.match(MySqlParser.CHANNEL);
			this.state = 3798;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationFilter(): ReplicationFilterContext {
		let _localctx: ReplicationFilterContext = new ReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, MySqlParser.RULE_replicationFilter);
		let _la: number;
		try {
			this.state = 3849;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3800;
				this.match(MySqlParser.REPLICATE_DO_DB);
				this.state = 3801;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3802;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3803;
				this.uidList();
				this.state = 3804;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3806;
				this.match(MySqlParser.REPLICATE_IGNORE_DB);
				this.state = 3807;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3808;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3809;
				this.uidList();
				this.state = 3810;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3812;
				this.match(MySqlParser.REPLICATE_DO_TABLE);
				this.state = 3813;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3814;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3815;
				this.tables();
				this.state = 3816;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3818;
				this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
				this.state = 3819;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3820;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3821;
				this.tables();
				this.state = 3822;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3824;
				this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
				this.state = 3825;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3826;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3827;
				this.simpleStrings();
				this.state = 3828;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3830;
				this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
				this.state = 3831;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3832;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3833;
				this.simpleStrings();
				this.state = 3834;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3836;
				this.match(MySqlParser.REPLICATE_REWRITE_DB);
				this.state = 3837;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3838;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3839;
				this.tablePair();
				this.state = 3844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3840;
					this.match(MySqlParser.COMMA);
					this.state = 3841;
					this.tablePair();
					}
					}
					this.state = 3846;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3847;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePair(): TablePairContext {
		let _localctx: TablePairContext = new TablePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, MySqlParser.RULE_tablePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3851;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3852;
			_localctx._firstTable = this.tableName();
			this.state = 3853;
			this.match(MySqlParser.COMMA);
			this.state = 3854;
			_localctx._secondTable = this.tableName();
			this.state = 3855;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public threadType(): ThreadTypeContext {
		let _localctx: ThreadTypeContext = new ThreadTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, MySqlParser.RULE_threadType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3857;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.IO_THREAD || _la === MySqlParser.SQL_THREAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public untilOption(): UntilOptionContext {
		let _localctx: UntilOptionContext = new UntilOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, MySqlParser.RULE_untilOption);
		let _la: number;
		try {
			this.state = 3877;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3859;
				(_localctx as GtidsUntilOptionContext)._gtids = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SQL_AFTER_GTIDS || _la === MySqlParser.SQL_BEFORE_GTIDS)) {
					(_localctx as GtidsUntilOptionContext)._gtids = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3860;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3861;
				this.gtuidSet();
				}
				break;
			case MySqlParser.MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3862;
				this.match(MySqlParser.MASTER_LOG_FILE);
				this.state = 3863;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3864;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 3865;
				this.match(MySqlParser.COMMA);
				this.state = 3866;
				this.match(MySqlParser.MASTER_LOG_POS);
				this.state = 3867;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3868;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3869;
				this.match(MySqlParser.RELAY_LOG_FILE);
				this.state = 3870;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3871;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 3872;
				this.match(MySqlParser.COMMA);
				this.state = 3873;
				this.match(MySqlParser.RELAY_LOG_POS);
				this.state = 3874;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3875;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3876;
				this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public connectionOption(): ConnectionOptionContext {
		let _localctx: ConnectionOptionContext = new ConnectionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, MySqlParser.RULE_connectionOption);
		try {
			this.state = 3891;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3879;
				this.match(MySqlParser.USER);
				this.state = 3880;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3881;
				(_localctx as UserConnectionOptionContext)._conOptUser = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3882;
				this.match(MySqlParser.PASSWORD);
				this.state = 3883;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3884;
				(_localctx as PasswordConnectionOptionContext)._conOptPassword = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3885;
				this.match(MySqlParser.DEFAULT_AUTH);
				this.state = 3886;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3887;
				(_localctx as DefaultAuthConnectionOptionContext)._conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3888;
				this.match(MySqlParser.PLUGIN_DIR);
				this.state = 3889;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3890;
				(_localctx as PluginDirConnectionOptionContext)._conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gtuidSet(): GtuidSetContext {
		let _localctx: GtuidSetContext = new GtuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, MySqlParser.RULE_gtuidSet);
		let _la: number;
		try {
			this.state = 3902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3893;
				this.uuidSet();
				this.state = 3898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3894;
					this.match(MySqlParser.COMMA);
					this.state = 3895;
					this.uuidSet();
					}
					}
					this.state = 3900;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3901;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaStartTransaction(): XaStartTransactionContext {
		let _localctx: XaStartTransactionContext = new XaStartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, MySqlParser.RULE_xaStartTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3904;
			this.match(MySqlParser.XA);
			this.state = 3905;
			_localctx._xaStart = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BEGIN || _la === MySqlParser.START)) {
				_localctx._xaStart = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3906;
			this.xid();
			this.state = 3908;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				{
				this.state = 3907;
				_localctx._xaAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.JOIN || _la === MySqlParser.RESUME)) {
					_localctx._xaAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaEndTransaction(): XaEndTransactionContext {
		let _localctx: XaEndTransactionContext = new XaEndTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, MySqlParser.RULE_xaEndTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3910;
			this.match(MySqlParser.XA);
			this.state = 3911;
			this.match(MySqlParser.END);
			this.state = 3912;
			this.xid();
			this.state = 3918;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 555, this._ctx) ) {
			case 1:
				{
				this.state = 3913;
				this.match(MySqlParser.SUSPEND);
				this.state = 3916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 3914;
					this.match(MySqlParser.FOR);
					this.state = 3915;
					this.match(MySqlParser.MIGRATE);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaPrepareStatement(): XaPrepareStatementContext {
		let _localctx: XaPrepareStatementContext = new XaPrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, MySqlParser.RULE_xaPrepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3920;
			this.match(MySqlParser.XA);
			this.state = 3921;
			this.match(MySqlParser.PREPARE);
			this.state = 3922;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaCommitWork(): XaCommitWorkContext {
		let _localctx: XaCommitWorkContext = new XaCommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, MySqlParser.RULE_xaCommitWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3924;
			this.match(MySqlParser.XA);
			this.state = 3925;
			this.match(MySqlParser.COMMIT);
			this.state = 3926;
			this.xid();
			this.state = 3929;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 556, this._ctx) ) {
			case 1:
				{
				this.state = 3927;
				this.match(MySqlParser.ONE);
				this.state = 3928;
				this.match(MySqlParser.PHASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRollbackWork(): XaRollbackWorkContext {
		let _localctx: XaRollbackWorkContext = new XaRollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, MySqlParser.RULE_xaRollbackWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3931;
			this.match(MySqlParser.XA);
			this.state = 3932;
			this.match(MySqlParser.ROLLBACK);
			this.state = 3933;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRecoverWork(): XaRecoverWorkContext {
		let _localctx: XaRecoverWorkContext = new XaRecoverWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, MySqlParser.RULE_xaRecoverWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3935;
			this.match(MySqlParser.XA);
			this.state = 3936;
			this.match(MySqlParser.RECOVER);
			this.state = 3939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CONVERT) {
				{
				this.state = 3937;
				this.match(MySqlParser.CONVERT);
				this.state = 3938;
				this.xid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prepareStatement(): PrepareStatementContext {
		let _localctx: PrepareStatementContext = new PrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, MySqlParser.RULE_prepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3941;
			this.match(MySqlParser.PREPARE);
			this.state = 3942;
			this.uid();
			this.state = 3943;
			this.match(MySqlParser.FROM);
			this.state = 3946;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STRING_LITERAL:
				{
				this.state = 3944;
				_localctx._query = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.LOCAL_ID:
				{
				this.state = 3945;
				_localctx._variable = this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let _localctx: ExecuteStatementContext = new ExecuteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, MySqlParser.RULE_executeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3948;
			this.match(MySqlParser.EXECUTE);
			this.state = 3949;
			this.uid();
			this.state = 3952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USING) {
				{
				this.state = 3950;
				this.match(MySqlParser.USING);
				this.state = 3951;
				this.userVariables();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocatePrepare(): DeallocatePrepareContext {
		let _localctx: DeallocatePrepareContext = new DeallocatePrepareContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, MySqlParser.RULE_deallocatePrepare);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3954;
			_localctx._dropFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DROP || _la === MySqlParser.DEALLOCATE)) {
				_localctx._dropFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3955;
			this.match(MySqlParser.PREPARE);
			this.state = 3956;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineBody(): RoutineBodyContext {
		let _localctx: RoutineBodyContext = new RoutineBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, MySqlParser.RULE_routineBody);
		try {
			this.state = 3960;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 560, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3958;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3959;
				this.sqlStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let _localctx: BlockStatementContext = new BlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, MySqlParser.RULE_blockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3965;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
			case 1:
				{
				this.state = 3962;
				this.uid();
				this.state = 3963;
				this.match(MySqlParser.COLON_SYMB);
				}
				break;
			}
			this.state = 3967;
			this.match(MySqlParser.BEGIN);
			this.state = 3997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)) | (1 << (MySqlParser.DECLARE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0)) {
				{
				this.state = 3971;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3968;
						this.declareVariable();
						}
						}
					}
					this.state = 3973;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
				}
				this.state = 3977;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3974;
						this.declareCondition();
						}
						}
					}
					this.state = 3979;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
				}
				this.state = 3983;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3980;
						this.declareCursor();
						}
						}
					}
					this.state = 3985;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
				}
				this.state = 3989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.DECLARE) {
					{
					{
					this.state = 3986;
					this.declareHandler();
					}
					}
					this.state = 3991;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3992;
					this.procedureSqlStatement();
					}
					}
					this.state = 3995;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
				}
			}

			this.state = 3999;
			this.match(MySqlParser.END);
			this.state = 4001;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 568, this._ctx) ) {
			case 1:
				{
				this.state = 4000;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let _localctx: CaseStatementContext = new CaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, MySqlParser.RULE_caseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4003;
			this.match(MySqlParser.CASE);
			this.state = 4006;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 569, this._ctx) ) {
			case 1:
				{
				this.state = 4004;
				this.uid();
				}
				break;

			case 2:
				{
				this.state = 4005;
				this.expression(0);
				}
				break;
			}
			this.state = 4009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4008;
				this.caseAlternative();
				}
				}
				this.state = 4011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.WHEN);
			this.state = 4019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ELSE) {
				{
				this.state = 4013;
				this.match(MySqlParser.ELSE);
				this.state = 4015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4014;
					this.procedureSqlStatement();
					}
					}
					this.state = 4017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
				}
			}

			this.state = 4021;
			this.match(MySqlParser.END);
			this.state = 4022;
			this.match(MySqlParser.CASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, MySqlParser.RULE_ifStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4024;
			this.match(MySqlParser.IF);
			this.state = 4025;
			this.expression(0);
			this.state = 4026;
			this.match(MySqlParser.THEN);
			this.state = 4028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4027;
				_localctx._procedureSqlStatement = this.procedureSqlStatement();
				_localctx._thenStatements.push(_localctx._procedureSqlStatement);
				}
				}
				this.state = 4030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			this.state = 4035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.ELSEIF) {
				{
				{
				this.state = 4032;
				this.elifAlternative();
				}
				}
				this.state = 4037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4044;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ELSE) {
				{
				this.state = 4038;
				this.match(MySqlParser.ELSE);
				this.state = 4040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4039;
					_localctx._procedureSqlStatement = this.procedureSqlStatement();
					_localctx._elseStatements.push(_localctx._procedureSqlStatement);
					}
					}
					this.state = 4042;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
				}
			}

			this.state = 4046;
			this.match(MySqlParser.END);
			this.state = 4047;
			this.match(MySqlParser.IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let _localctx: IterateStatementContext = new IterateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, MySqlParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4049;
			this.match(MySqlParser.ITERATE);
			this.state = 4050;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let _localctx: LeaveStatementContext = new LeaveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, MySqlParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4052;
			this.match(MySqlParser.LEAVE);
			this.state = 4053;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loopStatement(): LoopStatementContext {
		let _localctx: LoopStatementContext = new LoopStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, MySqlParser.RULE_loopStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 4055;
				this.uid();
				this.state = 4056;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4060;
			this.match(MySqlParser.LOOP);
			this.state = 4062;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4061;
				this.procedureSqlStatement();
				}
				}
				this.state = 4064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			this.state = 4066;
			this.match(MySqlParser.END);
			this.state = 4067;
			this.match(MySqlParser.LOOP);
			this.state = 4069;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 579, this._ctx) ) {
			case 1:
				{
				this.state = 4068;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repeatStatement(): RepeatStatementContext {
		let _localctx: RepeatStatementContext = new RepeatStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, MySqlParser.RULE_repeatStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 4071;
				this.uid();
				this.state = 4072;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4076;
			this.match(MySqlParser.REPEAT);
			this.state = 4078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4077;
				this.procedureSqlStatement();
				}
				}
				this.state = 4080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			this.state = 4082;
			this.match(MySqlParser.UNTIL);
			this.state = 4083;
			this.expression(0);
			this.state = 4084;
			this.match(MySqlParser.END);
			this.state = 4085;
			this.match(MySqlParser.REPEAT);
			this.state = 4087;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
			case 1:
				{
				this.state = 4086;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, MySqlParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4089;
			this.match(MySqlParser.RETURN);
			this.state = 4090;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whileStatement(): WhileStatementContext {
		let _localctx: WhileStatementContext = new WhileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, MySqlParser.RULE_whileStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MySqlParser.COUNT - 217)) | (1 << (MySqlParser.POSITION - 217)) | (1 << (MySqlParser.ACCOUNT - 217)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (MySqlParser.ACTION - 249)) | (1 << (MySqlParser.AFTER - 249)) | (1 << (MySqlParser.AGGREGATE - 249)) | (1 << (MySqlParser.ALGORITHM - 249)) | (1 << (MySqlParser.ANY - 249)) | (1 << (MySqlParser.AT - 249)) | (1 << (MySqlParser.AUTHORS - 249)) | (1 << (MySqlParser.AUTOCOMMIT - 249)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 249)) | (1 << (MySqlParser.AUTO_INCREMENT - 249)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 249)) | (1 << (MySqlParser.BEGIN - 249)) | (1 << (MySqlParser.BINLOG - 249)) | (1 << (MySqlParser.BIT - 249)) | (1 << (MySqlParser.BLOCK - 249)) | (1 << (MySqlParser.BOOL - 249)) | (1 << (MySqlParser.BOOLEAN - 249)) | (1 << (MySqlParser.BTREE - 249)) | (1 << (MySqlParser.CASCADED - 249)) | (1 << (MySqlParser.CHAIN - 249)) | (1 << (MySqlParser.CHANGED - 249)) | (1 << (MySqlParser.CHANNEL - 249)) | (1 << (MySqlParser.CHECKSUM - 249)) | (1 << (MySqlParser.CIPHER - 249)) | (1 << (MySqlParser.CLIENT - 249)) | (1 << (MySqlParser.COALESCE - 249)) | (1 << (MySqlParser.CODE - 249)) | (1 << (MySqlParser.COLUMNS - 249)) | (1 << (MySqlParser.COLUMN_FORMAT - 249)) | (1 << (MySqlParser.COMMENT - 249)))) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & ((1 << (MySqlParser.COMMIT - 281)) | (1 << (MySqlParser.COMPACT - 281)) | (1 << (MySqlParser.COMPLETION - 281)) | (1 << (MySqlParser.COMPRESSED - 281)) | (1 << (MySqlParser.COMPRESSION - 281)) | (1 << (MySqlParser.CONCURRENT - 281)) | (1 << (MySqlParser.CONNECTION - 281)) | (1 << (MySqlParser.CONSISTENT - 281)) | (1 << (MySqlParser.CONTAINS - 281)) | (1 << (MySqlParser.CONTEXT - 281)) | (1 << (MySqlParser.CONTRIBUTORS - 281)) | (1 << (MySqlParser.COPY - 281)) | (1 << (MySqlParser.CPU - 281)) | (1 << (MySqlParser.DATA - 281)) | (1 << (MySqlParser.DATAFILE - 281)) | (1 << (MySqlParser.DEALLOCATE - 281)) | (1 << (MySqlParser.DEFAULT_AUTH - 281)) | (1 << (MySqlParser.DEFINER - 281)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 281)) | (1 << (MySqlParser.DIRECTORY - 281)) | (1 << (MySqlParser.DISABLE - 281)) | (1 << (MySqlParser.DISCARD - 281)) | (1 << (MySqlParser.DISK - 281)) | (1 << (MySqlParser.DO - 281)) | (1 << (MySqlParser.DUMPFILE - 281)) | (1 << (MySqlParser.DUPLICATE - 281)) | (1 << (MySqlParser.DYNAMIC - 281)) | (1 << (MySqlParser.ENABLE - 281)) | (1 << (MySqlParser.ENCRYPTION - 281)) | (1 << (MySqlParser.ENDS - 281)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ENGINES - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.ERRORS - 313)) | (1 << (MySqlParser.ESCAPE - 313)) | (1 << (MySqlParser.EVEN - 313)) | (1 << (MySqlParser.EVENT - 313)) | (1 << (MySqlParser.EVENTS - 313)) | (1 << (MySqlParser.EVERY - 313)) | (1 << (MySqlParser.EXCHANGE - 313)) | (1 << (MySqlParser.EXCLUSIVE - 313)) | (1 << (MySqlParser.EXPIRE - 313)) | (1 << (MySqlParser.EXTENDED - 313)) | (1 << (MySqlParser.EXTENT_SIZE - 313)) | (1 << (MySqlParser.FAST - 313)) | (1 << (MySqlParser.FAULTS - 313)) | (1 << (MySqlParser.FIELDS - 313)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 313)) | (1 << (MySqlParser.FILTER - 313)) | (1 << (MySqlParser.FIRST - 313)) | (1 << (MySqlParser.FIXED - 313)) | (1 << (MySqlParser.FOLLOWS - 313)) | (1 << (MySqlParser.FULL - 313)) | (1 << (MySqlParser.FUNCTION - 313)) | (1 << (MySqlParser.GLOBAL - 313)) | (1 << (MySqlParser.GRANTS - 313)) | (1 << (MySqlParser.GROUP_REPLICATION - 313)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)) | (1 << (MySqlParser.QUARTER - 538)) | (1 << (MySqlParser.MONTH - 538)) | (1 << (MySqlParser.DAY - 538)) | (1 << (MySqlParser.HOUR - 538)) | (1 << (MySqlParser.MINUTE - 538)) | (1 << (MySqlParser.WEEK - 538)) | (1 << (MySqlParser.SECOND - 538)) | (1 << (MySqlParser.MICROSECOND - 538)) | (1 << (MySqlParser.TABLES - 538)) | (1 << (MySqlParser.ROUTINE - 538)) | (1 << (MySqlParser.EXECUTE - 538)) | (1 << (MySqlParser.FILE - 538)) | (1 << (MySqlParser.PROCESS - 538)) | (1 << (MySqlParser.RELOAD - 538)))) !== 0) || ((((_la - 570)) & ~0x1F) === 0 && ((1 << (_la - 570)) & ((1 << (MySqlParser.SHUTDOWN - 570)) | (1 << (MySqlParser.SUPER - 570)) | (1 << (MySqlParser.PRIVILEGES - 570)) | (1 << (MySqlParser.ARMSCII8 - 570)) | (1 << (MySqlParser.ASCII - 570)) | (1 << (MySqlParser.BIG5 - 570)) | (1 << (MySqlParser.CP1250 - 570)) | (1 << (MySqlParser.CP1251 - 570)) | (1 << (MySqlParser.CP1256 - 570)) | (1 << (MySqlParser.CP1257 - 570)) | (1 << (MySqlParser.CP850 - 570)) | (1 << (MySqlParser.CP852 - 570)) | (1 << (MySqlParser.CP866 - 570)) | (1 << (MySqlParser.CP932 - 570)) | (1 << (MySqlParser.DEC8 - 570)) | (1 << (MySqlParser.EUCJPMS - 570)) | (1 << (MySqlParser.EUCKR - 570)) | (1 << (MySqlParser.GB2312 - 570)) | (1 << (MySqlParser.GBK - 570)) | (1 << (MySqlParser.GEOSTD8 - 570)) | (1 << (MySqlParser.GREEK - 570)) | (1 << (MySqlParser.HEBREW - 570)) | (1 << (MySqlParser.HP8 - 570)) | (1 << (MySqlParser.KEYBCS2 - 570)) | (1 << (MySqlParser.KOI8R - 570)) | (1 << (MySqlParser.KOI8U - 570)) | (1 << (MySqlParser.LATIN1 - 570)) | (1 << (MySqlParser.LATIN2 - 570)) | (1 << (MySqlParser.LATIN5 - 570)) | (1 << (MySqlParser.LATIN7 - 570)) | (1 << (MySqlParser.MACCE - 570)) | (1 << (MySqlParser.MACROMAN - 570)))) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & ((1 << (MySqlParser.SJIS - 602)) | (1 << (MySqlParser.SWE7 - 602)) | (1 << (MySqlParser.TIS620 - 602)) | (1 << (MySqlParser.UCS2 - 602)) | (1 << (MySqlParser.UJIS - 602)) | (1 << (MySqlParser.UTF16 - 602)) | (1 << (MySqlParser.UTF16LE - 602)) | (1 << (MySqlParser.UTF32 - 602)) | (1 << (MySqlParser.UTF8 - 602)) | (1 << (MySqlParser.UTF8MB3 - 602)) | (1 << (MySqlParser.UTF8MB4 - 602)) | (1 << (MySqlParser.ARCHIVE - 602)) | (1 << (MySqlParser.BLACKHOLE - 602)) | (1 << (MySqlParser.CSV - 602)) | (1 << (MySqlParser.FEDERATED - 602)) | (1 << (MySqlParser.INNODB - 602)) | (1 << (MySqlParser.MEMORY - 602)) | (1 << (MySqlParser.MRG_MYISAM - 602)) | (1 << (MySqlParser.MYISAM - 602)) | (1 << (MySqlParser.NDB - 602)) | (1 << (MySqlParser.NDBCLUSTER - 602)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 602)) | (1 << (MySqlParser.REPEATABLE - 602)) | (1 << (MySqlParser.COMMITTED - 602)) | (1 << (MySqlParser.UNCOMMITTED - 602)) | (1 << (MySqlParser.SERIALIZABLE - 602)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 602)) | (1 << (MySqlParser.LINESTRING - 602)) | (1 << (MySqlParser.MULTILINESTRING - 602)) | (1 << (MySqlParser.MULTIPOINT - 602)) | (1 << (MySqlParser.MULTIPOLYGON - 602)) | (1 << (MySqlParser.POINT - 602)))) !== 0) || ((((_la - 634)) & ~0x1F) === 0 && ((1 << (_la - 634)) & ((1 << (MySqlParser.POLYGON - 634)) | (1 << (MySqlParser.ABS - 634)) | (1 << (MySqlParser.ACOS - 634)) | (1 << (MySqlParser.ADDDATE - 634)) | (1 << (MySqlParser.ADDTIME - 634)) | (1 << (MySqlParser.AES_DECRYPT - 634)) | (1 << (MySqlParser.AES_ENCRYPT - 634)) | (1 << (MySqlParser.AREA - 634)) | (1 << (MySqlParser.ASBINARY - 634)) | (1 << (MySqlParser.ASIN - 634)) | (1 << (MySqlParser.ASTEXT - 634)) | (1 << (MySqlParser.ASWKB - 634)) | (1 << (MySqlParser.ASWKT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 634)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 634)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 634)) | (1 << (MySqlParser.ATAN - 634)) | (1 << (MySqlParser.ATAN2 - 634)) | (1 << (MySqlParser.BENCHMARK - 634)) | (1 << (MySqlParser.BIN - 634)) | (1 << (MySqlParser.BIT_COUNT - 634)) | (1 << (MySqlParser.BIT_LENGTH - 634)) | (1 << (MySqlParser.BUFFER - 634)) | (1 << (MySqlParser.CEIL - 634)) | (1 << (MySqlParser.CEILING - 634)) | (1 << (MySqlParser.CENTROID - 634)) | (1 << (MySqlParser.CHARACTER_LENGTH - 634)) | (1 << (MySqlParser.CHARSET - 634)) | (1 << (MySqlParser.CHAR_LENGTH - 634)) | (1 << (MySqlParser.COERCIBILITY - 634)))) !== 0) || ((((_la - 666)) & ~0x1F) === 0 && ((1 << (_la - 666)) & ((1 << (MySqlParser.COLLATION - 666)) | (1 << (MySqlParser.COMPRESS - 666)) | (1 << (MySqlParser.CONCAT - 666)) | (1 << (MySqlParser.CONCAT_WS - 666)) | (1 << (MySqlParser.CONNECTION_ID - 666)) | (1 << (MySqlParser.CONV - 666)) | (1 << (MySqlParser.CONVERT_TZ - 666)) | (1 << (MySqlParser.COS - 666)) | (1 << (MySqlParser.COT - 666)) | (1 << (MySqlParser.CRC32 - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 666)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 666)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 666)) | (1 << (MySqlParser.CREATE_DIGEST - 666)) | (1 << (MySqlParser.CROSSES - 666)) | (1 << (MySqlParser.DATEDIFF - 666)) | (1 << (MySqlParser.DATE_FORMAT - 666)) | (1 << (MySqlParser.DAYNAME - 666)) | (1 << (MySqlParser.DAYOFMONTH - 666)) | (1 << (MySqlParser.DAYOFWEEK - 666)) | (1 << (MySqlParser.DAYOFYEAR - 666)) | (1 << (MySqlParser.DECODE - 666)) | (1 << (MySqlParser.DEGREES - 666)) | (1 << (MySqlParser.DES_DECRYPT - 666)) | (1 << (MySqlParser.DES_ENCRYPT - 666)) | (1 << (MySqlParser.DIMENSION - 666)) | (1 << (MySqlParser.DISJOINT - 666)) | (1 << (MySqlParser.ELT - 666)) | (1 << (MySqlParser.ENCODE - 666)) | (1 << (MySqlParser.ENCRYPT - 666)) | (1 << (MySqlParser.ENDPOINT - 666)) | (1 << (MySqlParser.ENVELOPE - 666)))) !== 0) || ((((_la - 698)) & ~0x1F) === 0 && ((1 << (_la - 698)) & ((1 << (MySqlParser.EQUALS - 698)) | (1 << (MySqlParser.EXP - 698)) | (1 << (MySqlParser.EXPORT_SET - 698)) | (1 << (MySqlParser.EXTERIORRING - 698)) | (1 << (MySqlParser.EXTRACTVALUE - 698)) | (1 << (MySqlParser.FIELD - 698)) | (1 << (MySqlParser.FIND_IN_SET - 698)) | (1 << (MySqlParser.FLOOR - 698)) | (1 << (MySqlParser.FORMAT - 698)) | (1 << (MySqlParser.FOUND_ROWS - 698)) | (1 << (MySqlParser.FROM_BASE64 - 698)) | (1 << (MySqlParser.FROM_DAYS - 698)) | (1 << (MySqlParser.FROM_UNIXTIME - 698)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 698)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 698)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 698)) | (1 << (MySqlParser.GEOMETRYN - 698)) | (1 << (MySqlParser.GEOMETRYTYPE - 698)) | (1 << (MySqlParser.GEOMFROMTEXT - 698)) | (1 << (MySqlParser.GEOMFROMWKB - 698)) | (1 << (MySqlParser.GET_FORMAT - 698)) | (1 << (MySqlParser.GET_LOCK - 698)) | (1 << (MySqlParser.GLENGTH - 698)) | (1 << (MySqlParser.GREATEST - 698)) | (1 << (MySqlParser.GTID_SUBSET - 698)) | (1 << (MySqlParser.GTID_SUBTRACT - 698)) | (1 << (MySqlParser.HEX - 698)) | (1 << (MySqlParser.IFNULL - 698)) | (1 << (MySqlParser.INET6_ATON - 698)))) !== 0) || ((((_la - 730)) & ~0x1F) === 0 && ((1 << (_la - 730)) & ((1 << (MySqlParser.INET6_NTOA - 730)) | (1 << (MySqlParser.INET_ATON - 730)) | (1 << (MySqlParser.INET_NTOA - 730)) | (1 << (MySqlParser.INSTR - 730)) | (1 << (MySqlParser.INTERIORRINGN - 730)) | (1 << (MySqlParser.INTERSECTS - 730)) | (1 << (MySqlParser.ISCLOSED - 730)) | (1 << (MySqlParser.ISEMPTY - 730)) | (1 << (MySqlParser.ISNULL - 730)) | (1 << (MySqlParser.ISSIMPLE - 730)) | (1 << (MySqlParser.IS_FREE_LOCK - 730)) | (1 << (MySqlParser.IS_IPV4 - 730)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 730)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 730)) | (1 << (MySqlParser.IS_IPV6 - 730)) | (1 << (MySqlParser.IS_USED_LOCK - 730)) | (1 << (MySqlParser.LAST_INSERT_ID - 730)) | (1 << (MySqlParser.LCASE - 730)) | (1 << (MySqlParser.LEAST - 730)) | (1 << (MySqlParser.LENGTH - 730)) | (1 << (MySqlParser.LINEFROMTEXT - 730)) | (1 << (MySqlParser.LINEFROMWKB - 730)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 730)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 730)) | (1 << (MySqlParser.LN - 730)) | (1 << (MySqlParser.LOAD_FILE - 730)) | (1 << (MySqlParser.LOCATE - 730)) | (1 << (MySqlParser.LOG - 730)) | (1 << (MySqlParser.LOG10 - 730)) | (1 << (MySqlParser.LOG2 - 730)) | (1 << (MySqlParser.LOWER - 730)) | (1 << (MySqlParser.LPAD - 730)))) !== 0) || ((((_la - 762)) & ~0x1F) === 0 && ((1 << (_la - 762)) & ((1 << (MySqlParser.LTRIM - 762)) | (1 << (MySqlParser.MAKEDATE - 762)) | (1 << (MySqlParser.MAKETIME - 762)) | (1 << (MySqlParser.MAKE_SET - 762)) | (1 << (MySqlParser.MASTER_POS_WAIT - 762)) | (1 << (MySqlParser.MBRCONTAINS - 762)) | (1 << (MySqlParser.MBRDISJOINT - 762)) | (1 << (MySqlParser.MBREQUAL - 762)) | (1 << (MySqlParser.MBRINTERSECTS - 762)) | (1 << (MySqlParser.MBROVERLAPS - 762)) | (1 << (MySqlParser.MBRTOUCHES - 762)) | (1 << (MySqlParser.MBRWITHIN - 762)) | (1 << (MySqlParser.MD5 - 762)) | (1 << (MySqlParser.MLINEFROMTEXT - 762)) | (1 << (MySqlParser.MLINEFROMWKB - 762)) | (1 << (MySqlParser.MONTHNAME - 762)) | (1 << (MySqlParser.MPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MPOINTFROMWKB - 762)) | (1 << (MySqlParser.MPOLYFROMTEXT - 762)) | (1 << (MySqlParser.MPOLYFROMWKB - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (MySqlParser.NAME_CONST - 762)) | (1 << (MySqlParser.NULLIF - 762)) | (1 << (MySqlParser.NUMGEOMETRIES - 762)) | (1 << (MySqlParser.NUMINTERIORRINGS - 762)) | (1 << (MySqlParser.NUMPOINTS - 762)) | (1 << (MySqlParser.OCT - 762)))) !== 0) || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MySqlParser.OCTET_LENGTH - 794)) | (1 << (MySqlParser.ORD - 794)) | (1 << (MySqlParser.OVERLAPS - 794)) | (1 << (MySqlParser.PERIOD_ADD - 794)) | (1 << (MySqlParser.PERIOD_DIFF - 794)) | (1 << (MySqlParser.PI - 794)) | (1 << (MySqlParser.POINTFROMTEXT - 794)) | (1 << (MySqlParser.POINTFROMWKB - 794)) | (1 << (MySqlParser.POINTN - 794)) | (1 << (MySqlParser.POLYFROMTEXT - 794)) | (1 << (MySqlParser.POLYFROMWKB - 794)) | (1 << (MySqlParser.POLYGONFROMTEXT - 794)) | (1 << (MySqlParser.POLYGONFROMWKB - 794)) | (1 << (MySqlParser.POW - 794)) | (1 << (MySqlParser.POWER - 794)) | (1 << (MySqlParser.QUOTE - 794)) | (1 << (MySqlParser.RADIANS - 794)) | (1 << (MySqlParser.RAND - 794)) | (1 << (MySqlParser.RANDOM_BYTES - 794)) | (1 << (MySqlParser.RELEASE_LOCK - 794)) | (1 << (MySqlParser.REVERSE - 794)) | (1 << (MySqlParser.ROUND - 794)) | (1 << (MySqlParser.ROW_COUNT - 794)) | (1 << (MySqlParser.RPAD - 794)) | (1 << (MySqlParser.RTRIM - 794)) | (1 << (MySqlParser.SEC_TO_TIME - 794)) | (1 << (MySqlParser.SESSION_USER - 794)) | (1 << (MySqlParser.SHA - 794)) | (1 << (MySqlParser.SHA1 - 794)) | (1 << (MySqlParser.SHA2 - 794)) | (1 << (MySqlParser.SIGN - 794)) | (1 << (MySqlParser.SIN - 794)))) !== 0) || ((((_la - 826)) & ~0x1F) === 0 && ((1 << (_la - 826)) & ((1 << (MySqlParser.SLEEP - 826)) | (1 << (MySqlParser.SOUNDEX - 826)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (MySqlParser.SQRT - 826)) | (1 << (MySqlParser.SRID - 826)) | (1 << (MySqlParser.STARTPOINT - 826)) | (1 << (MySqlParser.STRCMP - 826)) | (1 << (MySqlParser.STR_TO_DATE - 826)) | (1 << (MySqlParser.ST_AREA - 826)) | (1 << (MySqlParser.ST_ASBINARY - 826)) | (1 << (MySqlParser.ST_ASTEXT - 826)) | (1 << (MySqlParser.ST_ASWKB - 826)) | (1 << (MySqlParser.ST_ASWKT - 826)) | (1 << (MySqlParser.ST_BUFFER - 826)) | (1 << (MySqlParser.ST_CENTROID - 826)) | (1 << (MySqlParser.ST_CONTAINS - 826)) | (1 << (MySqlParser.ST_CROSSES - 826)) | (1 << (MySqlParser.ST_DIFFERENCE - 826)) | (1 << (MySqlParser.ST_DIMENSION - 826)) | (1 << (MySqlParser.ST_DISJOINT - 826)) | (1 << (MySqlParser.ST_DISTANCE - 826)) | (1 << (MySqlParser.ST_ENDPOINT - 826)) | (1 << (MySqlParser.ST_ENVELOPE - 826)) | (1 << (MySqlParser.ST_EQUALS - 826)) | (1 << (MySqlParser.ST_EXTERIORRING - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 826)))) !== 0) || ((((_la - 858)) & ~0x1F) === 0 && ((1 << (_la - 858)) & ((1 << (MySqlParser.ST_GEOMETRYN - 858)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 858)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 858)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 858)) | (1 << (MySqlParser.ST_INTERIORRINGN - 858)) | (1 << (MySqlParser.ST_INTERSECTION - 858)) | (1 << (MySqlParser.ST_INTERSECTS - 858)) | (1 << (MySqlParser.ST_ISCLOSED - 858)) | (1 << (MySqlParser.ST_ISEMPTY - 858)) | (1 << (MySqlParser.ST_ISSIMPLE - 858)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINEFROMWKB - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 858)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 858)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 858)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 858)) | (1 << (MySqlParser.ST_NUMPOINTS - 858)) | (1 << (MySqlParser.ST_OVERLAPS - 858)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 858)) | (1 << (MySqlParser.ST_POINTFROMWKB - 858)) | (1 << (MySqlParser.ST_POINTN - 858)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYFROMWKB - 858)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 858)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 858)) | (1 << (MySqlParser.ST_SRID - 858)) | (1 << (MySqlParser.ST_STARTPOINT - 858)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 858)) | (1 << (MySqlParser.ST_TOUCHES - 858)) | (1 << (MySqlParser.ST_UNION - 858)) | (1 << (MySqlParser.ST_WITHIN - 858)))) !== 0) || ((((_la - 890)) & ~0x1F) === 0 && ((1 << (_la - 890)) & ((1 << (MySqlParser.ST_X - 890)) | (1 << (MySqlParser.ST_Y - 890)) | (1 << (MySqlParser.SUBDATE - 890)) | (1 << (MySqlParser.SUBSTRING_INDEX - 890)) | (1 << (MySqlParser.SUBTIME - 890)) | (1 << (MySqlParser.SYSTEM_USER - 890)) | (1 << (MySqlParser.TAN - 890)) | (1 << (MySqlParser.TIMEDIFF - 890)) | (1 << (MySqlParser.TIMESTAMPADD - 890)) | (1 << (MySqlParser.TIMESTAMPDIFF - 890)) | (1 << (MySqlParser.TIME_FORMAT - 890)) | (1 << (MySqlParser.TIME_TO_SEC - 890)) | (1 << (MySqlParser.TOUCHES - 890)) | (1 << (MySqlParser.TO_BASE64 - 890)) | (1 << (MySqlParser.TO_DAYS - 890)) | (1 << (MySqlParser.TO_SECONDS - 890)) | (1 << (MySqlParser.UCASE - 890)) | (1 << (MySqlParser.UNCOMPRESS - 890)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (MySqlParser.UNHEX - 890)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 890)) | (1 << (MySqlParser.UPDATEXML - 890)) | (1 << (MySqlParser.UPPER - 890)) | (1 << (MySqlParser.UUID - 890)) | (1 << (MySqlParser.UUID_SHORT - 890)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (MySqlParser.VERSION - 890)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (MySqlParser.WEEKDAY - 890)) | (1 << (MySqlParser.WEEKOFYEAR - 890)) | (1 << (MySqlParser.WEIGHT_STRING - 890)) | (1 << (MySqlParser.WITHIN - 890)))) !== 0) || ((((_la - 922)) & ~0x1F) === 0 && ((1 << (_la - 922)) & ((1 << (MySqlParser.YEARWEEK - 922)) | (1 << (MySqlParser.Y_FUNCTION - 922)) | (1 << (MySqlParser.X_FUNCTION - 922)))) !== 0) || ((((_la - 962)) & ~0x1F) === 0 && ((1 << (_la - 962)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 962)) | (1 << (MySqlParser.STRING_LITERAL - 962)) | (1 << (MySqlParser.ID - 962)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 962)))) !== 0)) {
				{
				this.state = 4092;
				this.uid();
				this.state = 4093;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4097;
			this.match(MySqlParser.WHILE);
			this.state = 4098;
			this.expression(0);
			this.state = 4099;
			this.match(MySqlParser.DO);
			this.state = 4101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4100;
				this.procedureSqlStatement();
				}
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			this.state = 4105;
			this.match(MySqlParser.END);
			this.state = 4106;
			this.match(MySqlParser.WHILE);
			this.state = 4108;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 585, this._ctx) ) {
			case 1:
				{
				this.state = 4107;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorStatement(): CursorStatementContext {
		let _localctx: CursorStatementContext = new CursorStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, MySqlParser.RULE_cursorStatement);
		let _la: number;
		try {
			this.state = 4125;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4110;
				this.match(MySqlParser.CLOSE);
				this.state = 4111;
				this.uid();
				}
				break;
			case MySqlParser.FETCH:
				_localctx = new FetchCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4112;
				this.match(MySqlParser.FETCH);
				this.state = 4117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.NEXT) {
					{
					this.state = 4114;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.NEXT) {
						{
						this.state = 4113;
						this.match(MySqlParser.NEXT);
						}
					}

					this.state = 4116;
					this.match(MySqlParser.FROM);
					}
				}

				this.state = 4119;
				this.uid();
				this.state = 4120;
				this.match(MySqlParser.INTO);
				this.state = 4121;
				this.uidList();
				}
				break;
			case MySqlParser.OPEN:
				_localctx = new OpenCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4123;
				this.match(MySqlParser.OPEN);
				this.state = 4124;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareVariable(): DeclareVariableContext {
		let _localctx: DeclareVariableContext = new DeclareVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, MySqlParser.RULE_declareVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4127;
			this.match(MySqlParser.DECLARE);
			this.state = 4128;
			this.uidList();
			this.state = 4129;
			this.dataType();
			this.state = 4132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFAULT) {
				{
				this.state = 4130;
				this.match(MySqlParser.DEFAULT);
				this.state = 4131;
				this.defaultValue();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCondition(): DeclareConditionContext {
		let _localctx: DeclareConditionContext = new DeclareConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, MySqlParser.RULE_declareCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4134;
			this.match(MySqlParser.DECLARE);
			this.state = 4135;
			this.uid();
			this.state = 4136;
			this.match(MySqlParser.CONDITION);
			this.state = 4137;
			this.match(MySqlParser.FOR);
			this.state = 4144;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				{
				this.state = 4138;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQLSTATE:
				{
				this.state = 4139;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.VALUE) {
					{
					this.state = 4140;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4143;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCursor(): DeclareCursorContext {
		let _localctx: DeclareCursorContext = new DeclareCursorContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, MySqlParser.RULE_declareCursor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4146;
			this.match(MySqlParser.DECLARE);
			this.state = 4147;
			this.uid();
			this.state = 4148;
			this.match(MySqlParser.CURSOR);
			this.state = 4149;
			this.match(MySqlParser.FOR);
			this.state = 4150;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareHandler(): DeclareHandlerContext {
		let _localctx: DeclareHandlerContext = new DeclareHandlerContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, MySqlParser.RULE_declareHandler);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4152;
			this.match(MySqlParser.DECLARE);
			this.state = 4153;
			_localctx._handlerAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.CONTINUE || _la === MySqlParser.EXIT || _la === MySqlParser.UNDO)) {
				_localctx._handlerAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4154;
			this.match(MySqlParser.HANDLER);
			this.state = 4155;
			this.match(MySqlParser.FOR);
			this.state = 4156;
			this.handlerConditionValue();
			this.state = 4161;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4157;
				this.match(MySqlParser.COMMA);
				this.state = 4158;
				this.handlerConditionValue();
				}
				}
				this.state = 4163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4164;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerConditionValue(): HandlerConditionValueContext {
		let _localctx: HandlerConditionValueContext = new HandlerConditionValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, MySqlParser.RULE_handlerConditionValue);
		let _la: number;
		try {
			this.state = 4177;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4166;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4167;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.VALUE) {
					{
					this.state = 4168;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4171;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4172;
				this.uid();
				}
				break;
			case MySqlParser.SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4173;
				this.match(MySqlParser.SQLWARNING);
				}
				break;
			case MySqlParser.NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4174;
				this.match(MySqlParser.NOT);
				this.state = 4175;
				this.match(MySqlParser.FOUND);
				}
				break;
			case MySqlParser.SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4176;
				this.match(MySqlParser.SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureSqlStatement(): ProcedureSqlStatementContext {
		let _localctx: ProcedureSqlStatementContext = new ProcedureSqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, MySqlParser.RULE_procedureSqlStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4181;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 595, this._ctx) ) {
			case 1:
				{
				this.state = 4179;
				this.compoundStatement();
				}
				break;

			case 2:
				{
				this.state = 4180;
				this.sqlStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseAlternative(): CaseAlternativeContext {
		let _localctx: CaseAlternativeContext = new CaseAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, MySqlParser.RULE_caseAlternative);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4183;
			this.match(MySqlParser.WHEN);
			this.state = 4186;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				{
				this.state = 4184;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 4185;
				this.expression(0);
				}
				break;
			}
			this.state = 4188;
			this.match(MySqlParser.THEN);
			this.state = 4190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4189;
				this.procedureSqlStatement();
				}
				}
				this.state = 4192;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elifAlternative(): ElifAlternativeContext {
		let _localctx: ElifAlternativeContext = new ElifAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, MySqlParser.RULE_elifAlternative);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4194;
			this.match(MySqlParser.ELSEIF);
			this.state = 4195;
			this.expression(0);
			this.state = 4196;
			this.match(MySqlParser.THEN);
			this.state = 4198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4197;
				this.procedureSqlStatement();
				}
				}
				this.state = 4200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 8)) & ~0x1F) === 0 && ((1 << (_la - 8)) & ((1 << (MySqlParser.ALTER - 8)) | (1 << (MySqlParser.ANALYZE - 8)) | (1 << (MySqlParser.CALL - 8)) | (1 << (MySqlParser.CASE - 8)) | (1 << (MySqlParser.CHANGE - 8)) | (1 << (MySqlParser.CHECK - 8)) | (1 << (MySqlParser.CREATE - 8)) | (1 << (MySqlParser.DATABASE - 8)))) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.FETCH - 40)) | (1 << (MySqlParser.GRANT - 40)) | (1 << (MySqlParser.IF - 40)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INSERT - 74)) | (1 << (MySqlParser.ITERATE - 74)) | (1 << (MySqlParser.KILL - 74)) | (1 << (MySqlParser.LEAVE - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.LOAD - 74)) | (1 << (MySqlParser.LOCK - 74)) | (1 << (MySqlParser.LOOP - 74)) | (1 << (MySqlParser.OPTIMIZE - 74)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (MySqlParser.PURGE - 115)) | (1 << (MySqlParser.RELEASE - 115)) | (1 << (MySqlParser.RENAME - 115)) | (1 << (MySqlParser.REPEAT - 115)) | (1 << (MySqlParser.REPLACE - 115)) | (1 << (MySqlParser.RETURN - 115)) | (1 << (MySqlParser.REVOKE - 115)) | (1 << (MySqlParser.RIGHT - 115)) | (1 << (MySqlParser.SELECT - 115)) | (1 << (MySqlParser.SET - 115)) | (1 << (MySqlParser.SHOW - 115)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)) | (1 << (MySqlParser.WHILE - 158)) | (1 << (MySqlParser.DATE - 158)) | (1 << (MySqlParser.TIME - 158)) | (1 << (MySqlParser.TIMESTAMP - 158)) | (1 << (MySqlParser.DATETIME - 158)) | (1 << (MySqlParser.YEAR - 158)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (MySqlParser.TEXT - 197)) | (1 << (MySqlParser.ENUM - 197)) | (1 << (MySqlParser.SERIAL - 197)) | (1 << (MySqlParser.COUNT - 197)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (MySqlParser.POSITION - 240)) | (1 << (MySqlParser.ACCOUNT - 240)) | (1 << (MySqlParser.ACTION - 240)) | (1 << (MySqlParser.AFTER - 240)) | (1 << (MySqlParser.AGGREGATE - 240)) | (1 << (MySqlParser.ALGORITHM - 240)) | (1 << (MySqlParser.ANY - 240)) | (1 << (MySqlParser.AT - 240)) | (1 << (MySqlParser.AUTHORS - 240)) | (1 << (MySqlParser.AUTOCOMMIT - 240)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 240)) | (1 << (MySqlParser.AUTO_INCREMENT - 240)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 240)) | (1 << (MySqlParser.BEGIN - 240)) | (1 << (MySqlParser.BINLOG - 240)) | (1 << (MySqlParser.BIT - 240)) | (1 << (MySqlParser.BLOCK - 240)) | (1 << (MySqlParser.BOOL - 240)) | (1 << (MySqlParser.BOOLEAN - 240)) | (1 << (MySqlParser.BTREE - 240)) | (1 << (MySqlParser.CACHE - 240)) | (1 << (MySqlParser.CASCADED - 240)) | (1 << (MySqlParser.CHAIN - 240)) | (1 << (MySqlParser.CHANGED - 240)) | (1 << (MySqlParser.CHANNEL - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (MySqlParser.CHECKSUM - 272)) | (1 << (MySqlParser.CIPHER - 272)) | (1 << (MySqlParser.CLIENT - 272)) | (1 << (MySqlParser.CLOSE - 272)) | (1 << (MySqlParser.COALESCE - 272)) | (1 << (MySqlParser.CODE - 272)) | (1 << (MySqlParser.COLUMNS - 272)) | (1 << (MySqlParser.COLUMN_FORMAT - 272)) | (1 << (MySqlParser.COMMENT - 272)) | (1 << (MySqlParser.COMMIT - 272)) | (1 << (MySqlParser.COMPACT - 272)) | (1 << (MySqlParser.COMPLETION - 272)) | (1 << (MySqlParser.COMPRESSED - 272)) | (1 << (MySqlParser.COMPRESSION - 272)) | (1 << (MySqlParser.CONCURRENT - 272)) | (1 << (MySqlParser.CONNECTION - 272)) | (1 << (MySqlParser.CONSISTENT - 272)) | (1 << (MySqlParser.CONTAINS - 272)) | (1 << (MySqlParser.CONTEXT - 272)) | (1 << (MySqlParser.CONTRIBUTORS - 272)) | (1 << (MySqlParser.COPY - 272)) | (1 << (MySqlParser.CPU - 272)) | (1 << (MySqlParser.DATA - 272)) | (1 << (MySqlParser.DATAFILE - 272)) | (1 << (MySqlParser.DEALLOCATE - 272)) | (1 << (MySqlParser.DEFAULT_AUTH - 272)) | (1 << (MySqlParser.DEFINER - 272)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 272)) | (1 << (MySqlParser.DIRECTORY - 272)) | (1 << (MySqlParser.DISABLE - 272)) | (1 << (MySqlParser.DISCARD - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (MySqlParser.DISK - 304)) | (1 << (MySqlParser.DO - 304)) | (1 << (MySqlParser.DUMPFILE - 304)) | (1 << (MySqlParser.DUPLICATE - 304)) | (1 << (MySqlParser.DYNAMIC - 304)) | (1 << (MySqlParser.ENABLE - 304)) | (1 << (MySqlParser.ENCRYPTION - 304)) | (1 << (MySqlParser.ENDS - 304)) | (1 << (MySqlParser.ENGINE - 304)) | (1 << (MySqlParser.ENGINES - 304)) | (1 << (MySqlParser.ERROR - 304)) | (1 << (MySqlParser.ERRORS - 304)) | (1 << (MySqlParser.ESCAPE - 304)) | (1 << (MySqlParser.EVEN - 304)) | (1 << (MySqlParser.EVENT - 304)) | (1 << (MySqlParser.EVENTS - 304)) | (1 << (MySqlParser.EVERY - 304)) | (1 << (MySqlParser.EXCHANGE - 304)) | (1 << (MySqlParser.EXCLUSIVE - 304)) | (1 << (MySqlParser.EXPIRE - 304)) | (1 << (MySqlParser.EXTENDED - 304)) | (1 << (MySqlParser.EXTENT_SIZE - 304)) | (1 << (MySqlParser.FAST - 304)) | (1 << (MySqlParser.FAULTS - 304)) | (1 << (MySqlParser.FIELDS - 304)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 304)) | (1 << (MySqlParser.FILTER - 304)) | (1 << (MySqlParser.FIRST - 304)) | (1 << (MySqlParser.FIXED - 304)) | (1 << (MySqlParser.FLUSH - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (MySqlParser.FOLLOWS - 336)) | (1 << (MySqlParser.FULL - 336)) | (1 << (MySqlParser.FUNCTION - 336)) | (1 << (MySqlParser.GLOBAL - 336)) | (1 << (MySqlParser.GRANTS - 336)) | (1 << (MySqlParser.GROUP_REPLICATION - 336)) | (1 << (MySqlParser.HANDLER - 336)) | (1 << (MySqlParser.HASH - 336)) | (1 << (MySqlParser.HELP - 336)) | (1 << (MySqlParser.HOST - 336)) | (1 << (MySqlParser.IDENTIFIED - 336)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 336)) | (1 << (MySqlParser.IMPORT - 336)) | (1 << (MySqlParser.INDEXES - 336)) | (1 << (MySqlParser.INITIAL_SIZE - 336)) | (1 << (MySqlParser.INPLACE - 336)) | (1 << (MySqlParser.INSERT_METHOD - 336)) | (1 << (MySqlParser.INSTALL - 336)) | (1 << (MySqlParser.INSTANCE - 336)) | (1 << (MySqlParser.INVOKER - 336)) | (1 << (MySqlParser.IO - 336)) | (1 << (MySqlParser.IO_THREAD - 336)) | (1 << (MySqlParser.IPC - 336)) | (1 << (MySqlParser.ISOLATION - 336)) | (1 << (MySqlParser.ISSUER - 336)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 336)) | (1 << (MySqlParser.LANGUAGE - 336)) | (1 << (MySqlParser.LAST - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (MySqlParser.LEAVES - 368)) | (1 << (MySqlParser.LESS - 368)) | (1 << (MySqlParser.LEVEL - 368)) | (1 << (MySqlParser.LIST - 368)) | (1 << (MySqlParser.LOCAL - 368)) | (1 << (MySqlParser.LOGFILE - 368)) | (1 << (MySqlParser.LOGS - 368)) | (1 << (MySqlParser.MASTER - 368)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 368)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 368)) | (1 << (MySqlParser.MASTER_DELAY - 368)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 368)) | (1 << (MySqlParser.MASTER_HOST - 368)) | (1 << (MySqlParser.MASTER_LOG_FILE - 368)) | (1 << (MySqlParser.MASTER_LOG_POS - 368)) | (1 << (MySqlParser.MASTER_PASSWORD - 368)) | (1 << (MySqlParser.MASTER_PORT - 368)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 368)) | (1 << (MySqlParser.MASTER_SSL - 368)) | (1 << (MySqlParser.MASTER_SSL_CA - 368)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_CERT - 368)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 368)) | (1 << (MySqlParser.MASTER_SSL_CRL - 368)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 368)) | (1 << (MySqlParser.MASTER_SSL_KEY - 368)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 368)) | (1 << (MySqlParser.MASTER_USER - 368)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 368)) | (1 << (MySqlParser.MAX_ROWS - 368)) | (1 << (MySqlParser.MAX_SIZE - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 400)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 400)) | (1 << (MySqlParser.MEDIUM - 400)) | (1 << (MySqlParser.MERGE - 400)) | (1 << (MySqlParser.MID - 400)) | (1 << (MySqlParser.MIGRATE - 400)) | (1 << (MySqlParser.MIN_ROWS - 400)) | (1 << (MySqlParser.MODIFY - 400)) | (1 << (MySqlParser.MUTEX - 400)) | (1 << (MySqlParser.MYSQL - 400)) | (1 << (MySqlParser.NAME - 400)) | (1 << (MySqlParser.NAMES - 400)) | (1 << (MySqlParser.NCHAR - 400)) | (1 << (MySqlParser.NEVER - 400)) | (1 << (MySqlParser.NO - 400)) | (1 << (MySqlParser.NODEGROUP - 400)) | (1 << (MySqlParser.NONE - 400)) | (1 << (MySqlParser.OFFLINE - 400)) | (1 << (MySqlParser.OFFSET - 400)) | (1 << (MySqlParser.OJ - 400)) | (1 << (MySqlParser.OLD_PASSWORD - 400)) | (1 << (MySqlParser.ONE - 400)) | (1 << (MySqlParser.ONLINE - 400)) | (1 << (MySqlParser.ONLY - 400)) | (1 << (MySqlParser.OPEN - 400)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 400)) | (1 << (MySqlParser.OPTIONS - 400)) | (1 << (MySqlParser.OWNER - 400)) | (1 << (MySqlParser.PACK_KEYS - 400)) | (1 << (MySqlParser.PAGE - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MySqlParser.PARSER - 432)) | (1 << (MySqlParser.PARTIAL - 432)) | (1 << (MySqlParser.PARTITIONING - 432)) | (1 << (MySqlParser.PARTITIONS - 432)) | (1 << (MySqlParser.PASSWORD - 432)) | (1 << (MySqlParser.PHASE - 432)) | (1 << (MySqlParser.PLUGIN_DIR - 432)) | (1 << (MySqlParser.PLUGINS - 432)) | (1 << (MySqlParser.PORT - 432)) | (1 << (MySqlParser.PRECEDES - 432)) | (1 << (MySqlParser.PREPARE - 432)) | (1 << (MySqlParser.PRESERVE - 432)) | (1 << (MySqlParser.PREV - 432)) | (1 << (MySqlParser.PROCESSLIST - 432)) | (1 << (MySqlParser.PROFILE - 432)) | (1 << (MySqlParser.PROFILES - 432)) | (1 << (MySqlParser.PROXY - 432)) | (1 << (MySqlParser.QUERY - 432)) | (1 << (MySqlParser.QUICK - 432)) | (1 << (MySqlParser.REBUILD - 432)) | (1 << (MySqlParser.RECOVER - 432)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 432)) | (1 << (MySqlParser.REDUNDANT - 432)) | (1 << (MySqlParser.RELAY_LOG_FILE - 432)) | (1 << (MySqlParser.RELAY_LOG_POS - 432)) | (1 << (MySqlParser.RELAYLOG - 432)) | (1 << (MySqlParser.REMOVE - 432)) | (1 << (MySqlParser.REORGANIZE - 432)) | (1 << (MySqlParser.REPAIR - 432)) | (1 << (MySqlParser.REPLICATE_DO_DB - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 464)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 464)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 464)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 464)) | (1 << (MySqlParser.REPLICATION - 464)) | (1 << (MySqlParser.RESET - 464)) | (1 << (MySqlParser.RESUME - 464)) | (1 << (MySqlParser.RETURNS - 464)) | (1 << (MySqlParser.ROLLBACK - 464)) | (1 << (MySqlParser.ROLLUP - 464)) | (1 << (MySqlParser.ROTATE - 464)) | (1 << (MySqlParser.ROW - 464)) | (1 << (MySqlParser.ROWS - 464)) | (1 << (MySqlParser.ROW_FORMAT - 464)) | (1 << (MySqlParser.SAVEPOINT - 464)) | (1 << (MySqlParser.SCHEDULE - 464)) | (1 << (MySqlParser.SECURITY - 464)) | (1 << (MySqlParser.SERVER - 464)) | (1 << (MySqlParser.SESSION - 464)) | (1 << (MySqlParser.SHARE - 464)) | (1 << (MySqlParser.SHARED - 464)) | (1 << (MySqlParser.SIGNED - 464)) | (1 << (MySqlParser.SIMPLE - 464)) | (1 << (MySqlParser.SLAVE - 464)) | (1 << (MySqlParser.SNAPSHOT - 464)) | (1 << (MySqlParser.SOCKET - 464)) | (1 << (MySqlParser.SOME - 464)) | (1 << (MySqlParser.SOUNDS - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (MySqlParser.SOURCE - 496)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 496)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 496)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 496)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 496)) | (1 << (MySqlParser.SQL_CACHE - 496)) | (1 << (MySqlParser.SQL_NO_CACHE - 496)) | (1 << (MySqlParser.SQL_THREAD - 496)) | (1 << (MySqlParser.START - 496)) | (1 << (MySqlParser.STARTS - 496)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 496)) | (1 << (MySqlParser.STATS_PERSISTENT - 496)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 496)) | (1 << (MySqlParser.STATUS - 496)) | (1 << (MySqlParser.STOP - 496)) | (1 << (MySqlParser.STORAGE - 496)) | (1 << (MySqlParser.STRING - 496)) | (1 << (MySqlParser.SUBJECT - 496)) | (1 << (MySqlParser.SUBPARTITION - 496)) | (1 << (MySqlParser.SUBPARTITIONS - 496)) | (1 << (MySqlParser.SUSPEND - 496)) | (1 << (MySqlParser.SWAPS - 496)) | (1 << (MySqlParser.SWITCHES - 496)) | (1 << (MySqlParser.TABLESPACE - 496)) | (1 << (MySqlParser.TEMPORARY - 496)) | (1 << (MySqlParser.TEMPTABLE - 496)) | (1 << (MySqlParser.THAN - 496)) | (1 << (MySqlParser.TRANSACTION - 496)) | (1 << (MySqlParser.TRUNCATE - 496)))) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & ((1 << (MySqlParser.UNDEFINED - 528)) | (1 << (MySqlParser.UNDOFILE - 528)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 528)) | (1 << (MySqlParser.UNINSTALL - 528)) | (1 << (MySqlParser.UNKNOWN - 528)) | (1 << (MySqlParser.UPGRADE - 528)) | (1 << (MySqlParser.USER - 528)) | (1 << (MySqlParser.VALIDATION - 528)) | (1 << (MySqlParser.VALUE - 528)) | (1 << (MySqlParser.VARIABLES - 528)) | (1 << (MySqlParser.VIEW - 528)) | (1 << (MySqlParser.WAIT - 528)) | (1 << (MySqlParser.WARNINGS - 528)) | (1 << (MySqlParser.WITHOUT - 528)) | (1 << (MySqlParser.WORK - 528)) | (1 << (MySqlParser.WRAPPER - 528)) | (1 << (MySqlParser.X509 - 528)) | (1 << (MySqlParser.XA - 528)) | (1 << (MySqlParser.XML - 528)) | (1 << (MySqlParser.QUARTER - 528)) | (1 << (MySqlParser.MONTH - 528)) | (1 << (MySqlParser.DAY - 528)) | (1 << (MySqlParser.HOUR - 528)))) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & ((1 << (MySqlParser.MINUTE - 560)) | (1 << (MySqlParser.WEEK - 560)) | (1 << (MySqlParser.SECOND - 560)) | (1 << (MySqlParser.MICROSECOND - 560)) | (1 << (MySqlParser.TABLES - 560)) | (1 << (MySqlParser.ROUTINE - 560)) | (1 << (MySqlParser.EXECUTE - 560)) | (1 << (MySqlParser.FILE - 560)) | (1 << (MySqlParser.PROCESS - 560)) | (1 << (MySqlParser.RELOAD - 560)) | (1 << (MySqlParser.SHUTDOWN - 560)) | (1 << (MySqlParser.SUPER - 560)) | (1 << (MySqlParser.PRIVILEGES - 560)) | (1 << (MySqlParser.ARMSCII8 - 560)) | (1 << (MySqlParser.ASCII - 560)) | (1 << (MySqlParser.BIG5 - 560)) | (1 << (MySqlParser.CP1250 - 560)) | (1 << (MySqlParser.CP1251 - 560)) | (1 << (MySqlParser.CP1256 - 560)) | (1 << (MySqlParser.CP1257 - 560)) | (1 << (MySqlParser.CP850 - 560)) | (1 << (MySqlParser.CP852 - 560)) | (1 << (MySqlParser.CP866 - 560)) | (1 << (MySqlParser.CP932 - 560)) | (1 << (MySqlParser.DEC8 - 560)) | (1 << (MySqlParser.EUCJPMS - 560)) | (1 << (MySqlParser.EUCKR - 560)) | (1 << (MySqlParser.GB2312 - 560)) | (1 << (MySqlParser.GBK - 560)) | (1 << (MySqlParser.GEOSTD8 - 560)) | (1 << (MySqlParser.GREEK - 560)) | (1 << (MySqlParser.HEBREW - 560)))) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & ((1 << (MySqlParser.HP8 - 592)) | (1 << (MySqlParser.KEYBCS2 - 592)) | (1 << (MySqlParser.KOI8R - 592)) | (1 << (MySqlParser.KOI8U - 592)) | (1 << (MySqlParser.LATIN1 - 592)) | (1 << (MySqlParser.LATIN2 - 592)) | (1 << (MySqlParser.LATIN5 - 592)) | (1 << (MySqlParser.LATIN7 - 592)) | (1 << (MySqlParser.MACCE - 592)) | (1 << (MySqlParser.MACROMAN - 592)) | (1 << (MySqlParser.SJIS - 592)) | (1 << (MySqlParser.SWE7 - 592)) | (1 << (MySqlParser.TIS620 - 592)) | (1 << (MySqlParser.UCS2 - 592)) | (1 << (MySqlParser.UJIS - 592)) | (1 << (MySqlParser.UTF16 - 592)) | (1 << (MySqlParser.UTF16LE - 592)) | (1 << (MySqlParser.UTF32 - 592)) | (1 << (MySqlParser.UTF8 - 592)) | (1 << (MySqlParser.UTF8MB3 - 592)) | (1 << (MySqlParser.UTF8MB4 - 592)) | (1 << (MySqlParser.ARCHIVE - 592)) | (1 << (MySqlParser.BLACKHOLE - 592)) | (1 << (MySqlParser.CSV - 592)) | (1 << (MySqlParser.FEDERATED - 592)) | (1 << (MySqlParser.INNODB - 592)) | (1 << (MySqlParser.MEMORY - 592)) | (1 << (MySqlParser.MRG_MYISAM - 592)) | (1 << (MySqlParser.MYISAM - 592)) | (1 << (MySqlParser.NDB - 592)) | (1 << (MySqlParser.NDBCLUSTER - 592)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 592)))) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 624)) | (1 << (MySqlParser.LINESTRING - 624)) | (1 << (MySqlParser.MULTILINESTRING - 624)) | (1 << (MySqlParser.MULTIPOINT - 624)) | (1 << (MySqlParser.MULTIPOLYGON - 624)) | (1 << (MySqlParser.POINT - 624)) | (1 << (MySqlParser.POLYGON - 624)) | (1 << (MySqlParser.ABS - 624)) | (1 << (MySqlParser.ACOS - 624)) | (1 << (MySqlParser.ADDDATE - 624)) | (1 << (MySqlParser.ADDTIME - 624)) | (1 << (MySqlParser.AES_DECRYPT - 624)) | (1 << (MySqlParser.AES_ENCRYPT - 624)) | (1 << (MySqlParser.AREA - 624)) | (1 << (MySqlParser.ASBINARY - 624)) | (1 << (MySqlParser.ASIN - 624)) | (1 << (MySqlParser.ASTEXT - 624)) | (1 << (MySqlParser.ASWKB - 624)) | (1 << (MySqlParser.ASWKT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 624)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 624)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 624)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 624)) | (1 << (MySqlParser.ATAN - 624)) | (1 << (MySqlParser.ATAN2 - 624)) | (1 << (MySqlParser.BENCHMARK - 624)) | (1 << (MySqlParser.BIN - 624)))) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & ((1 << (MySqlParser.BIT_COUNT - 656)) | (1 << (MySqlParser.BIT_LENGTH - 656)) | (1 << (MySqlParser.BUFFER - 656)) | (1 << (MySqlParser.CEIL - 656)) | (1 << (MySqlParser.CEILING - 656)) | (1 << (MySqlParser.CENTROID - 656)) | (1 << (MySqlParser.CHARACTER_LENGTH - 656)) | (1 << (MySqlParser.CHARSET - 656)) | (1 << (MySqlParser.CHAR_LENGTH - 656)) | (1 << (MySqlParser.COERCIBILITY - 656)) | (1 << (MySqlParser.COLLATION - 656)) | (1 << (MySqlParser.COMPRESS - 656)) | (1 << (MySqlParser.CONCAT - 656)) | (1 << (MySqlParser.CONCAT_WS - 656)) | (1 << (MySqlParser.CONNECTION_ID - 656)) | (1 << (MySqlParser.CONV - 656)) | (1 << (MySqlParser.CONVERT_TZ - 656)) | (1 << (MySqlParser.COS - 656)) | (1 << (MySqlParser.COT - 656)) | (1 << (MySqlParser.CRC32 - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 656)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 656)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 656)) | (1 << (MySqlParser.CREATE_DIGEST - 656)) | (1 << (MySqlParser.CROSSES - 656)) | (1 << (MySqlParser.DATEDIFF - 656)) | (1 << (MySqlParser.DATE_FORMAT - 656)) | (1 << (MySqlParser.DAYNAME - 656)) | (1 << (MySqlParser.DAYOFMONTH - 656)) | (1 << (MySqlParser.DAYOFWEEK - 656)) | (1 << (MySqlParser.DAYOFYEAR - 656)) | (1 << (MySqlParser.DECODE - 656)))) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & ((1 << (MySqlParser.DEGREES - 688)) | (1 << (MySqlParser.DES_DECRYPT - 688)) | (1 << (MySqlParser.DES_ENCRYPT - 688)) | (1 << (MySqlParser.DIMENSION - 688)) | (1 << (MySqlParser.DISJOINT - 688)) | (1 << (MySqlParser.ELT - 688)) | (1 << (MySqlParser.ENCODE - 688)) | (1 << (MySqlParser.ENCRYPT - 688)) | (1 << (MySqlParser.ENDPOINT - 688)) | (1 << (MySqlParser.ENVELOPE - 688)) | (1 << (MySqlParser.EQUALS - 688)) | (1 << (MySqlParser.EXP - 688)) | (1 << (MySqlParser.EXPORT_SET - 688)) | (1 << (MySqlParser.EXTERIORRING - 688)) | (1 << (MySqlParser.EXTRACTVALUE - 688)) | (1 << (MySqlParser.FIELD - 688)) | (1 << (MySqlParser.FIND_IN_SET - 688)) | (1 << (MySqlParser.FLOOR - 688)) | (1 << (MySqlParser.FORMAT - 688)) | (1 << (MySqlParser.FOUND_ROWS - 688)) | (1 << (MySqlParser.FROM_BASE64 - 688)) | (1 << (MySqlParser.FROM_DAYS - 688)) | (1 << (MySqlParser.FROM_UNIXTIME - 688)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 688)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 688)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 688)) | (1 << (MySqlParser.GEOMETRYN - 688)) | (1 << (MySqlParser.GEOMETRYTYPE - 688)) | (1 << (MySqlParser.GEOMFROMTEXT - 688)))) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & ((1 << (MySqlParser.GEOMFROMWKB - 720)) | (1 << (MySqlParser.GET_FORMAT - 720)) | (1 << (MySqlParser.GET_LOCK - 720)) | (1 << (MySqlParser.GLENGTH - 720)) | (1 << (MySqlParser.GREATEST - 720)) | (1 << (MySqlParser.GTID_SUBSET - 720)) | (1 << (MySqlParser.GTID_SUBTRACT - 720)) | (1 << (MySqlParser.HEX - 720)) | (1 << (MySqlParser.IFNULL - 720)) | (1 << (MySqlParser.INET6_ATON - 720)) | (1 << (MySqlParser.INET6_NTOA - 720)) | (1 << (MySqlParser.INET_ATON - 720)) | (1 << (MySqlParser.INET_NTOA - 720)) | (1 << (MySqlParser.INSTR - 720)) | (1 << (MySqlParser.INTERIORRINGN - 720)) | (1 << (MySqlParser.INTERSECTS - 720)) | (1 << (MySqlParser.ISCLOSED - 720)) | (1 << (MySqlParser.ISEMPTY - 720)) | (1 << (MySqlParser.ISNULL - 720)) | (1 << (MySqlParser.ISSIMPLE - 720)) | (1 << (MySqlParser.IS_FREE_LOCK - 720)) | (1 << (MySqlParser.IS_IPV4 - 720)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 720)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 720)) | (1 << (MySqlParser.IS_IPV6 - 720)) | (1 << (MySqlParser.IS_USED_LOCK - 720)) | (1 << (MySqlParser.LAST_INSERT_ID - 720)) | (1 << (MySqlParser.LCASE - 720)) | (1 << (MySqlParser.LEAST - 720)) | (1 << (MySqlParser.LENGTH - 720)) | (1 << (MySqlParser.LINEFROMTEXT - 720)) | (1 << (MySqlParser.LINEFROMWKB - 720)))) !== 0) || ((((_la - 752)) & ~0x1F) === 0 && ((1 << (_la - 752)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 752)) | (1 << (MySqlParser.LN - 752)) | (1 << (MySqlParser.LOAD_FILE - 752)) | (1 << (MySqlParser.LOCATE - 752)) | (1 << (MySqlParser.LOG - 752)) | (1 << (MySqlParser.LOG10 - 752)) | (1 << (MySqlParser.LOG2 - 752)) | (1 << (MySqlParser.LOWER - 752)) | (1 << (MySqlParser.LPAD - 752)) | (1 << (MySqlParser.LTRIM - 752)) | (1 << (MySqlParser.MAKEDATE - 752)) | (1 << (MySqlParser.MAKETIME - 752)) | (1 << (MySqlParser.MAKE_SET - 752)) | (1 << (MySqlParser.MASTER_POS_WAIT - 752)) | (1 << (MySqlParser.MBRCONTAINS - 752)) | (1 << (MySqlParser.MBRDISJOINT - 752)) | (1 << (MySqlParser.MBREQUAL - 752)) | (1 << (MySqlParser.MBRINTERSECTS - 752)) | (1 << (MySqlParser.MBROVERLAPS - 752)) | (1 << (MySqlParser.MBRTOUCHES - 752)) | (1 << (MySqlParser.MBRWITHIN - 752)) | (1 << (MySqlParser.MD5 - 752)) | (1 << (MySqlParser.MLINEFROMTEXT - 752)) | (1 << (MySqlParser.MLINEFROMWKB - 752)) | (1 << (MySqlParser.MONTHNAME - 752)) | (1 << (MySqlParser.MPOINTFROMTEXT - 752)) | (1 << (MySqlParser.MPOINTFROMWKB - 752)) | (1 << (MySqlParser.MPOLYFROMTEXT - 752)) | (1 << (MySqlParser.MPOLYFROMWKB - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 752)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 752)))) !== 0) || ((((_la - 784)) & ~0x1F) === 0 && ((1 << (_la - 784)) & ((1 << (MySqlParser.MULTIPOINTFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 784)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 784)) | (1 << (MySqlParser.NAME_CONST - 784)) | (1 << (MySqlParser.NULLIF - 784)) | (1 << (MySqlParser.NUMGEOMETRIES - 784)) | (1 << (MySqlParser.NUMINTERIORRINGS - 784)) | (1 << (MySqlParser.NUMPOINTS - 784)) | (1 << (MySqlParser.OCT - 784)) | (1 << (MySqlParser.OCTET_LENGTH - 784)) | (1 << (MySqlParser.ORD - 784)) | (1 << (MySqlParser.OVERLAPS - 784)) | (1 << (MySqlParser.PERIOD_ADD - 784)) | (1 << (MySqlParser.PERIOD_DIFF - 784)) | (1 << (MySqlParser.PI - 784)) | (1 << (MySqlParser.POINTFROMTEXT - 784)) | (1 << (MySqlParser.POINTFROMWKB - 784)) | (1 << (MySqlParser.POINTN - 784)) | (1 << (MySqlParser.POLYFROMTEXT - 784)) | (1 << (MySqlParser.POLYFROMWKB - 784)) | (1 << (MySqlParser.POLYGONFROMTEXT - 784)) | (1 << (MySqlParser.POLYGONFROMWKB - 784)) | (1 << (MySqlParser.POW - 784)) | (1 << (MySqlParser.POWER - 784)) | (1 << (MySqlParser.QUOTE - 784)) | (1 << (MySqlParser.RADIANS - 784)) | (1 << (MySqlParser.RAND - 784)) | (1 << (MySqlParser.RANDOM_BYTES - 784)) | (1 << (MySqlParser.RELEASE_LOCK - 784)) | (1 << (MySqlParser.REVERSE - 784)) | (1 << (MySqlParser.ROUND - 784)))) !== 0) || ((((_la - 816)) & ~0x1F) === 0 && ((1 << (_la - 816)) & ((1 << (MySqlParser.ROW_COUNT - 816)) | (1 << (MySqlParser.RPAD - 816)) | (1 << (MySqlParser.RTRIM - 816)) | (1 << (MySqlParser.SEC_TO_TIME - 816)) | (1 << (MySqlParser.SESSION_USER - 816)) | (1 << (MySqlParser.SHA - 816)) | (1 << (MySqlParser.SHA1 - 816)) | (1 << (MySqlParser.SHA2 - 816)) | (1 << (MySqlParser.SIGN - 816)) | (1 << (MySqlParser.SIN - 816)) | (1 << (MySqlParser.SLEEP - 816)) | (1 << (MySqlParser.SOUNDEX - 816)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 816)) | (1 << (MySqlParser.SQRT - 816)) | (1 << (MySqlParser.SRID - 816)) | (1 << (MySqlParser.STARTPOINT - 816)) | (1 << (MySqlParser.STRCMP - 816)) | (1 << (MySqlParser.STR_TO_DATE - 816)) | (1 << (MySqlParser.ST_AREA - 816)) | (1 << (MySqlParser.ST_ASBINARY - 816)) | (1 << (MySqlParser.ST_ASTEXT - 816)) | (1 << (MySqlParser.ST_ASWKB - 816)) | (1 << (MySqlParser.ST_ASWKT - 816)) | (1 << (MySqlParser.ST_BUFFER - 816)) | (1 << (MySqlParser.ST_CENTROID - 816)) | (1 << (MySqlParser.ST_CONTAINS - 816)) | (1 << (MySqlParser.ST_CROSSES - 816)) | (1 << (MySqlParser.ST_DIFFERENCE - 816)) | (1 << (MySqlParser.ST_DIMENSION - 816)) | (1 << (MySqlParser.ST_DISJOINT - 816)) | (1 << (MySqlParser.ST_DISTANCE - 816)) | (1 << (MySqlParser.ST_ENDPOINT - 816)))) !== 0) || ((((_la - 848)) & ~0x1F) === 0 && ((1 << (_la - 848)) & ((1 << (MySqlParser.ST_ENVELOPE - 848)) | (1 << (MySqlParser.ST_EQUALS - 848)) | (1 << (MySqlParser.ST_EXTERIORRING - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 848)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 848)) | (1 << (MySqlParser.ST_GEOMETRYN - 848)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 848)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 848)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 848)) | (1 << (MySqlParser.ST_INTERIORRINGN - 848)) | (1 << (MySqlParser.ST_INTERSECTION - 848)) | (1 << (MySqlParser.ST_INTERSECTS - 848)) | (1 << (MySqlParser.ST_ISCLOSED - 848)) | (1 << (MySqlParser.ST_ISEMPTY - 848)) | (1 << (MySqlParser.ST_ISSIMPLE - 848)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINEFROMWKB - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 848)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 848)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 848)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 848)) | (1 << (MySqlParser.ST_NUMPOINTS - 848)) | (1 << (MySqlParser.ST_OVERLAPS - 848)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 848)) | (1 << (MySqlParser.ST_POINTFROMWKB - 848)) | (1 << (MySqlParser.ST_POINTN - 848)))) !== 0) || ((((_la - 880)) & ~0x1F) === 0 && ((1 << (_la - 880)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYFROMWKB - 880)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 880)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 880)) | (1 << (MySqlParser.ST_SRID - 880)) | (1 << (MySqlParser.ST_STARTPOINT - 880)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 880)) | (1 << (MySqlParser.ST_TOUCHES - 880)) | (1 << (MySqlParser.ST_UNION - 880)) | (1 << (MySqlParser.ST_WITHIN - 880)) | (1 << (MySqlParser.ST_X - 880)) | (1 << (MySqlParser.ST_Y - 880)) | (1 << (MySqlParser.SUBDATE - 880)) | (1 << (MySqlParser.SUBSTRING_INDEX - 880)) | (1 << (MySqlParser.SUBTIME - 880)) | (1 << (MySqlParser.SYSTEM_USER - 880)) | (1 << (MySqlParser.TAN - 880)) | (1 << (MySqlParser.TIMEDIFF - 880)) | (1 << (MySqlParser.TIMESTAMPADD - 880)) | (1 << (MySqlParser.TIMESTAMPDIFF - 880)) | (1 << (MySqlParser.TIME_FORMAT - 880)) | (1 << (MySqlParser.TIME_TO_SEC - 880)) | (1 << (MySqlParser.TOUCHES - 880)) | (1 << (MySqlParser.TO_BASE64 - 880)) | (1 << (MySqlParser.TO_DAYS - 880)) | (1 << (MySqlParser.TO_SECONDS - 880)) | (1 << (MySqlParser.UCASE - 880)) | (1 << (MySqlParser.UNCOMPRESS - 880)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 880)) | (1 << (MySqlParser.UNHEX - 880)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 880)) | (1 << (MySqlParser.UPDATEXML - 880)))) !== 0) || ((((_la - 912)) & ~0x1F) === 0 && ((1 << (_la - 912)) & ((1 << (MySqlParser.UPPER - 912)) | (1 << (MySqlParser.UUID - 912)) | (1 << (MySqlParser.UUID_SHORT - 912)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 912)) | (1 << (MySqlParser.VERSION - 912)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 912)) | (1 << (MySqlParser.WEEKDAY - 912)) | (1 << (MySqlParser.WEEKOFYEAR - 912)) | (1 << (MySqlParser.WEIGHT_STRING - 912)) | (1 << (MySqlParser.WITHIN - 912)) | (1 << (MySqlParser.YEARWEEK - 912)) | (1 << (MySqlParser.Y_FUNCTION - 912)) | (1 << (MySqlParser.X_FUNCTION - 912)))) !== 0) || ((((_la - 951)) & ~0x1F) === 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.LR_BRACKET - 951)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 951)) | (1 << (MySqlParser.STRING_LITERAL - 951)) | (1 << (MySqlParser.ID - 951)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 951)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let _localctx: AlterUserContext = new AlterUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, MySqlParser.RULE_alterUser);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4202;
				this.match(MySqlParser.ALTER);
				this.state = 4203;
				this.match(MySqlParser.USER);
				this.state = 4204;
				this.userSpecification();
				this.state = 4209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4205;
					this.match(MySqlParser.COMMA);
					this.state = 4206;
					this.userSpecification();
					}
					}
					this.state = 4211;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4212;
				this.match(MySqlParser.ALTER);
				this.state = 4213;
				this.match(MySqlParser.USER);
				this.state = 4215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4214;
					this.ifExists();
					}
				}

				this.state = 4217;
				this.userAuthOption();
				this.state = 4222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4218;
					this.match(MySqlParser.COMMA);
					this.state = 4219;
					this.userAuthOption();
					}
					}
					this.state = 4224;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.REQUIRE) {
					{
					this.state = 4225;
					this.match(MySqlParser.REQUIRE);
					this.state = 4237;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.NONE:
						{
						this.state = 4226;
						(_localctx as AlterUserMysqlV57Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case MySqlParser.SSL:
					case MySqlParser.CIPHER:
					case MySqlParser.ISSUER:
					case MySqlParser.SUBJECT:
					case MySqlParser.X509:
						{
						this.state = 4227;
						this.tlsOption();
						this.state = 4234;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 4229;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === MySqlParser.AND) {
									{
									this.state = 4228;
									this.match(MySqlParser.AND);
									}
								}

								this.state = 4231;
								this.tlsOption();
								}
								}
							}
							this.state = 4236;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 603, this._ctx);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4241;
					this.match(MySqlParser.WITH);
					this.state = 4243;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 4242;
							this.userResourceOption();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 4245;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 606, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 4253;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 4251;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case MySqlParser.PASSWORD:
							{
							this.state = 4249;
							this.userPasswordOption();
							}
							break;
						case MySqlParser.ACCOUNT:
							{
							this.state = 4250;
							this.userLockOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 4255;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let _localctx: CreateUserContext = new CreateUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, MySqlParser.RULE_createUser);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4312;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4258;
				this.match(MySqlParser.CREATE);
				this.state = 4259;
				this.match(MySqlParser.USER);
				this.state = 4260;
				this.userAuthOption();
				this.state = 4265;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4261;
					this.match(MySqlParser.COMMA);
					this.state = 4262;
					this.userAuthOption();
					}
					}
					this.state = 4267;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4268;
				this.match(MySqlParser.CREATE);
				this.state = 4269;
				this.match(MySqlParser.USER);
				this.state = 4271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4270;
					this.ifNotExists();
					}
				}

				this.state = 4273;
				this.userAuthOption();
				this.state = 4278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4274;
					this.match(MySqlParser.COMMA);
					this.state = 4275;
					this.userAuthOption();
					}
					}
					this.state = 4280;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4295;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.REQUIRE) {
					{
					this.state = 4281;
					this.match(MySqlParser.REQUIRE);
					this.state = 4293;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.NONE:
						{
						this.state = 4282;
						(_localctx as CreateUserMysqlV57Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case MySqlParser.SSL:
					case MySqlParser.CIPHER:
					case MySqlParser.ISSUER:
					case MySqlParser.SUBJECT:
					case MySqlParser.X509:
						{
						this.state = 4283;
						this.tlsOption();
						this.state = 4290;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 4285;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === MySqlParser.AND) {
									{
									this.state = 4284;
									this.match(MySqlParser.AND);
									}
								}

								this.state = 4287;
								this.tlsOption();
								}
								}
							}
							this.state = 4292;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4297;
					this.match(MySqlParser.WITH);
					this.state = 4299;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 4298;
							this.userResourceOption();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 4301;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 618, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 4309;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 621, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 4307;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case MySqlParser.PASSWORD:
							{
							this.state = 4305;
							this.userPasswordOption();
							}
							break;
						case MySqlParser.ACCOUNT:
							{
							this.state = 4306;
							this.userLockOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 4311;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 621, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let _localctx: DropUserContext = new DropUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, MySqlParser.RULE_dropUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4314;
			this.match(MySqlParser.DROP);
			this.state = 4315;
			this.match(MySqlParser.USER);
			this.state = 4317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 4316;
				this.ifExists();
				}
			}

			this.state = 4319;
			this.userName();
			this.state = 4324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4320;
				this.match(MySqlParser.COMMA);
				this.state = 4321;
				this.userName();
				}
				}
				this.state = 4326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantStatement(): GrantStatementContext {
		let _localctx: GrantStatementContext = new GrantStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, MySqlParser.RULE_grantStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4327;
			this.match(MySqlParser.GRANT);
			this.state = 4328;
			this.privelegeClause();
			this.state = 4333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4329;
				this.match(MySqlParser.COMMA);
				this.state = 4330;
				this.privelegeClause();
				}
				}
				this.state = 4335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4336;
			this.match(MySqlParser.ON);
			this.state = 4338;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 626, this._ctx) ) {
			case 1:
				{
				this.state = 4337;
				_localctx._privilegeObject = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.FUNCTION)) {
					_localctx._privilegeObject = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 4340;
			this.privilegeLevel();
			this.state = 4341;
			this.match(MySqlParser.TO);
			this.state = 4342;
			this.userAuthOption();
			this.state = 4347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4343;
				this.match(MySqlParser.COMMA);
				this.state = 4344;
				this.userAuthOption();
				}
				}
				this.state = 4349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.REQUIRE) {
				{
				this.state = 4350;
				this.match(MySqlParser.REQUIRE);
				this.state = 4362;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.NONE:
					{
					this.state = 4351;
					_localctx._tlsNone = this.match(MySqlParser.NONE);
					}
					break;
				case MySqlParser.SSL:
				case MySqlParser.CIPHER:
				case MySqlParser.ISSUER:
				case MySqlParser.SUBJECT:
				case MySqlParser.X509:
					{
					this.state = 4352;
					this.tlsOption();
					this.state = 4359;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4354;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MySqlParser.AND) {
								{
								this.state = 4353;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 4356;
							this.tlsOption();
							}
							}
						}
						this.state = 4361;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 4375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 4366;
				this.match(MySqlParser.WITH);
				this.state = 4372;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 4370;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case MySqlParser.GRANT:
							{
							this.state = 4367;
							this.match(MySqlParser.GRANT);
							this.state = 4368;
							this.match(MySqlParser.OPTION);
							}
							break;
						case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
						case MySqlParser.MAX_QUERIES_PER_HOUR:
						case MySqlParser.MAX_UPDATES_PER_HOUR:
						case MySqlParser.MAX_USER_CONNECTIONS:
							{
							this.state = 4369;
							this.userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 4374;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantProxy(): GrantProxyContext {
		let _localctx: GrantProxyContext = new GrantProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, MySqlParser.RULE_grantProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4377;
			this.match(MySqlParser.GRANT);
			this.state = 4378;
			this.match(MySqlParser.PROXY);
			this.state = 4379;
			this.match(MySqlParser.ON);
			this.state = 4380;
			_localctx._fromFirst = this.userName();
			this.state = 4381;
			this.match(MySqlParser.TO);
			this.state = 4382;
			_localctx._toFirst = this.userName();
			this.state = 4387;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4383;
				this.match(MySqlParser.COMMA);
				this.state = 4384;
				_localctx._userName = this.userName();
				_localctx._toOther.push(_localctx._userName);
				}
				}
				this.state = 4389;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 4390;
				this.match(MySqlParser.WITH);
				this.state = 4391;
				this.match(MySqlParser.GRANT);
				this.state = 4392;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let _localctx: RenameUserContext = new RenameUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, MySqlParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4395;
			this.match(MySqlParser.RENAME);
			this.state = 4396;
			this.match(MySqlParser.USER);
			this.state = 4397;
			this.renameUserClause();
			this.state = 4402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4398;
				this.match(MySqlParser.COMMA);
				this.state = 4399;
				this.renameUserClause();
				}
				}
				this.state = 4404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeStatement(): RevokeStatementContext {
		let _localctx: RevokeStatementContext = new RevokeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, MySqlParser.RULE_revokeStatement);
		let _la: number;
		try {
			this.state = 4445;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4405;
				this.match(MySqlParser.REVOKE);
				this.state = 4406;
				this.privelegeClause();
				this.state = 4411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4407;
					this.match(MySqlParser.COMMA);
					this.state = 4408;
					this.privelegeClause();
					}
					}
					this.state = 4413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4414;
				this.match(MySqlParser.ON);
				this.state = 4416;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
				case 1:
					{
					this.state = 4415;
					(_localctx as DetailRevokeContext)._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.FUNCTION)) {
						(_localctx as DetailRevokeContext)._privilegeObject = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4418;
				this.privilegeLevel();
				this.state = 4419;
				this.match(MySqlParser.FROM);
				this.state = 4420;
				this.userName();
				this.state = 4425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4421;
					this.match(MySqlParser.COMMA);
					this.state = 4422;
					this.userName();
					}
					}
					this.state = 4427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4428;
				this.match(MySqlParser.REVOKE);
				this.state = 4429;
				this.match(MySqlParser.ALL);
				this.state = 4431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIVILEGES) {
					{
					this.state = 4430;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				this.state = 4433;
				this.match(MySqlParser.COMMA);
				this.state = 4434;
				this.match(MySqlParser.GRANT);
				this.state = 4435;
				this.match(MySqlParser.OPTION);
				this.state = 4436;
				this.match(MySqlParser.FROM);
				this.state = 4437;
				this.userName();
				this.state = 4442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4438;
					this.match(MySqlParser.COMMA);
					this.state = 4439;
					this.userName();
					}
					}
					this.state = 4444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeProxy(): RevokeProxyContext {
		let _localctx: RevokeProxyContext = new RevokeProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, MySqlParser.RULE_revokeProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4447;
			this.match(MySqlParser.REVOKE);
			this.state = 4448;
			this.match(MySqlParser.PROXY);
			this.state = 4449;
			this.match(MySqlParser.ON);
			this.state = 4450;
			_localctx._onUser = this.userName();
			this.state = 4451;
			this.match(MySqlParser.FROM);
			this.state = 4452;
			_localctx._fromFirst = this.userName();
			this.state = 4457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4453;
				this.match(MySqlParser.COMMA);
				this.state = 4454;
				_localctx._userName = this.userName();
				_localctx._fromOther.push(_localctx._userName);
				}
				}
				this.state = 4459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setPasswordStatement(): SetPasswordStatementContext {
		let _localctx: SetPasswordStatementContext = new SetPasswordStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, MySqlParser.RULE_setPasswordStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4460;
			this.match(MySqlParser.SET);
			this.state = 4461;
			this.match(MySqlParser.PASSWORD);
			this.state = 4464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 4462;
				this.match(MySqlParser.FOR);
				this.state = 4463;
				this.userName();
				}
			}

			this.state = 4466;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 4469;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.PASSWORD:
				{
				this.state = 4467;
				this.passwordFunctionClause();
				}
				break;
			case MySqlParser.STRING_LITERAL:
				{
				this.state = 4468;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userSpecification(): UserSpecificationContext {
		let _localctx: UserSpecificationContext = new UserSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, MySqlParser.RULE_userSpecification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4471;
			this.userName();
			this.state = 4472;
			this.userPasswordOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userAuthOption(): UserAuthOptionContext {
		let _localctx: UserAuthOptionContext = new UserAuthOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, MySqlParser.RULE_userAuthOption);
		let _la: number;
		try {
			this.state = 4498;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4474;
				this.userName();
				this.state = 4475;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4476;
				this.match(MySqlParser.BY);
				this.state = 4477;
				this.match(MySqlParser.PASSWORD);
				this.state = 4478;
				(_localctx as PasswordAuthOptionContext)._hashed = this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4480;
				this.userName();
				this.state = 4481;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4482;
					this.match(MySqlParser.WITH);
					this.state = 4483;
					this.authPlugin();
					}
				}

				this.state = 4486;
				this.match(MySqlParser.BY);
				this.state = 4487;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4489;
				this.userName();
				this.state = 4490;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4491;
				this.match(MySqlParser.WITH);
				this.state = 4492;
				this.authPlugin();
				this.state = 4495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 4493;
					this.match(MySqlParser.AS);
					this.state = 4494;
					this.match(MySqlParser.STRING_LITERAL);
					}
				}

				}
				break;

			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4497;
				this.userName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tlsOption(): TlsOptionContext {
		let _localctx: TlsOptionContext = new TlsOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, MySqlParser.RULE_tlsOption);
		try {
			this.state = 4508;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SSL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4500;
				this.match(MySqlParser.SSL);
				}
				break;
			case MySqlParser.X509:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4501;
				this.match(MySqlParser.X509);
				}
				break;
			case MySqlParser.CIPHER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4502;
				this.match(MySqlParser.CIPHER);
				this.state = 4503;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ISSUER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4504;
				this.match(MySqlParser.ISSUER);
				this.state = 4505;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.SUBJECT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4506;
				this.match(MySqlParser.SUBJECT);
				this.state = 4507;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userResourceOption(): UserResourceOptionContext {
		let _localctx: UserResourceOptionContext = new UserResourceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, MySqlParser.RULE_userResourceOption);
		try {
			this.state = 4518;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.MAX_QUERIES_PER_HOUR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4510;
				this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
				this.state = 4511;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_UPDATES_PER_HOUR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4512;
				this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
				this.state = 4513;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4514;
				this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
				this.state = 4515;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_USER_CONNECTIONS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4516;
				this.match(MySqlParser.MAX_USER_CONNECTIONS);
				this.state = 4517;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userPasswordOption(): UserPasswordOptionContext {
		let _localctx: UserPasswordOptionContext = new UserPasswordOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, MySqlParser.RULE_userPasswordOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4520;
			this.match(MySqlParser.PASSWORD);
			this.state = 4521;
			this.match(MySqlParser.EXPIRE);
			this.state = 4528;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 652, this._ctx) ) {
			case 1:
				{
				this.state = 4522;
				_localctx._expireType = this.match(MySqlParser.DEFAULT);
				}
				break;

			case 2:
				{
				this.state = 4523;
				_localctx._expireType = this.match(MySqlParser.NEVER);
				}
				break;

			case 3:
				{
				this.state = 4524;
				_localctx._expireType = this.match(MySqlParser.INTERVAL);
				this.state = 4525;
				this.decimalLiteral();
				this.state = 4526;
				this.match(MySqlParser.DAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userLockOption(): UserLockOptionContext {
		let _localctx: UserLockOptionContext = new UserLockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, MySqlParser.RULE_userLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4530;
			this.match(MySqlParser.ACCOUNT);
			this.state = 4531;
			_localctx._lockType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.LOCK || _la === MySqlParser.UNLOCK)) {
				_localctx._lockType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privelegeClause(): PrivelegeClauseContext {
		let _localctx: PrivelegeClauseContext = new PrivelegeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, MySqlParser.RULE_privelegeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4533;
			this.privilege();
			this.state = 4538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 4534;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4535;
				this.uidList();
				this.state = 4536;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, MySqlParser.RULE_privilege);
		let _la: number;
		try {
			this.state = 4582;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4540;
				this.match(MySqlParser.ALL);
				this.state = 4542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIVILEGES) {
					{
					this.state = 4541;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				}
				break;
			case MySqlParser.ALTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4544;
				this.match(MySqlParser.ALTER);
				this.state = 4546;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ROUTINE) {
					{
					this.state = 4545;
					this.match(MySqlParser.ROUTINE);
					}
				}

				}
				break;
			case MySqlParser.CREATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4548;
				this.match(MySqlParser.CREATE);
				this.state = 4555;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.TEMPORARY:
					{
					this.state = 4549;
					this.match(MySqlParser.TEMPORARY);
					this.state = 4550;
					this.match(MySqlParser.TABLES);
					}
					break;
				case MySqlParser.ROUTINE:
					{
					this.state = 4551;
					this.match(MySqlParser.ROUTINE);
					}
					break;
				case MySqlParser.VIEW:
					{
					this.state = 4552;
					this.match(MySqlParser.VIEW);
					}
					break;
				case MySqlParser.USER:
					{
					this.state = 4553;
					this.match(MySqlParser.USER);
					}
					break;
				case MySqlParser.TABLESPACE:
					{
					this.state = 4554;
					this.match(MySqlParser.TABLESPACE);
					}
					break;
				case MySqlParser.ON:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case MySqlParser.DELETE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4557;
				this.match(MySqlParser.DELETE);
				}
				break;
			case MySqlParser.DROP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4558;
				this.match(MySqlParser.DROP);
				}
				break;
			case MySqlParser.EVENT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4559;
				this.match(MySqlParser.EVENT);
				}
				break;
			case MySqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4560;
				this.match(MySqlParser.EXECUTE);
				}
				break;
			case MySqlParser.FILE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4561;
				this.match(MySqlParser.FILE);
				}
				break;
			case MySqlParser.GRANT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4562;
				this.match(MySqlParser.GRANT);
				this.state = 4563;
				this.match(MySqlParser.OPTION);
				}
				break;
			case MySqlParser.INDEX:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4564;
				this.match(MySqlParser.INDEX);
				}
				break;
			case MySqlParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4565;
				this.match(MySqlParser.INSERT);
				}
				break;
			case MySqlParser.LOCK:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4566;
				this.match(MySqlParser.LOCK);
				this.state = 4567;
				this.match(MySqlParser.TABLES);
				}
				break;
			case MySqlParser.PROCESS:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4568;
				this.match(MySqlParser.PROCESS);
				}
				break;
			case MySqlParser.PROXY:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4569;
				this.match(MySqlParser.PROXY);
				}
				break;
			case MySqlParser.REFERENCES:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4570;
				this.match(MySqlParser.REFERENCES);
				}
				break;
			case MySqlParser.RELOAD:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4571;
				this.match(MySqlParser.RELOAD);
				}
				break;
			case MySqlParser.REPLICATION:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4572;
				this.match(MySqlParser.REPLICATION);
				this.state = 4573;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CLIENT || _la === MySqlParser.SLAVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SELECT:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4574;
				this.match(MySqlParser.SELECT);
				}
				break;
			case MySqlParser.SHOW:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4575;
				this.match(MySqlParser.SHOW);
				this.state = 4576;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASES || _la === MySqlParser.VIEW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SHUTDOWN:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4577;
				this.match(MySqlParser.SHUTDOWN);
				}
				break;
			case MySqlParser.SUPER:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4578;
				this.match(MySqlParser.SUPER);
				}
				break;
			case MySqlParser.TRIGGER:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4579;
				this.match(MySqlParser.TRIGGER);
				}
				break;
			case MySqlParser.UPDATE:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4580;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case MySqlParser.USAGE:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4581;
				this.match(MySqlParser.USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeLevel(): PrivilegeLevelContext {
		let _localctx: PrivilegeLevelContext = new PrivilegeLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, MySqlParser.RULE_privilegeLevel);
		try {
			this.state = 4597;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 658, this._ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4584;
				this.match(MySqlParser.STAR);
				}
				break;

			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4585;
				this.match(MySqlParser.STAR);
				this.state = 4586;
				this.match(MySqlParser.DOT);
				this.state = 4587;
				this.match(MySqlParser.STAR);
				}
				break;

			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4588;
				this.uid();
				this.state = 4589;
				this.match(MySqlParser.DOT);
				this.state = 4590;
				this.match(MySqlParser.STAR);
				}
				break;

			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4592;
				this.uid();
				this.state = 4593;
				this.match(MySqlParser.DOT);
				this.state = 4594;
				this.uid();
				}
				break;

			case 5:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4596;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUserClause(): RenameUserClauseContext {
		let _localctx: RenameUserClauseContext = new RenameUserClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, MySqlParser.RULE_renameUserClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4599;
			_localctx._fromFirst = this.userName();
			this.state = 4600;
			this.match(MySqlParser.TO);
			this.state = 4601;
			_localctx._toFirst = this.userName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeTable(): AnalyzeTableContext {
		let _localctx: AnalyzeTableContext = new AnalyzeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, MySqlParser.RULE_analyzeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4603;
			this.match(MySqlParser.ANALYZE);
			this.state = 4605;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4604;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4607;
			this.match(MySqlParser.TABLE);
			this.state = 4608;
			this.tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTable(): CheckTableContext {
		let _localctx: CheckTableContext = new CheckTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, MySqlParser.RULE_checkTable);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4610;
			this.match(MySqlParser.CHECK);
			this.state = 4611;
			this.match(MySqlParser.TABLE);
			this.state = 4612;
			this.tables();
			this.state = 4616;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 660, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4613;
					this.checkTableOption();
					}
					}
				}
				this.state = 4618;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 660, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checksumTable(): ChecksumTableContext {
		let _localctx: ChecksumTableContext = new ChecksumTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, MySqlParser.RULE_checksumTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4619;
			this.match(MySqlParser.CHECKSUM);
			this.state = 4620;
			this.match(MySqlParser.TABLE);
			this.state = 4621;
			this.tables();
			this.state = 4623;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
			case 1:
				{
				this.state = 4622;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.EXTENDED || _la === MySqlParser.QUICK)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optimizeTable(): OptimizeTableContext {
		let _localctx: OptimizeTableContext = new OptimizeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, MySqlParser.RULE_optimizeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4625;
			this.match(MySqlParser.OPTIMIZE);
			this.state = 4627;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4626;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4629;
			this.match(MySqlParser.TABLE);
			this.state = 4630;
			this.tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repairTable(): RepairTableContext {
		let _localctx: RepairTableContext = new RepairTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, MySqlParser.RULE_repairTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4632;
			this.match(MySqlParser.REPAIR);
			this.state = 4634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4633;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4636;
			this.match(MySqlParser.TABLE);
			this.state = 4637;
			this.tables();
			this.state = 4639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 664, this._ctx) ) {
			case 1:
				{
				this.state = 4638;
				this.match(MySqlParser.QUICK);
				}
				break;
			}
			this.state = 4642;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
			case 1:
				{
				this.state = 4641;
				this.match(MySqlParser.EXTENDED);
				}
				break;
			}
			this.state = 4645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USE_FRM) {
				{
				this.state = 4644;
				this.match(MySqlParser.USE_FRM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTableOption(): CheckTableOptionContext {
		let _localctx: CheckTableOptionContext = new CheckTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, MySqlParser.RULE_checkTableOption);
		try {
			this.state = 4654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4647;
				this.match(MySqlParser.FOR);
				this.state = 4648;
				this.match(MySqlParser.UPGRADE);
				}
				break;
			case MySqlParser.QUICK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4649;
				this.match(MySqlParser.QUICK);
				}
				break;
			case MySqlParser.FAST:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4650;
				this.match(MySqlParser.FAST);
				}
				break;
			case MySqlParser.MEDIUM:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4651;
				this.match(MySqlParser.MEDIUM);
				}
				break;
			case MySqlParser.EXTENDED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4652;
				this.match(MySqlParser.EXTENDED);
				}
				break;
			case MySqlParser.CHANGED:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4653;
				this.match(MySqlParser.CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUdfunction(): CreateUdfunctionContext {
		let _localctx: CreateUdfunctionContext = new CreateUdfunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, MySqlParser.RULE_createUdfunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4656;
			this.match(MySqlParser.CREATE);
			this.state = 4658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AGGREGATE) {
				{
				this.state = 4657;
				this.match(MySqlParser.AGGREGATE);
				}
			}

			this.state = 4660;
			this.match(MySqlParser.FUNCTION);
			this.state = 4661;
			this.uid();
			this.state = 4662;
			this.match(MySqlParser.RETURNS);
			this.state = 4663;
			_localctx._returnType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & ((1 << (MySqlParser.INTEGER - 176)) | (1 << (MySqlParser.REAL - 176)) | (1 << (MySqlParser.DECIMAL - 176)))) !== 0) || _la === MySqlParser.STRING)) {
				_localctx._returnType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4664;
			this.match(MySqlParser.SONAME);
			this.state = 4665;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installPlugin(): InstallPluginContext {
		let _localctx: InstallPluginContext = new InstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, MySqlParser.RULE_installPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4667;
			this.match(MySqlParser.INSTALL);
			this.state = 4668;
			this.match(MySqlParser.PLUGIN);
			this.state = 4669;
			this.uid();
			this.state = 4670;
			this.match(MySqlParser.SONAME);
			this.state = 4671;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uninstallPlugin(): UninstallPluginContext {
		let _localctx: UninstallPluginContext = new UninstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, MySqlParser.RULE_uninstallPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4673;
			this.match(MySqlParser.UNINSTALL);
			this.state = 4674;
			this.match(MySqlParser.PLUGIN);
			this.state = 4675;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, MySqlParser.RULE_setStatement);
		let _la: number;
		try {
			this.state = 4714;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 674, this._ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4677;
				this.match(MySqlParser.SET);
				this.state = 4678;
				this.variableClause();
				this.state = 4679;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4680;
				this.expression(0);
				this.state = 4688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4681;
					this.match(MySqlParser.COMMA);
					this.state = 4682;
					this.variableClause();
					this.state = 4683;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 4684;
					this.expression(0);
					}
					}
					this.state = 4690;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SetCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4691;
				this.match(MySqlParser.SET);
				this.state = 4695;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 4692;
					this.match(MySqlParser.CHARACTER);
					this.state = 4693;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 4694;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4699;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 4697;
					this.charsetName();
					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 4698;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new SetNamesContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4701;
				this.match(MySqlParser.SET);
				this.state = 4702;
				this.match(MySqlParser.NAMES);
				this.state = 4709;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 4703;
					this.charsetName();
					this.state = 4706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.COLLATE) {
						{
						this.state = 4704;
						this.match(MySqlParser.COLLATE);
						this.state = 4705;
						this.collationName();
						}
					}

					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 4708;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new SetPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4711;
				this.setPasswordStatement();
				}
				break;

			case 5:
				_localctx = new SetTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4712;
				this.setTransactionStatement();
				}
				break;

			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4713;
				this.setAutocommitStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let _localctx: ShowStatementContext = new ShowStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, MySqlParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 4867;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 696, this._ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4716;
				this.match(MySqlParser.SHOW);
				this.state = 4717;
				(_localctx as ShowMasterLogsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINARY || _la === MySqlParser.MASTER)) {
					(_localctx as ShowMasterLogsContext)._logFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4718;
				this.match(MySqlParser.LOGS);
				}
				break;

			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4719;
				this.match(MySqlParser.SHOW);
				this.state = 4720;
				(_localctx as ShowLogEventsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINLOG || _la === MySqlParser.RELAYLOG)) {
					(_localctx as ShowLogEventsContext)._logFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4721;
				this.match(MySqlParser.EVENTS);
				this.state = 4724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IN) {
					{
					this.state = 4722;
					this.match(MySqlParser.IN);
					this.state = 4723;
					(_localctx as ShowLogEventsContext)._filename = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 4728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 4726;
					this.match(MySqlParser.FROM);
					this.state = 4727;
					(_localctx as ShowLogEventsContext)._fromPosition = this.decimalLiteral();
					}
				}

				this.state = 4737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 4730;
					this.match(MySqlParser.LIMIT);
					this.state = 4734;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 677, this._ctx) ) {
					case 1:
						{
						this.state = 4731;
						(_localctx as ShowLogEventsContext)._offset = this.decimalLiteral();
						this.state = 4732;
						this.match(MySqlParser.COMMA);
						}
						break;
					}
					this.state = 4736;
					(_localctx as ShowLogEventsContext)._rowCount = this.decimalLiteral();
					}
				}

				}
				break;

			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4739;
				this.match(MySqlParser.SHOW);
				this.state = 4740;
				this.showCommonEntity();
				this.state = 4742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4741;
					this.showFilter();
					}
				}

				}
				break;

			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4744;
				this.match(MySqlParser.SHOW);
				this.state = 4746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 4745;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 4748;
				(_localctx as ShowColumnsContext)._columnsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
					(_localctx as ShowColumnsContext)._columnsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4749;
				(_localctx as ShowColumnsContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
					(_localctx as ShowColumnsContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4750;
				this.tableName();
				this.state = 4753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4751;
					(_localctx as ShowColumnsContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowColumnsContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4752;
					this.uid();
					}
				}

				this.state = 4756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4755;
					this.showFilter();
					}
				}

				}
				break;

			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4758;
				this.match(MySqlParser.SHOW);
				this.state = 4759;
				this.match(MySqlParser.CREATE);
				this.state = 4760;
				(_localctx as ShowCreateDbContext)._schemaFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as ShowCreateDbContext)._schemaFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4761;
					this.ifNotExists();
					}
				}

				this.state = 4764;
				this.uid();
				}
				break;

			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4765;
				this.match(MySqlParser.SHOW);
				this.state = 4766;
				this.match(MySqlParser.CREATE);
				this.state = 4767;
				(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.TRIGGER || _la === MySqlParser.EVENT || _la === MySqlParser.FUNCTION || _la === MySqlParser.VIEW)) {
					(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4768;
				this.fullId();
				}
				break;

			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4769;
				this.match(MySqlParser.SHOW);
				this.state = 4770;
				this.match(MySqlParser.CREATE);
				this.state = 4771;
				this.match(MySqlParser.USER);
				this.state = 4772;
				this.userName();
				}
				break;

			case 8:
				_localctx = new ShowEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4773;
				this.match(MySqlParser.SHOW);
				this.state = 4774;
				this.match(MySqlParser.ENGINE);
				this.state = 4775;
				this.engineName();
				this.state = 4776;
				(_localctx as ShowEngineContext)._engineOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MUTEX || _la === MySqlParser.STATUS)) {
					(_localctx as ShowEngineContext)._engineOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4778;
				this.match(MySqlParser.SHOW);
				this.state = 4779;
				this.showGlobalInfoClause();
				}
				break;

			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4780;
				this.match(MySqlParser.SHOW);
				this.state = 4781;
				(_localctx as ShowErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ERRORS || _la === MySqlParser.WARNINGS)) {
					(_localctx as ShowErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				{
				this.state = 4782;
				this.match(MySqlParser.LIMIT);
				this.state = 4786;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
				case 1:
					{
					this.state = 4783;
					(_localctx as ShowErrorsContext)._offset = this.decimalLiteral();
					this.state = 4784;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 4788;
				(_localctx as ShowErrorsContext)._rowCount = this.decimalLiteral();
				}
				}
				break;

			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4789;
				this.match(MySqlParser.SHOW);
				this.state = 4790;
				this.match(MySqlParser.COUNT);
				this.state = 4791;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4792;
				this.match(MySqlParser.STAR);
				this.state = 4793;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 4794;
				(_localctx as ShowCountErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ERRORS || _la === MySqlParser.WARNINGS)) {
					(_localctx as ShowCountErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4795;
				this.match(MySqlParser.SHOW);
				this.state = 4796;
				this.showSchemaEntity();
				this.state = 4799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4797;
					(_localctx as ShowSchemaFilterContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowSchemaFilterContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4798;
					this.uid();
					}
				}

				this.state = 4802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4801;
					this.showFilter();
					}
				}

				}
				break;

			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4804;
				this.match(MySqlParser.SHOW);
				this.state = 4805;
				(_localctx as ShowRoutineContext)._routine = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.FUNCTION)) {
					(_localctx as ShowRoutineContext)._routine = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4806;
				this.match(MySqlParser.CODE);
				this.state = 4807;
				this.fullId();
				}
				break;

			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4808;
				this.match(MySqlParser.SHOW);
				this.state = 4809;
				this.match(MySqlParser.GRANTS);
				this.state = 4812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4810;
					this.match(MySqlParser.FOR);
					this.state = 4811;
					this.userName();
					}
				}

				}
				break;

			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4814;
				this.match(MySqlParser.SHOW);
				this.state = 4815;
				(_localctx as ShowIndexesContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEYS || _la === MySqlParser.INDEXES)) {
					(_localctx as ShowIndexesContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4816;
				(_localctx as ShowIndexesContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
					(_localctx as ShowIndexesContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4817;
				this.tableName();
				this.state = 4820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4818;
					(_localctx as ShowIndexesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowIndexesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4819;
					this.uid();
					}
				}

				this.state = 4824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WHERE) {
					{
					this.state = 4822;
					this.match(MySqlParser.WHERE);
					this.state = 4823;
					this.expression(0);
					}
				}

				}
				break;

			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4826;
				this.match(MySqlParser.SHOW);
				this.state = 4827;
				this.match(MySqlParser.OPEN);
				this.state = 4828;
				this.match(MySqlParser.TABLES);
				this.state = 4831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4829;
					(_localctx as ShowOpenTablesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowOpenTablesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4830;
					this.uid();
					}
				}

				this.state = 4834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4833;
					this.showFilter();
					}
				}

				}
				break;

			case 17:
				_localctx = new ShowProfileContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4836;
				this.match(MySqlParser.SHOW);
				this.state = 4837;
				this.match(MySqlParser.PROFILE);
				this.state = 4838;
				this.showProfileType();
				this.state = 4843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4839;
					this.match(MySqlParser.COMMA);
					this.state = 4840;
					this.showProfileType();
					}
					}
					this.state = 4845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4846;
					this.match(MySqlParser.FOR);
					this.state = 4847;
					this.match(MySqlParser.QUERY);
					this.state = 4848;
					(_localctx as ShowProfileContext)._queryCount = this.decimalLiteral();
					}
				}

				{
				this.state = 4851;
				this.match(MySqlParser.LIMIT);
				this.state = 4855;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 694, this._ctx) ) {
				case 1:
					{
					this.state = 4852;
					(_localctx as ShowProfileContext)._offset = this.decimalLiteral();
					this.state = 4853;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 4857;
				(_localctx as ShowProfileContext)._rowCount = this.decimalLiteral();
				}
				}
				break;

			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4859;
				this.match(MySqlParser.SHOW);
				this.state = 4860;
				this.match(MySqlParser.SLAVE);
				this.state = 4861;
				this.match(MySqlParser.STATUS);
				this.state = 4865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4862;
					this.match(MySqlParser.FOR);
					this.state = 4863;
					this.match(MySqlParser.CHANNEL);
					this.state = 4864;
					this.match(MySqlParser.STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableClause(): VariableClauseContext {
		let _localctx: VariableClauseContext = new VariableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, MySqlParser.RULE_variableClause);
		let _la: number;
		try {
			this.state = 4879;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4869;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			case MySqlParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4870;
				this.match(MySqlParser.GLOBAL_ID);
				}
				break;
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.AT_SIGN:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4876;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 698, this._ctx) ) {
				case 1:
					{
					this.state = 4873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AT_SIGN) {
						{
						this.state = 4871;
						this.match(MySqlParser.AT_SIGN);
						this.state = 4872;
						this.match(MySqlParser.AT_SIGN);
						}
					}

					this.state = 4875;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4878;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCommonEntity(): ShowCommonEntityContext {
		let _localctx: ShowCommonEntityContext = new ShowCommonEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, MySqlParser.RULE_showCommonEntity);
		let _la: number;
		try {
			this.state = 4894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CHARACTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4881;
				this.match(MySqlParser.CHARACTER);
				this.state = 4882;
				this.match(MySqlParser.SET);
				}
				break;
			case MySqlParser.COLLATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4883;
				this.match(MySqlParser.COLLATION);
				}
				break;
			case MySqlParser.DATABASES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4884;
				this.match(MySqlParser.DATABASES);
				}
				break;
			case MySqlParser.SCHEMAS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4885;
				this.match(MySqlParser.SCHEMAS);
				}
				break;
			case MySqlParser.FUNCTION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4886;
				this.match(MySqlParser.FUNCTION);
				this.state = 4887;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.PROCEDURE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4888;
				this.match(MySqlParser.PROCEDURE);
				this.state = 4889;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.GLOBAL:
			case MySqlParser.SESSION:
			case MySqlParser.STATUS:
			case MySqlParser.VARIABLES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION) {
					{
					this.state = 4890;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4893;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.STATUS || _la === MySqlParser.VARIABLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFilter(): ShowFilterContext {
		let _localctx: ShowFilterContext = new ShowFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, MySqlParser.RULE_showFilter);
		try {
			this.state = 4900;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LIKE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4896;
				this.match(MySqlParser.LIKE);
				this.state = 4897;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.WHERE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4898;
				this.match(MySqlParser.WHERE);
				this.state = 4899;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		let _localctx: ShowGlobalInfoClauseContext = new ShowGlobalInfoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, MySqlParser.RULE_showGlobalInfoClause);
		let _la: number;
		try {
			this.state = 4919;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ENGINES:
			case MySqlParser.STORAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORAGE) {
					{
					this.state = 4902;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 4905;
				this.match(MySqlParser.ENGINES);
				}
				break;
			case MySqlParser.MASTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4906;
				this.match(MySqlParser.MASTER);
				this.state = 4907;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.PLUGINS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4908;
				this.match(MySqlParser.PLUGINS);
				}
				break;
			case MySqlParser.PRIVILEGES:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4909;
				this.match(MySqlParser.PRIVILEGES);
				}
				break;
			case MySqlParser.FULL:
			case MySqlParser.PROCESSLIST:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 4910;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 4913;
				this.match(MySqlParser.PROCESSLIST);
				}
				break;
			case MySqlParser.PROFILES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4914;
				this.match(MySqlParser.PROFILES);
				}
				break;
			case MySqlParser.SLAVE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4915;
				this.match(MySqlParser.SLAVE);
				this.state = 4916;
				this.match(MySqlParser.HOSTS);
				}
				break;
			case MySqlParser.AUTHORS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4917;
				this.match(MySqlParser.AUTHORS);
				}
				break;
			case MySqlParser.CONTRIBUTORS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4918;
				this.match(MySqlParser.CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSchemaEntity(): ShowSchemaEntityContext {
		let _localctx: ShowSchemaEntityContext = new ShowSchemaEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, MySqlParser.RULE_showSchemaEntity);
		let _la: number;
		try {
			this.state = 4929;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.EVENTS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4921;
				this.match(MySqlParser.EVENTS);
				}
				break;
			case MySqlParser.TABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4922;
				this.match(MySqlParser.TABLE);
				this.state = 4923;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.FULL:
			case MySqlParser.TABLES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 4924;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 4927;
				this.match(MySqlParser.TABLES);
				}
				break;
			case MySqlParser.TRIGGERS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4928;
				this.match(MySqlParser.TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProfileType(): ShowProfileTypeContext {
		let _localctx: ShowProfileTypeContext = new ShowProfileTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, MySqlParser.RULE_showProfileType);
		try {
			this.state = 4943;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4931;
				this.match(MySqlParser.ALL);
				}
				break;
			case MySqlParser.BLOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4932;
				this.match(MySqlParser.BLOCK);
				this.state = 4933;
				this.match(MySqlParser.IO);
				}
				break;
			case MySqlParser.CONTEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4934;
				this.match(MySqlParser.CONTEXT);
				this.state = 4935;
				this.match(MySqlParser.SWITCHES);
				}
				break;
			case MySqlParser.CPU:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4936;
				this.match(MySqlParser.CPU);
				}
				break;
			case MySqlParser.IPC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4937;
				this.match(MySqlParser.IPC);
				}
				break;
			case MySqlParser.MEMORY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4938;
				this.match(MySqlParser.MEMORY);
				}
				break;
			case MySqlParser.PAGE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4939;
				this.match(MySqlParser.PAGE);
				this.state = 4940;
				this.match(MySqlParser.FAULTS);
				}
				break;
			case MySqlParser.SOURCE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4941;
				this.match(MySqlParser.SOURCE);
				}
				break;
			case MySqlParser.SWAPS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4942;
				this.match(MySqlParser.SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binlogStatement(): BinlogStatementContext {
		let _localctx: BinlogStatementContext = new BinlogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, MySqlParser.RULE_binlogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4945;
			this.match(MySqlParser.BINLOG);
			this.state = 4946;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cacheIndexStatement(): CacheIndexStatementContext {
		let _localctx: CacheIndexStatementContext = new CacheIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, MySqlParser.RULE_cacheIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4948;
			this.match(MySqlParser.CACHE);
			this.state = 4949;
			this.match(MySqlParser.INDEX);
			this.state = 4950;
			this.tableIndexes();
			this.state = 4955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4951;
				this.match(MySqlParser.COMMA);
				this.state = 4952;
				this.tableIndexes();
				}
				}
				this.state = 4957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4965;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 4958;
				this.match(MySqlParser.PARTITION);
				this.state = 4959;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4962;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 4960;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 4961;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4964;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 4967;
			this.match(MySqlParser.IN);
			this.state = 4968;
			_localctx._schema = this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushStatement(): FlushStatementContext {
		let _localctx: FlushStatementContext = new FlushStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, MySqlParser.RULE_flushStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4970;
			this.match(MySqlParser.FLUSH);
			this.state = 4972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4971;
				_localctx._flushFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._flushFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4974;
			this.flushOption();
			this.state = 4979;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4975;
				this.match(MySqlParser.COMMA);
				this.state = 4976;
				this.flushOption();
				}
				}
				this.state = 4981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killStatement(): KillStatementContext {
		let _localctx: KillStatementContext = new KillStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, MySqlParser.RULE_killStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4982;
			this.match(MySqlParser.KILL);
			this.state = 4984;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CONNECTION || _la === MySqlParser.QUERY) {
				{
				this.state = 4983;
				_localctx._connectionFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CONNECTION || _la === MySqlParser.QUERY)) {
					_localctx._connectionFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4986;
				this.decimalLiteral();
				}
				}
				this.state = 4989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadIndexIntoCache(): LoadIndexIntoCacheContext {
		let _localctx: LoadIndexIntoCacheContext = new LoadIndexIntoCacheContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, MySqlParser.RULE_loadIndexIntoCache);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4991;
			this.match(MySqlParser.LOAD);
			this.state = 4992;
			this.match(MySqlParser.INDEX);
			this.state = 4993;
			this.match(MySqlParser.INTO);
			this.state = 4994;
			this.match(MySqlParser.CACHE);
			this.state = 4995;
			this.loadedTableIndexes();
			this.state = 5000;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4996;
				this.match(MySqlParser.COMMA);
				this.state = 4997;
				this.loadedTableIndexes();
				}
				}
				this.state = 5002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetStatement(): ResetStatementContext {
		let _localctx: ResetStatementContext = new ResetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, MySqlParser.RULE_resetStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5003;
			this.match(MySqlParser.RESET);
			this.state = 5004;
			this.match(MySqlParser.QUERY);
			this.state = 5005;
			this.match(MySqlParser.CACHE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shutdownStatement(): ShutdownStatementContext {
		let _localctx: ShutdownStatementContext = new ShutdownStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, MySqlParser.RULE_shutdownStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5007;
			this.match(MySqlParser.SHUTDOWN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableIndexes(): TableIndexesContext {
		let _localctx: TableIndexesContext = new TableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, MySqlParser.RULE_tableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5009;
			this.tableName();
			this.state = 5017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY || _la === MySqlParser.LR_BRACKET) {
				{
				this.state = 5011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 5010;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5013;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5014;
				this.uidList();
				this.state = 5015;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let _localctx: FlushOptionContext = new FlushOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, MySqlParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 5049;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 724, this._ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5037;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DES_KEY_FILE:
					{
					this.state = 5019;
					this.match(MySqlParser.DES_KEY_FILE);
					}
					break;
				case MySqlParser.HOSTS:
					{
					this.state = 5020;
					this.match(MySqlParser.HOSTS);
					}
					break;
				case MySqlParser.BINARY:
				case MySqlParser.ENGINE:
				case MySqlParser.ERROR:
				case MySqlParser.GENERAL:
				case MySqlParser.LOGS:
				case MySqlParser.RELAY:
				case MySqlParser.SLOW:
					{
					this.state = 5022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.BINARY || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.GENERAL - 313)))) !== 0) || _la === MySqlParser.RELAY || _la === MySqlParser.SLOW) {
						{
						this.state = 5021;
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.BINARY || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MySqlParser.ENGINE - 313)) | (1 << (MySqlParser.ERROR - 313)) | (1 << (MySqlParser.GENERAL - 313)))) !== 0) || _la === MySqlParser.RELAY || _la === MySqlParser.SLOW)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 5024;
					this.match(MySqlParser.LOGS);
					}
					break;
				case MySqlParser.OPTIMIZER_COSTS:
					{
					this.state = 5025;
					this.match(MySqlParser.OPTIMIZER_COSTS);
					}
					break;
				case MySqlParser.PRIVILEGES:
					{
					this.state = 5026;
					this.match(MySqlParser.PRIVILEGES);
					}
					break;
				case MySqlParser.QUERY:
					{
					this.state = 5027;
					this.match(MySqlParser.QUERY);
					this.state = 5028;
					this.match(MySqlParser.CACHE);
					}
					break;
				case MySqlParser.STATUS:
					{
					this.state = 5029;
					this.match(MySqlParser.STATUS);
					}
					break;
				case MySqlParser.USER_RESOURCES:
					{
					this.state = 5030;
					this.match(MySqlParser.USER_RESOURCES);
					}
					break;
				case MySqlParser.TABLES:
					{
					this.state = 5031;
					this.match(MySqlParser.TABLES);
					this.state = 5035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.WITH) {
						{
						this.state = 5032;
						this.match(MySqlParser.WITH);
						this.state = 5033;
						this.match(MySqlParser.READ);
						this.state = 5034;
						this.match(MySqlParser.LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5039;
				this.match(MySqlParser.RELAY);
				this.state = 5040;
				this.match(MySqlParser.LOGS);
				this.state = 5042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 5041;
					this.channelOption();
					}
				}

				}
				break;

			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5044;
				this.match(MySqlParser.TABLES);
				this.state = 5045;
				this.tables();
				this.state = 5047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR || _la === MySqlParser.WITH) {
					{
					this.state = 5046;
					this.flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushTableOption(): FlushTableOptionContext {
		let _localctx: FlushTableOptionContext = new FlushTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, MySqlParser.RULE_flushTableOption);
		try {
			this.state = 5056;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5051;
				this.match(MySqlParser.WITH);
				this.state = 5052;
				this.match(MySqlParser.READ);
				this.state = 5053;
				this.match(MySqlParser.LOCK);
				}
				break;
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5054;
				this.match(MySqlParser.FOR);
				this.state = 5055;
				this.match(MySqlParser.EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadedTableIndexes(): LoadedTableIndexesContext {
		let _localctx: LoadedTableIndexesContext = new LoadedTableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, MySqlParser.RULE_loadedTableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5058;
			this.tableName();
			this.state = 5066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 5059;
				this.match(MySqlParser.PARTITION);
				this.state = 5060;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5063;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 5061;
					_localctx._partitionList = this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 5062;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5065;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 5075;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 729, this._ctx) ) {
			case 1:
				{
				this.state = 5069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 5068;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5071;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5072;
				_localctx._indexList = this.uidList();
				this.state = 5073;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 5079;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 5077;
				this.match(MySqlParser.IGNORE);
				this.state = 5078;
				this.match(MySqlParser.LEAVES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleDescribeStatement(): SimpleDescribeStatementContext {
		let _localctx: SimpleDescribeStatementContext = new SimpleDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, MySqlParser.RULE_simpleDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5081;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5082;
			this.tableName();
			this.state = 5085;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 731, this._ctx) ) {
			case 1:
				{
				this.state = 5083;
				_localctx._column = this.uid();
				}
				break;

			case 2:
				{
				this.state = 5084;
				_localctx._pattern = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullDescribeStatement(): FullDescribeStatementContext {
		let _localctx: FullDescribeStatementContext = new FullDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, MySqlParser.RULE_fullDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5087;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENDED || _la === MySqlParser.PARTITIONS || _la === MySqlParser.FORMAT) {
				{
				this.state = 5088;
				_localctx._formatType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.EXTENDED || _la === MySqlParser.PARTITIONS || _la === MySqlParser.FORMAT)) {
					_localctx._formatType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5089;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 5090;
				_localctx._formatValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.JSON || _la === MySqlParser.TRADITIONAL)) {
					_localctx._formatValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5093;
			this.describeObjectClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public helpStatement(): HelpStatementContext {
		let _localctx: HelpStatementContext = new HelpStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, MySqlParser.RULE_helpStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5095;
			this.match(MySqlParser.HELP);
			this.state = 5096;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useStatement(): UseStatementContext {
		let _localctx: UseStatementContext = new UseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, MySqlParser.RULE_useStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5098;
			this.match(MySqlParser.USE);
			this.state = 5099;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public describeObjectClause(): DescribeObjectClauseContext {
		let _localctx: DescribeObjectClauseContext = new DescribeObjectClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, MySqlParser.RULE_describeObjectClause);
		try {
			this.state = 5111;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DELETE:
			case MySqlParser.INSERT:
			case MySqlParser.REPLACE:
			case MySqlParser.SELECT:
			case MySqlParser.UPDATE:
			case MySqlParser.LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5106;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.SELECT:
				case MySqlParser.LR_BRACKET:
					{
					this.state = 5101;
					this.selectStatement();
					}
					break;
				case MySqlParser.DELETE:
					{
					this.state = 5102;
					this.deleteStatement();
					}
					break;
				case MySqlParser.INSERT:
					{
					this.state = 5103;
					this.insertStatement();
					}
					break;
				case MySqlParser.REPLACE:
					{
					this.state = 5104;
					this.replaceStatement();
					}
					break;
				case MySqlParser.UPDATE:
					{
					this.state = 5105;
					this.updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5108;
				this.match(MySqlParser.FOR);
				this.state = 5109;
				this.match(MySqlParser.CONNECTION);
				this.state = 5110;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullId(): FullIdContext {
		let _localctx: FullIdContext = new FullIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, MySqlParser.RULE_fullId);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5113;
			this.uid();
			this.state = 5117;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 735, this._ctx) ) {
			case 1:
				{
				this.state = 5114;
				this.match(MySqlParser.DOT_ID);
				}
				break;

			case 2:
				{
				this.state = 5115;
				this.match(MySqlParser.DOT);
				this.state = 5116;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let _localctx: TableNameContext = new TableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, MySqlParser.RULE_tableName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5119;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullColumnName(): FullColumnNameContext {
		let _localctx: FullColumnNameContext = new FullColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, MySqlParser.RULE_fullColumnName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5121;
			this.uid();
			this.state = 5126;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 737, this._ctx) ) {
			case 1:
				{
				this.state = 5122;
				this.dottedId();
				this.state = 5124;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
				case 1:
					{
					this.state = 5123;
					this.dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnName(): IndexColumnNameContext {
		let _localctx: IndexColumnNameContext = new IndexColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, MySqlParser.RULE_indexColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5128;
			this.uid();
			this.state = 5133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 5129;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5130;
				this.decimalLiteral();
				this.state = 5131;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 5136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ASC || _la === MySqlParser.DESC) {
				{
				this.state = 5135;
				_localctx._sortType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._sortType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userName(): UserNameContext {
		let _localctx: UserNameContext = new UserNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, MySqlParser.RULE_userName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5138;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.ID || _la === MySqlParser.STRING_USER_NAME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mysqlVariable(): MysqlVariableContext {
		let _localctx: MysqlVariableContext = new MysqlVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, MySqlParser.RULE_mysqlVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5140;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.LOCAL_ID || _la === MySqlParser.GLOBAL_ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let _localctx: CharsetNameContext = new CharsetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, MySqlParser.RULE_charsetName);
		try {
			this.state = 5146;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5142;
				this.match(MySqlParser.BINARY);
				}
				break;
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5143;
				this.charsetNameBase();
				}
				break;
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5144;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5145;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let _localctx: CollationNameContext = new CollationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, MySqlParser.RULE_collationName);
		try {
			this.state = 5150;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 741, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5148;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5149;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineName(): EngineNameContext {
		let _localctx: EngineNameContext = new EngineNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, MySqlParser.RULE_engineName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5152;
			_la = this._input.LA(1);
			if (!(((((_la - 613)) & ~0x1F) === 0 && ((1 << (_la - 613)) & ((1 << (MySqlParser.ARCHIVE - 613)) | (1 << (MySqlParser.BLACKHOLE - 613)) | (1 << (MySqlParser.CSV - 613)) | (1 << (MySqlParser.FEDERATED - 613)) | (1 << (MySqlParser.INNODB - 613)) | (1 << (MySqlParser.MEMORY - 613)) | (1 << (MySqlParser.MRG_MYISAM - 613)) | (1 << (MySqlParser.MYISAM - 613)) | (1 << (MySqlParser.NDB - 613)) | (1 << (MySqlParser.NDBCLUSTER - 613)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 613)))) !== 0) || _la === MySqlParser.STRING_LITERAL || _la === MySqlParser.REVERSE_QUOTE_ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uuidSet(): UuidSetContext {
		let _localctx: UuidSetContext = new UuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, MySqlParser.RULE_uuidSet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5154;
			this.decimalLiteral();
			this.state = 5155;
			this.match(MySqlParser.MINUS);
			this.state = 5156;
			this.decimalLiteral();
			this.state = 5157;
			this.match(MySqlParser.MINUS);
			this.state = 5158;
			this.decimalLiteral();
			this.state = 5159;
			this.match(MySqlParser.MINUS);
			this.state = 5160;
			this.decimalLiteral();
			this.state = 5161;
			this.match(MySqlParser.MINUS);
			this.state = 5162;
			this.decimalLiteral();
			this.state = 5168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5163;
				this.match(MySqlParser.COLON_SYMB);
				this.state = 5164;
				this.decimalLiteral();
				this.state = 5165;
				this.match(MySqlParser.MINUS);
				this.state = 5166;
				this.decimalLiteral();
				}
				}
				this.state = 5170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.COLON_SYMB);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let _localctx: XidContext = new XidContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, MySqlParser.RULE_xid);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5172;
			_localctx._globalTableUid = this.xuidStringId();
			this.state = 5179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMA) {
				{
				this.state = 5173;
				this.match(MySqlParser.COMMA);
				this.state = 5174;
				_localctx._qualifier = this.xuidStringId();
				this.state = 5177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COMMA) {
					{
					this.state = 5175;
					this.match(MySqlParser.COMMA);
					this.state = 5176;
					_localctx._idFormat = this.decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xuidStringId(): XuidStringIdContext {
		let _localctx: XuidStringIdContext = new XuidStringIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, MySqlParser.RULE_xuidStringId);
		let _la: number;
		try {
			this.state = 5188;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5181;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.BIT_STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5182;
				this.match(MySqlParser.BIT_STRING);
				}
				break;
			case MySqlParser.HEXADECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5183;
					this.match(MySqlParser.HEXADECIMAL_LITERAL);
					}
					}
					this.state = 5186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.HEXADECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authPlugin(): AuthPluginContext {
		let _localctx: AuthPluginContext = new AuthPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, MySqlParser.RULE_authPlugin);
		try {
			this.state = 5192;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5190;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5191;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uid(): UidContext {
		let _localctx: UidContext = new UidContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, MySqlParser.RULE_uid);
		try {
			this.state = 5197;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 748, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5194;
				this.simpleId();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5195;
				this.match(MySqlParser.REVERSE_QUOTE_ID);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5196;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleId(): SimpleIdContext {
		let _localctx: SimpleIdContext = new SimpleIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, MySqlParser.RULE_simpleId);
		try {
			this.state = 5208;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 749, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5199;
				this.match(MySqlParser.ID);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5200;
				this.charsetNameBase();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5201;
				this.transactionLevelBase();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5202;
				this.engineName();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5203;
				this.privilegesBase();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5204;
				this.intervalTypeBase();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5205;
				this.dataTypeBase();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5206;
				this.keywordsCanBeId();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5207;
				this.functionNameBase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dottedId(): DottedIdContext {
		let _localctx: DottedIdContext = new DottedIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, MySqlParser.RULE_dottedId);
		try {
			this.state = 5213;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DOT_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5210;
				this.match(MySqlParser.DOT_ID);
				}
				break;
			case MySqlParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5211;
				this.match(MySqlParser.DOT);
				this.state = 5212;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalLiteral(): DecimalLiteralContext {
		let _localctx: DecimalLiteralContext = new DecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, MySqlParser.RULE_decimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5215;
			_la = this._input.LA(1);
			if (!(((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileSizeLiteral(): FileSizeLiteralContext {
		let _localctx: FileSizeLiteralContext = new FileSizeLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, MySqlParser.RULE_fileSizeLiteral);
		try {
			this.state = 5219;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FILESIZE_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5217;
				this.match(MySqlParser.FILESIZE_LITERAL);
				}
				break;
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5218;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringLiteral(): StringLiteralContext {
		let _localctx: StringLiteralContext = new StringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, MySqlParser.RULE_stringLiteral);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5244;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 758, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5226;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.STRING_CHARSET_NAME:
					{
					this.state = 5222;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.STRING_CHARSET_NAME) {
						{
						this.state = 5221;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 5224;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 5225;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5229;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5228;
						this.match(MySqlParser.STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5231;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 754, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5238;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.STRING_CHARSET_NAME:
					{
					this.state = 5234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.STRING_CHARSET_NAME) {
						{
						this.state = 5233;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 5236;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 5237;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5242;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 757, this._ctx) ) {
				case 1:
					{
					this.state = 5240;
					this.match(MySqlParser.COLLATE);
					this.state = 5241;
					this.collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let _localctx: BooleanLiteralContext = new BooleanLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, MySqlParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5246;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FALSE || _la === MySqlParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hexadecimalLiteral(): HexadecimalLiteralContext {
		let _localctx: HexadecimalLiteralContext = new HexadecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, MySqlParser.RULE_hexadecimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5249;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.STRING_CHARSET_NAME) {
				{
				this.state = 5248;
				this.match(MySqlParser.STRING_CHARSET_NAME);
				}
			}

			this.state = 5251;
			this.match(MySqlParser.HEXADECIMAL_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullNotnull(): NullNotnullContext {
		let _localctx: NullNotnullContext = new NullNotnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, MySqlParser.RULE_nullNotnull);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NOT) {
				{
				this.state = 5253;
				this.match(MySqlParser.NOT);
				}
			}

			this.state = 5256;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.NULL_LITERAL || _la === MySqlParser.NULL_SPEC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, MySqlParser.RULE_constant);
		let _la: number;
		try {
			this.state = 5270;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 762, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5258;
				this.stringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5259;
				this.decimalLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5260;
				this.match(MySqlParser.MINUS);
				this.state = 5261;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5262;
				this.hexadecimalLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5263;
				this.booleanLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5264;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5265;
				this.match(MySqlParser.BIT_STRING);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 5266;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 5269;
				_localctx._nullLiteral = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NULL_LITERAL || _la === MySqlParser.NULL_SPEC_LITERAL)) {
					_localctx._nullLiteral = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, MySqlParser.RULE_dataType);
		let _la: number;
		try {
			this.state = 5347;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CHAR:
			case MySqlParser.VARCHAR:
			case MySqlParser.TINYTEXT:
			case MySqlParser.TEXT:
			case MySqlParser.MEDIUMTEXT:
			case MySqlParser.LONGTEXT:
				_localctx = new StringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5272;
				(_localctx as StringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (MySqlParser.CHAR - 188)) | (1 << (MySqlParser.VARCHAR - 188)) | (1 << (MySqlParser.TINYTEXT - 188)) | (1 << (MySqlParser.TEXT - 188)) | (1 << (MySqlParser.MEDIUMTEXT - 188)) | (1 << (MySqlParser.LONGTEXT - 188)))) !== 0))) {
					(_localctx as StringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5274;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
				case 1:
					{
					this.state = 5273;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5276;
					this.match(MySqlParser.BINARY);
					}
				}

				this.state = 5282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER) {
					{
					this.state = 5279;
					this.match(MySqlParser.CHARACTER);
					this.state = 5280;
					this.match(MySqlParser.SET);
					this.state = 5281;
					this.charsetName();
					}
				}

				this.state = 5286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 5284;
					this.match(MySqlParser.COLLATE);
					this.state = 5285;
					this.collationName();
					}
				}

				}
				break;
			case MySqlParser.TINYINT:
			case MySqlParser.SMALLINT:
			case MySqlParser.MEDIUMINT:
			case MySqlParser.INT:
			case MySqlParser.INTEGER:
			case MySqlParser.BIGINT:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5288;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (MySqlParser.TINYINT - 172)) | (1 << (MySqlParser.SMALLINT - 172)) | (1 << (MySqlParser.MEDIUMINT - 172)) | (1 << (MySqlParser.INT - 172)) | (1 << (MySqlParser.INTEGER - 172)) | (1 << (MySqlParser.BIGINT - 172)))) !== 0))) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5290;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 767, this._ctx) ) {
				case 1:
					{
					this.state = 5289;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNSIGNED) {
					{
					this.state = 5292;
					this.match(MySqlParser.UNSIGNED);
					}
				}

				this.state = 5296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5295;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;
			case MySqlParser.REAL:
			case MySqlParser.DOUBLE:
			case MySqlParser.FLOAT:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5298;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (MySqlParser.REAL - 178)) | (1 << (MySqlParser.DOUBLE - 178)) | (1 << (MySqlParser.FLOAT - 178)))) !== 0))) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5300;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 770, this._ctx) ) {
				case 1:
					{
					this.state = 5299;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 5303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNSIGNED) {
					{
					this.state = 5302;
					this.match(MySqlParser.UNSIGNED);
					}
				}

				this.state = 5306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5305;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;
			case MySqlParser.DECIMAL:
			case MySqlParser.NUMERIC:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5308;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DECIMAL || _la === MySqlParser.NUMERIC)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5310;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 773, this._ctx) ) {
				case 1:
					{
					this.state = 5309;
					this.lengthTwoOptionalDimension();
					}
					break;
				}
				this.state = 5313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNSIGNED) {
					{
					this.state = 5312;
					this.match(MySqlParser.UNSIGNED);
					}
				}

				this.state = 5316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5315;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;
			case MySqlParser.DATE:
			case MySqlParser.TINYBLOB:
			case MySqlParser.BLOB:
			case MySqlParser.MEDIUMBLOB:
			case MySqlParser.LONGBLOB:
			case MySqlParser.SERIAL:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
				_localctx = new SimpleDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5318;
				(_localctx as SimpleDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TINYBLOB - 183)) | (1 << (MySqlParser.BLOB - 183)) | (1 << (MySqlParser.MEDIUMBLOB - 183)) | (1 << (MySqlParser.LONGBLOB - 183)) | (1 << (MySqlParser.SERIAL - 183)))) !== 0) || _la === MySqlParser.BOOL || _la === MySqlParser.BOOLEAN)) {
					(_localctx as SimpleDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.BINARY:
			case MySqlParser.VARBINARY:
			case MySqlParser.BIT:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5319;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (MySqlParser.TIME - 184)) | (1 << (MySqlParser.TIMESTAMP - 184)) | (1 << (MySqlParser.DATETIME - 184)) | (1 << (MySqlParser.YEAR - 184)) | (1 << (MySqlParser.BINARY - 184)) | (1 << (MySqlParser.VARBINARY - 184)))) !== 0) || _la === MySqlParser.BIT)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5321;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
				case 1:
					{
					this.state = 5320;
					this.lengthOneDimension();
					}
					break;
				}
				}
				break;
			case MySqlParser.SET:
			case MySqlParser.ENUM:
				_localctx = new CollectionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5323;
				(_localctx as CollectionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SET || _la === MySqlParser.ENUM)) {
					(_localctx as CollectionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5324;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5325;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 5330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 5326;
					this.match(MySqlParser.COMMA);
					this.state = 5327;
					this.match(MySqlParser.STRING_LITERAL);
					}
					}
					this.state = 5332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5333;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 5335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5334;
					this.match(MySqlParser.BINARY);
					}
				}

				this.state = 5340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER) {
					{
					this.state = 5337;
					this.match(MySqlParser.CHARACTER);
					this.state = 5338;
					this.match(MySqlParser.SET);
					this.state = 5339;
					this.charsetName();
					}
				}

				this.state = 5344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 5342;
					this.match(MySqlParser.COLLATE);
					this.state = 5343;
					this.collationName();
					}
				}

				}
				break;
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
				_localctx = new SpatialDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5346;
				(_localctx as SpatialDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 628)) & ~0x1F) === 0 && ((1 << (_la - 628)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 628)) | (1 << (MySqlParser.LINESTRING - 628)) | (1 << (MySqlParser.MULTILINESTRING - 628)) | (1 << (MySqlParser.MULTIPOINT - 628)) | (1 << (MySqlParser.MULTIPOLYGON - 628)) | (1 << (MySqlParser.POINT - 628)) | (1 << (MySqlParser.POLYGON - 628)))) !== 0))) {
					(_localctx as SpatialDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public convertedDataType(): ConvertedDataTypeContext {
		let _localctx: ConvertedDataTypeContext = new ConvertedDataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, MySqlParser.RULE_convertedDataType);
		let _la: number;
		try {
			this.state = 5371;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.BINARY:
			case MySqlParser.NCHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5349;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINARY || _la === MySqlParser.NCHAR)) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5350;
					this.lengthOneDimension();
					}
				}

				}
				break;
			case MySqlParser.CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5353;
				_localctx._typeName = this.match(MySqlParser.CHAR);
				this.state = 5355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5354;
					this.lengthOneDimension();
					}
				}

				this.state = 5360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER) {
					{
					this.state = 5357;
					this.match(MySqlParser.CHARACTER);
					this.state = 5358;
					this.match(MySqlParser.SET);
					this.state = 5359;
					this.charsetName();
					}
				}

				}
				break;
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.DATETIME:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5362;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.DATETIME - 183)))) !== 0))) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5363;
				_localctx._typeName = this.match(MySqlParser.DECIMAL);
				this.state = 5365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5364;
					this.lengthTwoDimension();
					}
				}

				}
				break;
			case MySqlParser.UNSIGNED:
			case MySqlParser.SIGNED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5367;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTEGER) {
					{
					this.state = 5368;
					this.match(MySqlParser.INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthOneDimension(): LengthOneDimensionContext {
		let _localctx: LengthOneDimensionContext = new LengthOneDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, MySqlParser.RULE_lengthOneDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5373;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5374;
			this.decimalLiteral();
			this.state = 5375;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoDimension(): LengthTwoDimensionContext {
		let _localctx: LengthTwoDimensionContext = new LengthTwoDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, MySqlParser.RULE_lengthTwoDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5377;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5378;
			this.decimalLiteral();
			this.state = 5379;
			this.match(MySqlParser.COMMA);
			this.state = 5380;
			this.decimalLiteral();
			this.state = 5381;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		let _localctx: LengthTwoOptionalDimensionContext = new LengthTwoOptionalDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, MySqlParser.RULE_lengthTwoOptionalDimension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5383;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5384;
			this.decimalLiteral();
			this.state = 5387;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMA) {
				{
				this.state = 5385;
				this.match(MySqlParser.COMMA);
				this.state = 5386;
				this.decimalLiteral();
				}
			}

			this.state = 5389;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uidList(): UidListContext {
		let _localctx: UidListContext = new UidListContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, MySqlParser.RULE_uidList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5391;
			this.uid();
			this.state = 5396;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5392;
					this.match(MySqlParser.COMMA);
					this.state = 5393;
					this.uid();
					}
					}
				}
				this.state = 5398;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tables(): TablesContext {
		let _localctx: TablesContext = new TablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, MySqlParser.RULE_tables);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5399;
			this.tableName();
			this.state = 5404;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 790, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5400;
					this.match(MySqlParser.COMMA);
					this.state = 5401;
					this.tableName();
					}
					}
				}
				this.state = 5406;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 790, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnNames(): IndexColumnNamesContext {
		let _localctx: IndexColumnNamesContext = new IndexColumnNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, MySqlParser.RULE_indexColumnNames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5407;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5408;
			this.indexColumnName();
			this.state = 5413;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5409;
				this.match(MySqlParser.COMMA);
				this.state = 5410;
				this.indexColumnName();
				}
				}
				this.state = 5415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5416;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let _localctx: ExpressionsContext = new ExpressionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, MySqlParser.RULE_expressions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5418;
			this.expression(0);
			this.state = 5423;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5419;
				this.match(MySqlParser.COMMA);
				this.state = 5420;
				this.expression(0);
				}
				}
				this.state = 5425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext {
		let _localctx: ExpressionsWithDefaultsContext = new ExpressionsWithDefaultsContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, MySqlParser.RULE_expressionsWithDefaults);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5426;
			this.expressionOrDefault();
			this.state = 5431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5427;
				this.match(MySqlParser.COMMA);
				this.state = 5428;
				this.expressionOrDefault();
				}
				}
				this.state = 5433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constants(): ConstantsContext {
		let _localctx: ConstantsContext = new ConstantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, MySqlParser.RULE_constants);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5434;
			this.constant();
			this.state = 5439;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5435;
				this.match(MySqlParser.COMMA);
				this.state = 5436;
				this.constant();
				}
				}
				this.state = 5441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleStrings(): SimpleStringsContext {
		let _localctx: SimpleStringsContext = new SimpleStringsContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, MySqlParser.RULE_simpleStrings);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5442;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 5447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5443;
				this.match(MySqlParser.COMMA);
				this.state = 5444;
				this.match(MySqlParser.STRING_LITERAL);
				}
				}
				this.state = 5449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userVariables(): UserVariablesContext {
		let _localctx: UserVariablesContext = new UserVariablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, MySqlParser.RULE_userVariables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5450;
			this.match(MySqlParser.LOCAL_ID);
			this.state = 5455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5451;
				this.match(MySqlParser.COMMA);
				this.state = 5452;
				this.match(MySqlParser.LOCAL_ID);
				}
				}
				this.state = 5457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultValue(): DefaultValueContext {
		let _localctx: DefaultValueContext = new DefaultValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, MySqlParser.RULE_defaultValue);
		let _la: number;
		try {
			this.state = 5466;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 798, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5458;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5459;
				this.constant();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5460;
				this.currentTimestamp();
				this.state = 5464;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ON) {
					{
					this.state = 5461;
					this.match(MySqlParser.ON);
					this.state = 5462;
					this.match(MySqlParser.UPDATE);
					this.state = 5463;
					this.currentTimestamp();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currentTimestamp(): CurrentTimestampContext {
		let _localctx: CurrentTimestampContext = new CurrentTimestampContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, MySqlParser.RULE_currentTimestamp);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5482;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.LOCALTIMESTAMP:
				{
				this.state = 5468;
				_la = this._input.LA(1);
				if (!(((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 231)) | (1 << (MySqlParser.LOCALTIME - 231)) | (1 << (MySqlParser.LOCALTIMESTAMP - 231)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5474;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 800, this._ctx) ) {
				case 1:
					{
					this.state = 5469;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 5471;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)))) !== 0)) {
						{
						this.state = 5470;
						this.decimalLiteral();
						}
					}

					this.state = 5473;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MySqlParser.NOW:
				{
				this.state = 5476;
				this.match(MySqlParser.NOW);
				this.state = 5477;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)))) !== 0)) {
					{
					this.state = 5478;
					this.decimalLiteral();
					}
				}

				this.state = 5481;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let _localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, MySqlParser.RULE_expressionOrDefault);
		try {
			this.state = 5486;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLIENT:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HASH:
			case MySqlParser.HOST:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFOMANCE_SCHEMA:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5484;
				this.expression(0);
				}
				break;
			case MySqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5485;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let _localctx: IfExistsContext = new IfExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, MySqlParser.RULE_ifExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5488;
			this.match(MySqlParser.IF);
			this.state = 5489;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let _localctx: IfNotExistsContext = new IfNotExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, MySqlParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5491;
			this.match(MySqlParser.IF);
			this.state = 5492;
			this.match(MySqlParser.NOT);
			this.state = 5493;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, MySqlParser.RULE_functionCall);
		let _la: number;
		try {
			this.state = 5512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5495;
				this.specificFunction();
				}
				break;

			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5496;
				this.aggregateWindowedFunction();
				}
				break;

			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5497;
				this.scalarFunctionName();
				this.state = 5498;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySqlParser.CASE) | (1 << MySqlParser.CAST) | (1 << MySqlParser.CONVERT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (MySqlParser.CURRENT_USER - 33)) | (1 << (MySqlParser.DATABASE - 33)) | (1 << (MySqlParser.EXISTS - 33)) | (1 << (MySqlParser.FALSE - 33)))) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (MySqlParser.IF - 67)) | (1 << (MySqlParser.INSERT - 67)) | (1 << (MySqlParser.INTERVAL - 67)) | (1 << (MySqlParser.LEFT - 67)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (MySqlParser.NOT - 100)) | (1 << (MySqlParser.NULL_LITERAL - 100)) | (1 << (MySqlParser.REPLACE - 100)) | (1 << (MySqlParser.RIGHT - 100)))) !== 0) || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (MySqlParser.TRUE - 154)) | (1 << (MySqlParser.VALUES - 154)) | (1 << (MySqlParser.DATE - 154)) | (1 << (MySqlParser.TIME - 154)) | (1 << (MySqlParser.TIMESTAMP - 154)))) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & ((1 << (MySqlParser.DATETIME - 186)) | (1 << (MySqlParser.YEAR - 186)) | (1 << (MySqlParser.CHAR - 186)) | (1 << (MySqlParser.BINARY - 186)) | (1 << (MySqlParser.TEXT - 186)) | (1 << (MySqlParser.ENUM - 186)) | (1 << (MySqlParser.SERIAL - 186)) | (1 << (MySqlParser.AVG - 186)) | (1 << (MySqlParser.BIT_AND - 186)) | (1 << (MySqlParser.BIT_OR - 186)) | (1 << (MySqlParser.BIT_XOR - 186)) | (1 << (MySqlParser.COUNT - 186)))) !== 0) || ((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (MySqlParser.GROUP_CONCAT - 218)) | (1 << (MySqlParser.MAX - 218)) | (1 << (MySqlParser.MIN - 218)) | (1 << (MySqlParser.STD - 218)) | (1 << (MySqlParser.STDDEV - 218)) | (1 << (MySqlParser.STDDEV_POP - 218)) | (1 << (MySqlParser.STDDEV_SAMP - 218)) | (1 << (MySqlParser.SUM - 218)) | (1 << (MySqlParser.VAR_POP - 218)) | (1 << (MySqlParser.VAR_SAMP - 218)) | (1 << (MySqlParser.VARIANCE - 218)) | (1 << (MySqlParser.CURRENT_DATE - 218)) | (1 << (MySqlParser.CURRENT_TIME - 218)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 218)) | (1 << (MySqlParser.LOCALTIME - 218)) | (1 << (MySqlParser.CURDATE - 218)) | (1 << (MySqlParser.CURTIME - 218)) | (1 << (MySqlParser.DATE_ADD - 218)) | (1 << (MySqlParser.DATE_SUB - 218)) | (1 << (MySqlParser.EXTRACT - 218)) | (1 << (MySqlParser.LOCALTIMESTAMP - 218)) | (1 << (MySqlParser.NOW - 218)) | (1 << (MySqlParser.POSITION - 218)) | (1 << (MySqlParser.SUBSTR - 218)) | (1 << (MySqlParser.SUBSTRING - 218)) | (1 << (MySqlParser.SYSDATE - 218)) | (1 << (MySqlParser.TRIM - 218)) | (1 << (MySqlParser.UTC_DATE - 218)) | (1 << (MySqlParser.UTC_TIME - 218)) | (1 << (MySqlParser.UTC_TIMESTAMP - 218)) | (1 << (MySqlParser.ACCOUNT - 218)) | (1 << (MySqlParser.ACTION - 218)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (MySqlParser.AFTER - 250)) | (1 << (MySqlParser.AGGREGATE - 250)) | (1 << (MySqlParser.ALGORITHM - 250)) | (1 << (MySqlParser.ANY - 250)) | (1 << (MySqlParser.AT - 250)) | (1 << (MySqlParser.AUTHORS - 250)) | (1 << (MySqlParser.AUTOCOMMIT - 250)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 250)) | (1 << (MySqlParser.AUTO_INCREMENT - 250)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 250)) | (1 << (MySqlParser.BEGIN - 250)) | (1 << (MySqlParser.BINLOG - 250)) | (1 << (MySqlParser.BIT - 250)) | (1 << (MySqlParser.BLOCK - 250)) | (1 << (MySqlParser.BOOL - 250)) | (1 << (MySqlParser.BOOLEAN - 250)) | (1 << (MySqlParser.BTREE - 250)) | (1 << (MySqlParser.CASCADED - 250)) | (1 << (MySqlParser.CHAIN - 250)) | (1 << (MySqlParser.CHANGED - 250)) | (1 << (MySqlParser.CHANNEL - 250)) | (1 << (MySqlParser.CHECKSUM - 250)) | (1 << (MySqlParser.CIPHER - 250)) | (1 << (MySqlParser.CLIENT - 250)) | (1 << (MySqlParser.COALESCE - 250)) | (1 << (MySqlParser.CODE - 250)) | (1 << (MySqlParser.COLUMNS - 250)) | (1 << (MySqlParser.COLUMN_FORMAT - 250)) | (1 << (MySqlParser.COMMENT - 250)) | (1 << (MySqlParser.COMMIT - 250)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (MySqlParser.COMPACT - 282)) | (1 << (MySqlParser.COMPLETION - 282)) | (1 << (MySqlParser.COMPRESSED - 282)) | (1 << (MySqlParser.COMPRESSION - 282)) | (1 << (MySqlParser.CONCURRENT - 282)) | (1 << (MySqlParser.CONNECTION - 282)) | (1 << (MySqlParser.CONSISTENT - 282)) | (1 << (MySqlParser.CONTAINS - 282)) | (1 << (MySqlParser.CONTEXT - 282)) | (1 << (MySqlParser.CONTRIBUTORS - 282)) | (1 << (MySqlParser.COPY - 282)) | (1 << (MySqlParser.CPU - 282)) | (1 << (MySqlParser.DATA - 282)) | (1 << (MySqlParser.DATAFILE - 282)) | (1 << (MySqlParser.DEALLOCATE - 282)) | (1 << (MySqlParser.DEFAULT_AUTH - 282)) | (1 << (MySqlParser.DEFINER - 282)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 282)) | (1 << (MySqlParser.DIRECTORY - 282)) | (1 << (MySqlParser.DISABLE - 282)) | (1 << (MySqlParser.DISCARD - 282)) | (1 << (MySqlParser.DISK - 282)) | (1 << (MySqlParser.DO - 282)) | (1 << (MySqlParser.DUMPFILE - 282)) | (1 << (MySqlParser.DUPLICATE - 282)) | (1 << (MySqlParser.DYNAMIC - 282)) | (1 << (MySqlParser.ENABLE - 282)) | (1 << (MySqlParser.ENCRYPTION - 282)) | (1 << (MySqlParser.ENDS - 282)) | (1 << (MySqlParser.ENGINE - 282)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (MySqlParser.ENGINES - 314)) | (1 << (MySqlParser.ERROR - 314)) | (1 << (MySqlParser.ERRORS - 314)) | (1 << (MySqlParser.ESCAPE - 314)) | (1 << (MySqlParser.EVEN - 314)) | (1 << (MySqlParser.EVENT - 314)) | (1 << (MySqlParser.EVENTS - 314)) | (1 << (MySqlParser.EVERY - 314)) | (1 << (MySqlParser.EXCHANGE - 314)) | (1 << (MySqlParser.EXCLUSIVE - 314)) | (1 << (MySqlParser.EXPIRE - 314)) | (1 << (MySqlParser.EXTENDED - 314)) | (1 << (MySqlParser.EXTENT_SIZE - 314)) | (1 << (MySqlParser.FAST - 314)) | (1 << (MySqlParser.FAULTS - 314)) | (1 << (MySqlParser.FIELDS - 314)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 314)) | (1 << (MySqlParser.FILTER - 314)) | (1 << (MySqlParser.FIRST - 314)) | (1 << (MySqlParser.FIXED - 314)) | (1 << (MySqlParser.FOLLOWS - 314)) | (1 << (MySqlParser.FULL - 314)) | (1 << (MySqlParser.FUNCTION - 314)) | (1 << (MySqlParser.GLOBAL - 314)) | (1 << (MySqlParser.GRANTS - 314)) | (1 << (MySqlParser.GROUP_REPLICATION - 314)) | (1 << (MySqlParser.HASH - 314)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MySqlParser.HOST - 347)) | (1 << (MySqlParser.IDENTIFIED - 347)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 347)) | (1 << (MySqlParser.IMPORT - 347)) | (1 << (MySqlParser.INDEXES - 347)) | (1 << (MySqlParser.INITIAL_SIZE - 347)) | (1 << (MySqlParser.INPLACE - 347)) | (1 << (MySqlParser.INSERT_METHOD - 347)) | (1 << (MySqlParser.INSTANCE - 347)) | (1 << (MySqlParser.INVOKER - 347)) | (1 << (MySqlParser.IO - 347)) | (1 << (MySqlParser.IO_THREAD - 347)) | (1 << (MySqlParser.IPC - 347)) | (1 << (MySqlParser.ISOLATION - 347)) | (1 << (MySqlParser.ISSUER - 347)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 347)) | (1 << (MySqlParser.LANGUAGE - 347)) | (1 << (MySqlParser.LAST - 347)) | (1 << (MySqlParser.LEAVES - 347)) | (1 << (MySqlParser.LESS - 347)) | (1 << (MySqlParser.LEVEL - 347)) | (1 << (MySqlParser.LIST - 347)) | (1 << (MySqlParser.LOCAL - 347)) | (1 << (MySqlParser.LOGFILE - 347)) | (1 << (MySqlParser.LOGS - 347)) | (1 << (MySqlParser.MASTER - 347)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 347)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 347)) | (1 << (MySqlParser.MASTER_DELAY - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 379)) | (1 << (MySqlParser.MASTER_HOST - 379)) | (1 << (MySqlParser.MASTER_LOG_FILE - 379)) | (1 << (MySqlParser.MASTER_LOG_POS - 379)) | (1 << (MySqlParser.MASTER_PASSWORD - 379)) | (1 << (MySqlParser.MASTER_PORT - 379)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 379)) | (1 << (MySqlParser.MASTER_SSL - 379)) | (1 << (MySqlParser.MASTER_SSL_CA - 379)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 379)) | (1 << (MySqlParser.MASTER_SSL_CERT - 379)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 379)) | (1 << (MySqlParser.MASTER_SSL_CRL - 379)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 379)) | (1 << (MySqlParser.MASTER_SSL_KEY - 379)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 379)) | (1 << (MySqlParser.MASTER_USER - 379)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_ROWS - 379)) | (1 << (MySqlParser.MAX_SIZE - 379)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 379)) | (1 << (MySqlParser.MEDIUM - 379)) | (1 << (MySqlParser.MERGE - 379)) | (1 << (MySqlParser.MID - 379)) | (1 << (MySqlParser.MIGRATE - 379)) | (1 << (MySqlParser.MIN_ROWS - 379)) | (1 << (MySqlParser.MODIFY - 379)) | (1 << (MySqlParser.MUTEX - 379)) | (1 << (MySqlParser.MYSQL - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MySqlParser.NAME - 411)) | (1 << (MySqlParser.NAMES - 411)) | (1 << (MySqlParser.NCHAR - 411)) | (1 << (MySqlParser.NEVER - 411)) | (1 << (MySqlParser.NO - 411)) | (1 << (MySqlParser.NODEGROUP - 411)) | (1 << (MySqlParser.NONE - 411)) | (1 << (MySqlParser.OFFLINE - 411)) | (1 << (MySqlParser.OFFSET - 411)) | (1 << (MySqlParser.OJ - 411)) | (1 << (MySqlParser.OLD_PASSWORD - 411)) | (1 << (MySqlParser.ONE - 411)) | (1 << (MySqlParser.ONLINE - 411)) | (1 << (MySqlParser.ONLY - 411)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 411)) | (1 << (MySqlParser.OPTIONS - 411)) | (1 << (MySqlParser.OWNER - 411)) | (1 << (MySqlParser.PACK_KEYS - 411)) | (1 << (MySqlParser.PAGE - 411)) | (1 << (MySqlParser.PARSER - 411)) | (1 << (MySqlParser.PARTIAL - 411)) | (1 << (MySqlParser.PARTITIONING - 411)) | (1 << (MySqlParser.PARTITIONS - 411)) | (1 << (MySqlParser.PASSWORD - 411)) | (1 << (MySqlParser.PHASE - 411)) | (1 << (MySqlParser.PLUGIN_DIR - 411)) | (1 << (MySqlParser.PLUGINS - 411)) | (1 << (MySqlParser.PORT - 411)) | (1 << (MySqlParser.PRECEDES - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MySqlParser.PREPARE - 443)) | (1 << (MySqlParser.PRESERVE - 443)) | (1 << (MySqlParser.PREV - 443)) | (1 << (MySqlParser.PROCESSLIST - 443)) | (1 << (MySqlParser.PROFILE - 443)) | (1 << (MySqlParser.PROFILES - 443)) | (1 << (MySqlParser.PROXY - 443)) | (1 << (MySqlParser.QUERY - 443)) | (1 << (MySqlParser.QUICK - 443)) | (1 << (MySqlParser.REBUILD - 443)) | (1 << (MySqlParser.RECOVER - 443)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 443)) | (1 << (MySqlParser.REDUNDANT - 443)) | (1 << (MySqlParser.RELAY_LOG_FILE - 443)) | (1 << (MySqlParser.RELAY_LOG_POS - 443)) | (1 << (MySqlParser.RELAYLOG - 443)) | (1 << (MySqlParser.REMOVE - 443)) | (1 << (MySqlParser.REORGANIZE - 443)) | (1 << (MySqlParser.REPAIR - 443)) | (1 << (MySqlParser.REPLICATE_DO_DB - 443)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 443)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 443)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 443)) | (1 << (MySqlParser.REPLICATION - 443)) | (1 << (MySqlParser.RESUME - 443)) | (1 << (MySqlParser.RETURNS - 443)) | (1 << (MySqlParser.ROLLBACK - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MySqlParser.ROLLUP - 475)) | (1 << (MySqlParser.ROTATE - 475)) | (1 << (MySqlParser.ROW - 475)) | (1 << (MySqlParser.ROWS - 475)) | (1 << (MySqlParser.ROW_FORMAT - 475)) | (1 << (MySqlParser.SAVEPOINT - 475)) | (1 << (MySqlParser.SCHEDULE - 475)) | (1 << (MySqlParser.SECURITY - 475)) | (1 << (MySqlParser.SERVER - 475)) | (1 << (MySqlParser.SESSION - 475)) | (1 << (MySqlParser.SHARE - 475)) | (1 << (MySqlParser.SHARED - 475)) | (1 << (MySqlParser.SIGNED - 475)) | (1 << (MySqlParser.SIMPLE - 475)) | (1 << (MySqlParser.SLAVE - 475)) | (1 << (MySqlParser.SNAPSHOT - 475)) | (1 << (MySqlParser.SOCKET - 475)) | (1 << (MySqlParser.SOME - 475)) | (1 << (MySqlParser.SOUNDS - 475)) | (1 << (MySqlParser.SOURCE - 475)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 475)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 475)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 475)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 475)) | (1 << (MySqlParser.SQL_CACHE - 475)) | (1 << (MySqlParser.SQL_NO_CACHE - 475)) | (1 << (MySqlParser.SQL_THREAD - 475)) | (1 << (MySqlParser.START - 475)) | (1 << (MySqlParser.STARTS - 475)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MySqlParser.STATS_PERSISTENT - 507)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 507)) | (1 << (MySqlParser.STATUS - 507)) | (1 << (MySqlParser.STOP - 507)) | (1 << (MySqlParser.STORAGE - 507)) | (1 << (MySqlParser.STRING - 507)) | (1 << (MySqlParser.SUBJECT - 507)) | (1 << (MySqlParser.SUBPARTITION - 507)) | (1 << (MySqlParser.SUBPARTITIONS - 507)) | (1 << (MySqlParser.SUSPEND - 507)) | (1 << (MySqlParser.SWAPS - 507)) | (1 << (MySqlParser.SWITCHES - 507)) | (1 << (MySqlParser.TABLESPACE - 507)) | (1 << (MySqlParser.TEMPORARY - 507)) | (1 << (MySqlParser.TEMPTABLE - 507)) | (1 << (MySqlParser.THAN - 507)) | (1 << (MySqlParser.TRANSACTION - 507)) | (1 << (MySqlParser.TRUNCATE - 507)) | (1 << (MySqlParser.UNDEFINED - 507)) | (1 << (MySqlParser.UNDOFILE - 507)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 507)) | (1 << (MySqlParser.UNKNOWN - 507)) | (1 << (MySqlParser.UPGRADE - 507)) | (1 << (MySqlParser.USER - 507)) | (1 << (MySqlParser.VALIDATION - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MySqlParser.VALUE - 539)) | (1 << (MySqlParser.VARIABLES - 539)) | (1 << (MySqlParser.VIEW - 539)) | (1 << (MySqlParser.WAIT - 539)) | (1 << (MySqlParser.WARNINGS - 539)) | (1 << (MySqlParser.WITHOUT - 539)) | (1 << (MySqlParser.WORK - 539)) | (1 << (MySqlParser.WRAPPER - 539)) | (1 << (MySqlParser.X509 - 539)) | (1 << (MySqlParser.XA - 539)) | (1 << (MySqlParser.XML - 539)) | (1 << (MySqlParser.QUARTER - 539)) | (1 << (MySqlParser.MONTH - 539)) | (1 << (MySqlParser.DAY - 539)) | (1 << (MySqlParser.HOUR - 539)) | (1 << (MySqlParser.MINUTE - 539)) | (1 << (MySqlParser.WEEK - 539)) | (1 << (MySqlParser.SECOND - 539)) | (1 << (MySqlParser.MICROSECOND - 539)) | (1 << (MySqlParser.TABLES - 539)) | (1 << (MySqlParser.ROUTINE - 539)) | (1 << (MySqlParser.EXECUTE - 539)) | (1 << (MySqlParser.FILE - 539)) | (1 << (MySqlParser.PROCESS - 539)) | (1 << (MySqlParser.RELOAD - 539)) | (1 << (MySqlParser.SHUTDOWN - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MySqlParser.SUPER - 571)) | (1 << (MySqlParser.PRIVILEGES - 571)) | (1 << (MySqlParser.ARMSCII8 - 571)) | (1 << (MySqlParser.ASCII - 571)) | (1 << (MySqlParser.BIG5 - 571)) | (1 << (MySqlParser.CP1250 - 571)) | (1 << (MySqlParser.CP1251 - 571)) | (1 << (MySqlParser.CP1256 - 571)) | (1 << (MySqlParser.CP1257 - 571)) | (1 << (MySqlParser.CP850 - 571)) | (1 << (MySqlParser.CP852 - 571)) | (1 << (MySqlParser.CP866 - 571)) | (1 << (MySqlParser.CP932 - 571)) | (1 << (MySqlParser.DEC8 - 571)) | (1 << (MySqlParser.EUCJPMS - 571)) | (1 << (MySqlParser.EUCKR - 571)) | (1 << (MySqlParser.GB2312 - 571)) | (1 << (MySqlParser.GBK - 571)) | (1 << (MySqlParser.GEOSTD8 - 571)) | (1 << (MySqlParser.GREEK - 571)) | (1 << (MySqlParser.HEBREW - 571)) | (1 << (MySqlParser.HP8 - 571)) | (1 << (MySqlParser.KEYBCS2 - 571)) | (1 << (MySqlParser.KOI8R - 571)) | (1 << (MySqlParser.KOI8U - 571)) | (1 << (MySqlParser.LATIN1 - 571)) | (1 << (MySqlParser.LATIN2 - 571)) | (1 << (MySqlParser.LATIN5 - 571)) | (1 << (MySqlParser.LATIN7 - 571)) | (1 << (MySqlParser.MACCE - 571)) | (1 << (MySqlParser.MACROMAN - 571)) | (1 << (MySqlParser.SJIS - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MySqlParser.SWE7 - 603)) | (1 << (MySqlParser.TIS620 - 603)) | (1 << (MySqlParser.UCS2 - 603)) | (1 << (MySqlParser.UJIS - 603)) | (1 << (MySqlParser.UTF16 - 603)) | (1 << (MySqlParser.UTF16LE - 603)) | (1 << (MySqlParser.UTF32 - 603)) | (1 << (MySqlParser.UTF8 - 603)) | (1 << (MySqlParser.UTF8MB3 - 603)) | (1 << (MySqlParser.UTF8MB4 - 603)) | (1 << (MySqlParser.ARCHIVE - 603)) | (1 << (MySqlParser.BLACKHOLE - 603)) | (1 << (MySqlParser.CSV - 603)) | (1 << (MySqlParser.FEDERATED - 603)) | (1 << (MySqlParser.INNODB - 603)) | (1 << (MySqlParser.MEMORY - 603)) | (1 << (MySqlParser.MRG_MYISAM - 603)) | (1 << (MySqlParser.MYISAM - 603)) | (1 << (MySqlParser.NDB - 603)) | (1 << (MySqlParser.NDBCLUSTER - 603)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 603)) | (1 << (MySqlParser.REPEATABLE - 603)) | (1 << (MySqlParser.COMMITTED - 603)) | (1 << (MySqlParser.UNCOMMITTED - 603)) | (1 << (MySqlParser.SERIALIZABLE - 603)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 603)) | (1 << (MySqlParser.LINESTRING - 603)) | (1 << (MySqlParser.MULTILINESTRING - 603)) | (1 << (MySqlParser.MULTIPOINT - 603)) | (1 << (MySqlParser.MULTIPOLYGON - 603)) | (1 << (MySqlParser.POINT - 603)) | (1 << (MySqlParser.POLYGON - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MySqlParser.ABS - 635)) | (1 << (MySqlParser.ACOS - 635)) | (1 << (MySqlParser.ADDDATE - 635)) | (1 << (MySqlParser.ADDTIME - 635)) | (1 << (MySqlParser.AES_DECRYPT - 635)) | (1 << (MySqlParser.AES_ENCRYPT - 635)) | (1 << (MySqlParser.AREA - 635)) | (1 << (MySqlParser.ASBINARY - 635)) | (1 << (MySqlParser.ASIN - 635)) | (1 << (MySqlParser.ASTEXT - 635)) | (1 << (MySqlParser.ASWKB - 635)) | (1 << (MySqlParser.ASWKT - 635)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 635)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 635)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 635)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 635)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 635)) | (1 << (MySqlParser.ATAN - 635)) | (1 << (MySqlParser.ATAN2 - 635)) | (1 << (MySqlParser.BENCHMARK - 635)) | (1 << (MySqlParser.BIN - 635)) | (1 << (MySqlParser.BIT_COUNT - 635)) | (1 << (MySqlParser.BIT_LENGTH - 635)) | (1 << (MySqlParser.BUFFER - 635)) | (1 << (MySqlParser.CEIL - 635)) | (1 << (MySqlParser.CEILING - 635)) | (1 << (MySqlParser.CENTROID - 635)) | (1 << (MySqlParser.CHARACTER_LENGTH - 635)) | (1 << (MySqlParser.CHARSET - 635)) | (1 << (MySqlParser.CHAR_LENGTH - 635)) | (1 << (MySqlParser.COERCIBILITY - 635)) | (1 << (MySqlParser.COLLATION - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MySqlParser.COMPRESS - 667)) | (1 << (MySqlParser.CONCAT - 667)) | (1 << (MySqlParser.CONCAT_WS - 667)) | (1 << (MySqlParser.CONNECTION_ID - 667)) | (1 << (MySqlParser.CONV - 667)) | (1 << (MySqlParser.CONVERT_TZ - 667)) | (1 << (MySqlParser.COS - 667)) | (1 << (MySqlParser.COT - 667)) | (1 << (MySqlParser.CRC32 - 667)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 667)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 667)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 667)) | (1 << (MySqlParser.CREATE_DIGEST - 667)) | (1 << (MySqlParser.CROSSES - 667)) | (1 << (MySqlParser.DATEDIFF - 667)) | (1 << (MySqlParser.DATE_FORMAT - 667)) | (1 << (MySqlParser.DAYNAME - 667)) | (1 << (MySqlParser.DAYOFMONTH - 667)) | (1 << (MySqlParser.DAYOFWEEK - 667)) | (1 << (MySqlParser.DAYOFYEAR - 667)) | (1 << (MySqlParser.DECODE - 667)) | (1 << (MySqlParser.DEGREES - 667)) | (1 << (MySqlParser.DES_DECRYPT - 667)) | (1 << (MySqlParser.DES_ENCRYPT - 667)) | (1 << (MySqlParser.DIMENSION - 667)) | (1 << (MySqlParser.DISJOINT - 667)) | (1 << (MySqlParser.ELT - 667)) | (1 << (MySqlParser.ENCODE - 667)) | (1 << (MySqlParser.ENCRYPT - 667)) | (1 << (MySqlParser.ENDPOINT - 667)) | (1 << (MySqlParser.ENVELOPE - 667)) | (1 << (MySqlParser.EQUALS - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MySqlParser.EXP - 699)) | (1 << (MySqlParser.EXPORT_SET - 699)) | (1 << (MySqlParser.EXTERIORRING - 699)) | (1 << (MySqlParser.EXTRACTVALUE - 699)) | (1 << (MySqlParser.FIELD - 699)) | (1 << (MySqlParser.FIND_IN_SET - 699)) | (1 << (MySqlParser.FLOOR - 699)) | (1 << (MySqlParser.FORMAT - 699)) | (1 << (MySqlParser.FOUND_ROWS - 699)) | (1 << (MySqlParser.FROM_BASE64 - 699)) | (1 << (MySqlParser.FROM_DAYS - 699)) | (1 << (MySqlParser.FROM_UNIXTIME - 699)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 699)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 699)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 699)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYN - 699)) | (1 << (MySqlParser.GEOMETRYTYPE - 699)) | (1 << (MySqlParser.GEOMFROMTEXT - 699)) | (1 << (MySqlParser.GEOMFROMWKB - 699)) | (1 << (MySqlParser.GET_FORMAT - 699)) | (1 << (MySqlParser.GET_LOCK - 699)) | (1 << (MySqlParser.GLENGTH - 699)) | (1 << (MySqlParser.GREATEST - 699)) | (1 << (MySqlParser.GTID_SUBSET - 699)) | (1 << (MySqlParser.GTID_SUBTRACT - 699)) | (1 << (MySqlParser.HEX - 699)) | (1 << (MySqlParser.IFNULL - 699)) | (1 << (MySqlParser.INET6_ATON - 699)) | (1 << (MySqlParser.INET6_NTOA - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MySqlParser.INET_ATON - 731)) | (1 << (MySqlParser.INET_NTOA - 731)) | (1 << (MySqlParser.INSTR - 731)) | (1 << (MySqlParser.INTERIORRINGN - 731)) | (1 << (MySqlParser.INTERSECTS - 731)) | (1 << (MySqlParser.ISCLOSED - 731)) | (1 << (MySqlParser.ISEMPTY - 731)) | (1 << (MySqlParser.ISNULL - 731)) | (1 << (MySqlParser.ISSIMPLE - 731)) | (1 << (MySqlParser.IS_FREE_LOCK - 731)) | (1 << (MySqlParser.IS_IPV4 - 731)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 731)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 731)) | (1 << (MySqlParser.IS_IPV6 - 731)) | (1 << (MySqlParser.IS_USED_LOCK - 731)) | (1 << (MySqlParser.LAST_INSERT_ID - 731)) | (1 << (MySqlParser.LCASE - 731)) | (1 << (MySqlParser.LEAST - 731)) | (1 << (MySqlParser.LENGTH - 731)) | (1 << (MySqlParser.LINEFROMTEXT - 731)) | (1 << (MySqlParser.LINEFROMWKB - 731)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 731)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 731)) | (1 << (MySqlParser.LN - 731)) | (1 << (MySqlParser.LOAD_FILE - 731)) | (1 << (MySqlParser.LOCATE - 731)) | (1 << (MySqlParser.LOG - 731)) | (1 << (MySqlParser.LOG10 - 731)) | (1 << (MySqlParser.LOG2 - 731)) | (1 << (MySqlParser.LOWER - 731)) | (1 << (MySqlParser.LPAD - 731)) | (1 << (MySqlParser.LTRIM - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MySqlParser.MAKEDATE - 763)) | (1 << (MySqlParser.MAKETIME - 763)) | (1 << (MySqlParser.MAKE_SET - 763)) | (1 << (MySqlParser.MASTER_POS_WAIT - 763)) | (1 << (MySqlParser.MBRCONTAINS - 763)) | (1 << (MySqlParser.MBRDISJOINT - 763)) | (1 << (MySqlParser.MBREQUAL - 763)) | (1 << (MySqlParser.MBRINTERSECTS - 763)) | (1 << (MySqlParser.MBROVERLAPS - 763)) | (1 << (MySqlParser.MBRTOUCHES - 763)) | (1 << (MySqlParser.MBRWITHIN - 763)) | (1 << (MySqlParser.MD5 - 763)) | (1 << (MySqlParser.MLINEFROMTEXT - 763)) | (1 << (MySqlParser.MLINEFROMWKB - 763)) | (1 << (MySqlParser.MONTHNAME - 763)) | (1 << (MySqlParser.MPOINTFROMTEXT - 763)) | (1 << (MySqlParser.MPOINTFROMWKB - 763)) | (1 << (MySqlParser.MPOLYFROMTEXT - 763)) | (1 << (MySqlParser.MPOLYFROMWKB - 763)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 763)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 763)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 763)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 763)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 763)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 763)) | (1 << (MySqlParser.NAME_CONST - 763)) | (1 << (MySqlParser.NULLIF - 763)) | (1 << (MySqlParser.NUMGEOMETRIES - 763)) | (1 << (MySqlParser.NUMINTERIORRINGS - 763)) | (1 << (MySqlParser.NUMPOINTS - 763)) | (1 << (MySqlParser.OCT - 763)) | (1 << (MySqlParser.OCTET_LENGTH - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MySqlParser.ORD - 795)) | (1 << (MySqlParser.OVERLAPS - 795)) | (1 << (MySqlParser.PERIOD_ADD - 795)) | (1 << (MySqlParser.PERIOD_DIFF - 795)) | (1 << (MySqlParser.PI - 795)) | (1 << (MySqlParser.POINTFROMTEXT - 795)) | (1 << (MySqlParser.POINTFROMWKB - 795)) | (1 << (MySqlParser.POINTN - 795)) | (1 << (MySqlParser.POLYFROMTEXT - 795)) | (1 << (MySqlParser.POLYFROMWKB - 795)) | (1 << (MySqlParser.POLYGONFROMTEXT - 795)) | (1 << (MySqlParser.POLYGONFROMWKB - 795)) | (1 << (MySqlParser.POW - 795)) | (1 << (MySqlParser.POWER - 795)) | (1 << (MySqlParser.QUOTE - 795)) | (1 << (MySqlParser.RADIANS - 795)) | (1 << (MySqlParser.RAND - 795)) | (1 << (MySqlParser.RANDOM_BYTES - 795)) | (1 << (MySqlParser.RELEASE_LOCK - 795)) | (1 << (MySqlParser.REVERSE - 795)) | (1 << (MySqlParser.ROUND - 795)) | (1 << (MySqlParser.ROW_COUNT - 795)) | (1 << (MySqlParser.RPAD - 795)) | (1 << (MySqlParser.RTRIM - 795)) | (1 << (MySqlParser.SEC_TO_TIME - 795)) | (1 << (MySqlParser.SESSION_USER - 795)) | (1 << (MySqlParser.SHA - 795)) | (1 << (MySqlParser.SHA1 - 795)) | (1 << (MySqlParser.SHA2 - 795)) | (1 << (MySqlParser.SIGN - 795)) | (1 << (MySqlParser.SIN - 795)) | (1 << (MySqlParser.SLEEP - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MySqlParser.SOUNDEX - 827)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 827)) | (1 << (MySqlParser.SQRT - 827)) | (1 << (MySqlParser.SRID - 827)) | (1 << (MySqlParser.STARTPOINT - 827)) | (1 << (MySqlParser.STRCMP - 827)) | (1 << (MySqlParser.STR_TO_DATE - 827)) | (1 << (MySqlParser.ST_AREA - 827)) | (1 << (MySqlParser.ST_ASBINARY - 827)) | (1 << (MySqlParser.ST_ASTEXT - 827)) | (1 << (MySqlParser.ST_ASWKB - 827)) | (1 << (MySqlParser.ST_ASWKT - 827)) | (1 << (MySqlParser.ST_BUFFER - 827)) | (1 << (MySqlParser.ST_CENTROID - 827)) | (1 << (MySqlParser.ST_CONTAINS - 827)) | (1 << (MySqlParser.ST_CROSSES - 827)) | (1 << (MySqlParser.ST_DIFFERENCE - 827)) | (1 << (MySqlParser.ST_DIMENSION - 827)) | (1 << (MySqlParser.ST_DISJOINT - 827)) | (1 << (MySqlParser.ST_DISTANCE - 827)) | (1 << (MySqlParser.ST_ENDPOINT - 827)) | (1 << (MySqlParser.ST_ENVELOPE - 827)) | (1 << (MySqlParser.ST_EQUALS - 827)) | (1 << (MySqlParser.ST_EXTERIORRING - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYN - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MySqlParser.ST_GEOMETRYTYPE - 859)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 859)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 859)) | (1 << (MySqlParser.ST_INTERIORRINGN - 859)) | (1 << (MySqlParser.ST_INTERSECTION - 859)) | (1 << (MySqlParser.ST_INTERSECTS - 859)) | (1 << (MySqlParser.ST_ISCLOSED - 859)) | (1 << (MySqlParser.ST_ISEMPTY - 859)) | (1 << (MySqlParser.ST_ISSIMPLE - 859)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 859)) | (1 << (MySqlParser.ST_LINEFROMWKB - 859)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 859)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 859)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 859)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 859)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 859)) | (1 << (MySqlParser.ST_NUMPOINTS - 859)) | (1 << (MySqlParser.ST_OVERLAPS - 859)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 859)) | (1 << (MySqlParser.ST_POINTFROMWKB - 859)) | (1 << (MySqlParser.ST_POINTN - 859)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 859)) | (1 << (MySqlParser.ST_POLYFROMWKB - 859)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 859)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 859)) | (1 << (MySqlParser.ST_SRID - 859)) | (1 << (MySqlParser.ST_STARTPOINT - 859)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 859)) | (1 << (MySqlParser.ST_TOUCHES - 859)) | (1 << (MySqlParser.ST_UNION - 859)) | (1 << (MySqlParser.ST_WITHIN - 859)) | (1 << (MySqlParser.ST_X - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MySqlParser.ST_Y - 891)) | (1 << (MySqlParser.SUBDATE - 891)) | (1 << (MySqlParser.SUBSTRING_INDEX - 891)) | (1 << (MySqlParser.SUBTIME - 891)) | (1 << (MySqlParser.SYSTEM_USER - 891)) | (1 << (MySqlParser.TAN - 891)) | (1 << (MySqlParser.TIMEDIFF - 891)) | (1 << (MySqlParser.TIMESTAMPADD - 891)) | (1 << (MySqlParser.TIMESTAMPDIFF - 891)) | (1 << (MySqlParser.TIME_FORMAT - 891)) | (1 << (MySqlParser.TIME_TO_SEC - 891)) | (1 << (MySqlParser.TOUCHES - 891)) | (1 << (MySqlParser.TO_BASE64 - 891)) | (1 << (MySqlParser.TO_DAYS - 891)) | (1 << (MySqlParser.TO_SECONDS - 891)) | (1 << (MySqlParser.UCASE - 891)) | (1 << (MySqlParser.UNCOMPRESS - 891)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 891)) | (1 << (MySqlParser.UNHEX - 891)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 891)) | (1 << (MySqlParser.UPDATEXML - 891)) | (1 << (MySqlParser.UPPER - 891)) | (1 << (MySqlParser.UUID - 891)) | (1 << (MySqlParser.UUID_SHORT - 891)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 891)) | (1 << (MySqlParser.VERSION - 891)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 891)) | (1 << (MySqlParser.WEEKDAY - 891)) | (1 << (MySqlParser.WEEKOFYEAR - 891)) | (1 << (MySqlParser.WEIGHT_STRING - 891)) | (1 << (MySqlParser.WITHIN - 891)) | (1 << (MySqlParser.YEARWEEK - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MySqlParser.Y_FUNCTION - 923)) | (1 << (MySqlParser.X_FUNCTION - 923)) | (1 << (MySqlParser.PLUS - 923)) | (1 << (MySqlParser.MINUS - 923)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 923)) | (1 << (MySqlParser.BIT_NOT_OP - 923)) | (1 << (MySqlParser.LR_BRACKET - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 955)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 955)) | (1 << (MySqlParser.STRING_LITERAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 955)) | (1 << (MySqlParser.REAL_LITERAL - 955)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 955)) | (1 << (MySqlParser.BIT_STRING - 955)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 955)) | (1 << (MySqlParser.ID - 955)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 955)) | (1 << (MySqlParser.LOCAL_ID - 955)) | (1 << (MySqlParser.GLOBAL_ID - 955)))) !== 0)) {
					{
					this.state = 5499;
					this.functionArgs();
					}
				}

				this.state = 5502;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5504;
				this.fullId();
				this.state = 5505;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySqlParser.CASE) | (1 << MySqlParser.CAST) | (1 << MySqlParser.CONVERT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (MySqlParser.CURRENT_USER - 33)) | (1 << (MySqlParser.DATABASE - 33)) | (1 << (MySqlParser.EXISTS - 33)) | (1 << (MySqlParser.FALSE - 33)))) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (MySqlParser.IF - 67)) | (1 << (MySqlParser.INSERT - 67)) | (1 << (MySqlParser.INTERVAL - 67)) | (1 << (MySqlParser.LEFT - 67)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (MySqlParser.NOT - 100)) | (1 << (MySqlParser.NULL_LITERAL - 100)) | (1 << (MySqlParser.REPLACE - 100)) | (1 << (MySqlParser.RIGHT - 100)))) !== 0) || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & ((1 << (MySqlParser.TRUE - 154)) | (1 << (MySqlParser.VALUES - 154)) | (1 << (MySqlParser.DATE - 154)) | (1 << (MySqlParser.TIME - 154)) | (1 << (MySqlParser.TIMESTAMP - 154)))) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & ((1 << (MySqlParser.DATETIME - 186)) | (1 << (MySqlParser.YEAR - 186)) | (1 << (MySqlParser.CHAR - 186)) | (1 << (MySqlParser.BINARY - 186)) | (1 << (MySqlParser.TEXT - 186)) | (1 << (MySqlParser.ENUM - 186)) | (1 << (MySqlParser.SERIAL - 186)) | (1 << (MySqlParser.AVG - 186)) | (1 << (MySqlParser.BIT_AND - 186)) | (1 << (MySqlParser.BIT_OR - 186)) | (1 << (MySqlParser.BIT_XOR - 186)) | (1 << (MySqlParser.COUNT - 186)))) !== 0) || ((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (MySqlParser.GROUP_CONCAT - 218)) | (1 << (MySqlParser.MAX - 218)) | (1 << (MySqlParser.MIN - 218)) | (1 << (MySqlParser.STD - 218)) | (1 << (MySqlParser.STDDEV - 218)) | (1 << (MySqlParser.STDDEV_POP - 218)) | (1 << (MySqlParser.STDDEV_SAMP - 218)) | (1 << (MySqlParser.SUM - 218)) | (1 << (MySqlParser.VAR_POP - 218)) | (1 << (MySqlParser.VAR_SAMP - 218)) | (1 << (MySqlParser.VARIANCE - 218)) | (1 << (MySqlParser.CURRENT_DATE - 218)) | (1 << (MySqlParser.CURRENT_TIME - 218)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 218)) | (1 << (MySqlParser.LOCALTIME - 218)) | (1 << (MySqlParser.CURDATE - 218)) | (1 << (MySqlParser.CURTIME - 218)) | (1 << (MySqlParser.DATE_ADD - 218)) | (1 << (MySqlParser.DATE_SUB - 218)) | (1 << (MySqlParser.EXTRACT - 218)) | (1 << (MySqlParser.LOCALTIMESTAMP - 218)) | (1 << (MySqlParser.NOW - 218)) | (1 << (MySqlParser.POSITION - 218)) | (1 << (MySqlParser.SUBSTR - 218)) | (1 << (MySqlParser.SUBSTRING - 218)) | (1 << (MySqlParser.SYSDATE - 218)) | (1 << (MySqlParser.TRIM - 218)) | (1 << (MySqlParser.UTC_DATE - 218)) | (1 << (MySqlParser.UTC_TIME - 218)) | (1 << (MySqlParser.UTC_TIMESTAMP - 218)) | (1 << (MySqlParser.ACCOUNT - 218)) | (1 << (MySqlParser.ACTION - 218)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (MySqlParser.AFTER - 250)) | (1 << (MySqlParser.AGGREGATE - 250)) | (1 << (MySqlParser.ALGORITHM - 250)) | (1 << (MySqlParser.ANY - 250)) | (1 << (MySqlParser.AT - 250)) | (1 << (MySqlParser.AUTHORS - 250)) | (1 << (MySqlParser.AUTOCOMMIT - 250)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 250)) | (1 << (MySqlParser.AUTO_INCREMENT - 250)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 250)) | (1 << (MySqlParser.BEGIN - 250)) | (1 << (MySqlParser.BINLOG - 250)) | (1 << (MySqlParser.BIT - 250)) | (1 << (MySqlParser.BLOCK - 250)) | (1 << (MySqlParser.BOOL - 250)) | (1 << (MySqlParser.BOOLEAN - 250)) | (1 << (MySqlParser.BTREE - 250)) | (1 << (MySqlParser.CASCADED - 250)) | (1 << (MySqlParser.CHAIN - 250)) | (1 << (MySqlParser.CHANGED - 250)) | (1 << (MySqlParser.CHANNEL - 250)) | (1 << (MySqlParser.CHECKSUM - 250)) | (1 << (MySqlParser.CIPHER - 250)) | (1 << (MySqlParser.CLIENT - 250)) | (1 << (MySqlParser.COALESCE - 250)) | (1 << (MySqlParser.CODE - 250)) | (1 << (MySqlParser.COLUMNS - 250)) | (1 << (MySqlParser.COLUMN_FORMAT - 250)) | (1 << (MySqlParser.COMMENT - 250)) | (1 << (MySqlParser.COMMIT - 250)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (MySqlParser.COMPACT - 282)) | (1 << (MySqlParser.COMPLETION - 282)) | (1 << (MySqlParser.COMPRESSED - 282)) | (1 << (MySqlParser.COMPRESSION - 282)) | (1 << (MySqlParser.CONCURRENT - 282)) | (1 << (MySqlParser.CONNECTION - 282)) | (1 << (MySqlParser.CONSISTENT - 282)) | (1 << (MySqlParser.CONTAINS - 282)) | (1 << (MySqlParser.CONTEXT - 282)) | (1 << (MySqlParser.CONTRIBUTORS - 282)) | (1 << (MySqlParser.COPY - 282)) | (1 << (MySqlParser.CPU - 282)) | (1 << (MySqlParser.DATA - 282)) | (1 << (MySqlParser.DATAFILE - 282)) | (1 << (MySqlParser.DEALLOCATE - 282)) | (1 << (MySqlParser.DEFAULT_AUTH - 282)) | (1 << (MySqlParser.DEFINER - 282)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 282)) | (1 << (MySqlParser.DIRECTORY - 282)) | (1 << (MySqlParser.DISABLE - 282)) | (1 << (MySqlParser.DISCARD - 282)) | (1 << (MySqlParser.DISK - 282)) | (1 << (MySqlParser.DO - 282)) | (1 << (MySqlParser.DUMPFILE - 282)) | (1 << (MySqlParser.DUPLICATE - 282)) | (1 << (MySqlParser.DYNAMIC - 282)) | (1 << (MySqlParser.ENABLE - 282)) | (1 << (MySqlParser.ENCRYPTION - 282)) | (1 << (MySqlParser.ENDS - 282)) | (1 << (MySqlParser.ENGINE - 282)))) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & ((1 << (MySqlParser.ENGINES - 314)) | (1 << (MySqlParser.ERROR - 314)) | (1 << (MySqlParser.ERRORS - 314)) | (1 << (MySqlParser.ESCAPE - 314)) | (1 << (MySqlParser.EVEN - 314)) | (1 << (MySqlParser.EVENT - 314)) | (1 << (MySqlParser.EVENTS - 314)) | (1 << (MySqlParser.EVERY - 314)) | (1 << (MySqlParser.EXCHANGE - 314)) | (1 << (MySqlParser.EXCLUSIVE - 314)) | (1 << (MySqlParser.EXPIRE - 314)) | (1 << (MySqlParser.EXTENDED - 314)) | (1 << (MySqlParser.EXTENT_SIZE - 314)) | (1 << (MySqlParser.FAST - 314)) | (1 << (MySqlParser.FAULTS - 314)) | (1 << (MySqlParser.FIELDS - 314)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 314)) | (1 << (MySqlParser.FILTER - 314)) | (1 << (MySqlParser.FIRST - 314)) | (1 << (MySqlParser.FIXED - 314)) | (1 << (MySqlParser.FOLLOWS - 314)) | (1 << (MySqlParser.FULL - 314)) | (1 << (MySqlParser.FUNCTION - 314)) | (1 << (MySqlParser.GLOBAL - 314)) | (1 << (MySqlParser.GRANTS - 314)) | (1 << (MySqlParser.GROUP_REPLICATION - 314)) | (1 << (MySqlParser.HASH - 314)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MySqlParser.HOST - 347)) | (1 << (MySqlParser.IDENTIFIED - 347)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 347)) | (1 << (MySqlParser.IMPORT - 347)) | (1 << (MySqlParser.INDEXES - 347)) | (1 << (MySqlParser.INITIAL_SIZE - 347)) | (1 << (MySqlParser.INPLACE - 347)) | (1 << (MySqlParser.INSERT_METHOD - 347)) | (1 << (MySqlParser.INSTANCE - 347)) | (1 << (MySqlParser.INVOKER - 347)) | (1 << (MySqlParser.IO - 347)) | (1 << (MySqlParser.IO_THREAD - 347)) | (1 << (MySqlParser.IPC - 347)) | (1 << (MySqlParser.ISOLATION - 347)) | (1 << (MySqlParser.ISSUER - 347)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 347)) | (1 << (MySqlParser.LANGUAGE - 347)) | (1 << (MySqlParser.LAST - 347)) | (1 << (MySqlParser.LEAVES - 347)) | (1 << (MySqlParser.LESS - 347)) | (1 << (MySqlParser.LEVEL - 347)) | (1 << (MySqlParser.LIST - 347)) | (1 << (MySqlParser.LOCAL - 347)) | (1 << (MySqlParser.LOGFILE - 347)) | (1 << (MySqlParser.LOGS - 347)) | (1 << (MySqlParser.MASTER - 347)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 347)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 347)) | (1 << (MySqlParser.MASTER_DELAY - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 379)) | (1 << (MySqlParser.MASTER_HOST - 379)) | (1 << (MySqlParser.MASTER_LOG_FILE - 379)) | (1 << (MySqlParser.MASTER_LOG_POS - 379)) | (1 << (MySqlParser.MASTER_PASSWORD - 379)) | (1 << (MySqlParser.MASTER_PORT - 379)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 379)) | (1 << (MySqlParser.MASTER_SSL - 379)) | (1 << (MySqlParser.MASTER_SSL_CA - 379)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 379)) | (1 << (MySqlParser.MASTER_SSL_CERT - 379)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 379)) | (1 << (MySqlParser.MASTER_SSL_CRL - 379)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 379)) | (1 << (MySqlParser.MASTER_SSL_KEY - 379)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 379)) | (1 << (MySqlParser.MASTER_USER - 379)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_ROWS - 379)) | (1 << (MySqlParser.MAX_SIZE - 379)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 379)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 379)) | (1 << (MySqlParser.MEDIUM - 379)) | (1 << (MySqlParser.MERGE - 379)) | (1 << (MySqlParser.MID - 379)) | (1 << (MySqlParser.MIGRATE - 379)) | (1 << (MySqlParser.MIN_ROWS - 379)) | (1 << (MySqlParser.MODIFY - 379)) | (1 << (MySqlParser.MUTEX - 379)) | (1 << (MySqlParser.MYSQL - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MySqlParser.NAME - 411)) | (1 << (MySqlParser.NAMES - 411)) | (1 << (MySqlParser.NCHAR - 411)) | (1 << (MySqlParser.NEVER - 411)) | (1 << (MySqlParser.NO - 411)) | (1 << (MySqlParser.NODEGROUP - 411)) | (1 << (MySqlParser.NONE - 411)) | (1 << (MySqlParser.OFFLINE - 411)) | (1 << (MySqlParser.OFFSET - 411)) | (1 << (MySqlParser.OJ - 411)) | (1 << (MySqlParser.OLD_PASSWORD - 411)) | (1 << (MySqlParser.ONE - 411)) | (1 << (MySqlParser.ONLINE - 411)) | (1 << (MySqlParser.ONLY - 411)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 411)) | (1 << (MySqlParser.OPTIONS - 411)) | (1 << (MySqlParser.OWNER - 411)) | (1 << (MySqlParser.PACK_KEYS - 411)) | (1 << (MySqlParser.PAGE - 411)) | (1 << (MySqlParser.PARSER - 411)) | (1 << (MySqlParser.PARTIAL - 411)) | (1 << (MySqlParser.PARTITIONING - 411)) | (1 << (MySqlParser.PARTITIONS - 411)) | (1 << (MySqlParser.PASSWORD - 411)) | (1 << (MySqlParser.PHASE - 411)) | (1 << (MySqlParser.PLUGIN_DIR - 411)) | (1 << (MySqlParser.PLUGINS - 411)) | (1 << (MySqlParser.PORT - 411)) | (1 << (MySqlParser.PRECEDES - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MySqlParser.PREPARE - 443)) | (1 << (MySqlParser.PRESERVE - 443)) | (1 << (MySqlParser.PREV - 443)) | (1 << (MySqlParser.PROCESSLIST - 443)) | (1 << (MySqlParser.PROFILE - 443)) | (1 << (MySqlParser.PROFILES - 443)) | (1 << (MySqlParser.PROXY - 443)) | (1 << (MySqlParser.QUERY - 443)) | (1 << (MySqlParser.QUICK - 443)) | (1 << (MySqlParser.REBUILD - 443)) | (1 << (MySqlParser.RECOVER - 443)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 443)) | (1 << (MySqlParser.REDUNDANT - 443)) | (1 << (MySqlParser.RELAY_LOG_FILE - 443)) | (1 << (MySqlParser.RELAY_LOG_POS - 443)) | (1 << (MySqlParser.RELAYLOG - 443)) | (1 << (MySqlParser.REMOVE - 443)) | (1 << (MySqlParser.REORGANIZE - 443)) | (1 << (MySqlParser.REPAIR - 443)) | (1 << (MySqlParser.REPLICATE_DO_DB - 443)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 443)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 443)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 443)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 443)) | (1 << (MySqlParser.REPLICATION - 443)) | (1 << (MySqlParser.RESUME - 443)) | (1 << (MySqlParser.RETURNS - 443)) | (1 << (MySqlParser.ROLLBACK - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MySqlParser.ROLLUP - 475)) | (1 << (MySqlParser.ROTATE - 475)) | (1 << (MySqlParser.ROW - 475)) | (1 << (MySqlParser.ROWS - 475)) | (1 << (MySqlParser.ROW_FORMAT - 475)) | (1 << (MySqlParser.SAVEPOINT - 475)) | (1 << (MySqlParser.SCHEDULE - 475)) | (1 << (MySqlParser.SECURITY - 475)) | (1 << (MySqlParser.SERVER - 475)) | (1 << (MySqlParser.SESSION - 475)) | (1 << (MySqlParser.SHARE - 475)) | (1 << (MySqlParser.SHARED - 475)) | (1 << (MySqlParser.SIGNED - 475)) | (1 << (MySqlParser.SIMPLE - 475)) | (1 << (MySqlParser.SLAVE - 475)) | (1 << (MySqlParser.SNAPSHOT - 475)) | (1 << (MySqlParser.SOCKET - 475)) | (1 << (MySqlParser.SOME - 475)) | (1 << (MySqlParser.SOUNDS - 475)) | (1 << (MySqlParser.SOURCE - 475)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 475)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 475)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 475)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 475)) | (1 << (MySqlParser.SQL_CACHE - 475)) | (1 << (MySqlParser.SQL_NO_CACHE - 475)) | (1 << (MySqlParser.SQL_THREAD - 475)) | (1 << (MySqlParser.START - 475)) | (1 << (MySqlParser.STARTS - 475)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MySqlParser.STATS_PERSISTENT - 507)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 507)) | (1 << (MySqlParser.STATUS - 507)) | (1 << (MySqlParser.STOP - 507)) | (1 << (MySqlParser.STORAGE - 507)) | (1 << (MySqlParser.STRING - 507)) | (1 << (MySqlParser.SUBJECT - 507)) | (1 << (MySqlParser.SUBPARTITION - 507)) | (1 << (MySqlParser.SUBPARTITIONS - 507)) | (1 << (MySqlParser.SUSPEND - 507)) | (1 << (MySqlParser.SWAPS - 507)) | (1 << (MySqlParser.SWITCHES - 507)) | (1 << (MySqlParser.TABLESPACE - 507)) | (1 << (MySqlParser.TEMPORARY - 507)) | (1 << (MySqlParser.TEMPTABLE - 507)) | (1 << (MySqlParser.THAN - 507)) | (1 << (MySqlParser.TRANSACTION - 507)) | (1 << (MySqlParser.TRUNCATE - 507)) | (1 << (MySqlParser.UNDEFINED - 507)) | (1 << (MySqlParser.UNDOFILE - 507)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 507)) | (1 << (MySqlParser.UNKNOWN - 507)) | (1 << (MySqlParser.UPGRADE - 507)) | (1 << (MySqlParser.USER - 507)) | (1 << (MySqlParser.VALIDATION - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MySqlParser.VALUE - 539)) | (1 << (MySqlParser.VARIABLES - 539)) | (1 << (MySqlParser.VIEW - 539)) | (1 << (MySqlParser.WAIT - 539)) | (1 << (MySqlParser.WARNINGS - 539)) | (1 << (MySqlParser.WITHOUT - 539)) | (1 << (MySqlParser.WORK - 539)) | (1 << (MySqlParser.WRAPPER - 539)) | (1 << (MySqlParser.X509 - 539)) | (1 << (MySqlParser.XA - 539)) | (1 << (MySqlParser.XML - 539)) | (1 << (MySqlParser.QUARTER - 539)) | (1 << (MySqlParser.MONTH - 539)) | (1 << (MySqlParser.DAY - 539)) | (1 << (MySqlParser.HOUR - 539)) | (1 << (MySqlParser.MINUTE - 539)) | (1 << (MySqlParser.WEEK - 539)) | (1 << (MySqlParser.SECOND - 539)) | (1 << (MySqlParser.MICROSECOND - 539)) | (1 << (MySqlParser.TABLES - 539)) | (1 << (MySqlParser.ROUTINE - 539)) | (1 << (MySqlParser.EXECUTE - 539)) | (1 << (MySqlParser.FILE - 539)) | (1 << (MySqlParser.PROCESS - 539)) | (1 << (MySqlParser.RELOAD - 539)) | (1 << (MySqlParser.SHUTDOWN - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MySqlParser.SUPER - 571)) | (1 << (MySqlParser.PRIVILEGES - 571)) | (1 << (MySqlParser.ARMSCII8 - 571)) | (1 << (MySqlParser.ASCII - 571)) | (1 << (MySqlParser.BIG5 - 571)) | (1 << (MySqlParser.CP1250 - 571)) | (1 << (MySqlParser.CP1251 - 571)) | (1 << (MySqlParser.CP1256 - 571)) | (1 << (MySqlParser.CP1257 - 571)) | (1 << (MySqlParser.CP850 - 571)) | (1 << (MySqlParser.CP852 - 571)) | (1 << (MySqlParser.CP866 - 571)) | (1 << (MySqlParser.CP932 - 571)) | (1 << (MySqlParser.DEC8 - 571)) | (1 << (MySqlParser.EUCJPMS - 571)) | (1 << (MySqlParser.EUCKR - 571)) | (1 << (MySqlParser.GB2312 - 571)) | (1 << (MySqlParser.GBK - 571)) | (1 << (MySqlParser.GEOSTD8 - 571)) | (1 << (MySqlParser.GREEK - 571)) | (1 << (MySqlParser.HEBREW - 571)) | (1 << (MySqlParser.HP8 - 571)) | (1 << (MySqlParser.KEYBCS2 - 571)) | (1 << (MySqlParser.KOI8R - 571)) | (1 << (MySqlParser.KOI8U - 571)) | (1 << (MySqlParser.LATIN1 - 571)) | (1 << (MySqlParser.LATIN2 - 571)) | (1 << (MySqlParser.LATIN5 - 571)) | (1 << (MySqlParser.LATIN7 - 571)) | (1 << (MySqlParser.MACCE - 571)) | (1 << (MySqlParser.MACROMAN - 571)) | (1 << (MySqlParser.SJIS - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MySqlParser.SWE7 - 603)) | (1 << (MySqlParser.TIS620 - 603)) | (1 << (MySqlParser.UCS2 - 603)) | (1 << (MySqlParser.UJIS - 603)) | (1 << (MySqlParser.UTF16 - 603)) | (1 << (MySqlParser.UTF16LE - 603)) | (1 << (MySqlParser.UTF32 - 603)) | (1 << (MySqlParser.UTF8 - 603)) | (1 << (MySqlParser.UTF8MB3 - 603)) | (1 << (MySqlParser.UTF8MB4 - 603)) | (1 << (MySqlParser.ARCHIVE - 603)) | (1 << (MySqlParser.BLACKHOLE - 603)) | (1 << (MySqlParser.CSV - 603)) | (1 << (MySqlParser.FEDERATED - 603)) | (1 << (MySqlParser.INNODB - 603)) | (1 << (MySqlParser.MEMORY - 603)) | (1 << (MySqlParser.MRG_MYISAM - 603)) | (1 << (MySqlParser.MYISAM - 603)) | (1 << (MySqlParser.NDB - 603)) | (1 << (MySqlParser.NDBCLUSTER - 603)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 603)) | (1 << (MySqlParser.REPEATABLE - 603)) | (1 << (MySqlParser.COMMITTED - 603)) | (1 << (MySqlParser.UNCOMMITTED - 603)) | (1 << (MySqlParser.SERIALIZABLE - 603)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 603)) | (1 << (MySqlParser.LINESTRING - 603)) | (1 << (MySqlParser.MULTILINESTRING - 603)) | (1 << (MySqlParser.MULTIPOINT - 603)) | (1 << (MySqlParser.MULTIPOLYGON - 603)) | (1 << (MySqlParser.POINT - 603)) | (1 << (MySqlParser.POLYGON - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MySqlParser.ABS - 635)) | (1 << (MySqlParser.ACOS - 635)) | (1 << (MySqlParser.ADDDATE - 635)) | (1 << (MySqlParser.ADDTIME - 635)) | (1 << (MySqlParser.AES_DECRYPT - 635)) | (1 << (MySqlParser.AES_ENCRYPT - 635)) | (1 << (MySqlParser.AREA - 635)) | (1 << (MySqlParser.ASBINARY - 635)) | (1 << (MySqlParser.ASIN - 635)) | (1 << (MySqlParser.ASTEXT - 635)) | (1 << (MySqlParser.ASWKB - 635)) | (1 << (MySqlParser.ASWKT - 635)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 635)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 635)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 635)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 635)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 635)) | (1 << (MySqlParser.ATAN - 635)) | (1 << (MySqlParser.ATAN2 - 635)) | (1 << (MySqlParser.BENCHMARK - 635)) | (1 << (MySqlParser.BIN - 635)) | (1 << (MySqlParser.BIT_COUNT - 635)) | (1 << (MySqlParser.BIT_LENGTH - 635)) | (1 << (MySqlParser.BUFFER - 635)) | (1 << (MySqlParser.CEIL - 635)) | (1 << (MySqlParser.CEILING - 635)) | (1 << (MySqlParser.CENTROID - 635)) | (1 << (MySqlParser.CHARACTER_LENGTH - 635)) | (1 << (MySqlParser.CHARSET - 635)) | (1 << (MySqlParser.CHAR_LENGTH - 635)) | (1 << (MySqlParser.COERCIBILITY - 635)) | (1 << (MySqlParser.COLLATION - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MySqlParser.COMPRESS - 667)) | (1 << (MySqlParser.CONCAT - 667)) | (1 << (MySqlParser.CONCAT_WS - 667)) | (1 << (MySqlParser.CONNECTION_ID - 667)) | (1 << (MySqlParser.CONV - 667)) | (1 << (MySqlParser.CONVERT_TZ - 667)) | (1 << (MySqlParser.COS - 667)) | (1 << (MySqlParser.COT - 667)) | (1 << (MySqlParser.CRC32 - 667)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 667)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 667)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 667)) | (1 << (MySqlParser.CREATE_DIGEST - 667)) | (1 << (MySqlParser.CROSSES - 667)) | (1 << (MySqlParser.DATEDIFF - 667)) | (1 << (MySqlParser.DATE_FORMAT - 667)) | (1 << (MySqlParser.DAYNAME - 667)) | (1 << (MySqlParser.DAYOFMONTH - 667)) | (1 << (MySqlParser.DAYOFWEEK - 667)) | (1 << (MySqlParser.DAYOFYEAR - 667)) | (1 << (MySqlParser.DECODE - 667)) | (1 << (MySqlParser.DEGREES - 667)) | (1 << (MySqlParser.DES_DECRYPT - 667)) | (1 << (MySqlParser.DES_ENCRYPT - 667)) | (1 << (MySqlParser.DIMENSION - 667)) | (1 << (MySqlParser.DISJOINT - 667)) | (1 << (MySqlParser.ELT - 667)) | (1 << (MySqlParser.ENCODE - 667)) | (1 << (MySqlParser.ENCRYPT - 667)) | (1 << (MySqlParser.ENDPOINT - 667)) | (1 << (MySqlParser.ENVELOPE - 667)) | (1 << (MySqlParser.EQUALS - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MySqlParser.EXP - 699)) | (1 << (MySqlParser.EXPORT_SET - 699)) | (1 << (MySqlParser.EXTERIORRING - 699)) | (1 << (MySqlParser.EXTRACTVALUE - 699)) | (1 << (MySqlParser.FIELD - 699)) | (1 << (MySqlParser.FIND_IN_SET - 699)) | (1 << (MySqlParser.FLOOR - 699)) | (1 << (MySqlParser.FORMAT - 699)) | (1 << (MySqlParser.FOUND_ROWS - 699)) | (1 << (MySqlParser.FROM_BASE64 - 699)) | (1 << (MySqlParser.FROM_DAYS - 699)) | (1 << (MySqlParser.FROM_UNIXTIME - 699)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 699)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 699)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 699)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 699)) | (1 << (MySqlParser.GEOMETRYN - 699)) | (1 << (MySqlParser.GEOMETRYTYPE - 699)) | (1 << (MySqlParser.GEOMFROMTEXT - 699)) | (1 << (MySqlParser.GEOMFROMWKB - 699)) | (1 << (MySqlParser.GET_FORMAT - 699)) | (1 << (MySqlParser.GET_LOCK - 699)) | (1 << (MySqlParser.GLENGTH - 699)) | (1 << (MySqlParser.GREATEST - 699)) | (1 << (MySqlParser.GTID_SUBSET - 699)) | (1 << (MySqlParser.GTID_SUBTRACT - 699)) | (1 << (MySqlParser.HEX - 699)) | (1 << (MySqlParser.IFNULL - 699)) | (1 << (MySqlParser.INET6_ATON - 699)) | (1 << (MySqlParser.INET6_NTOA - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MySqlParser.INET_ATON - 731)) | (1 << (MySqlParser.INET_NTOA - 731)) | (1 << (MySqlParser.INSTR - 731)) | (1 << (MySqlParser.INTERIORRINGN - 731)) | (1 << (MySqlParser.INTERSECTS - 731)) | (1 << (MySqlParser.ISCLOSED - 731)) | (1 << (MySqlParser.ISEMPTY - 731)) | (1 << (MySqlParser.ISNULL - 731)) | (1 << (MySqlParser.ISSIMPLE - 731)) | (1 << (MySqlParser.IS_FREE_LOCK - 731)) | (1 << (MySqlParser.IS_IPV4 - 731)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 731)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 731)) | (1 << (MySqlParser.IS_IPV6 - 731)) | (1 << (MySqlParser.IS_USED_LOCK - 731)) | (1 << (MySqlParser.LAST_INSERT_ID - 731)) | (1 << (MySqlParser.LCASE - 731)) | (1 << (MySqlParser.LEAST - 731)) | (1 << (MySqlParser.LENGTH - 731)) | (1 << (MySqlParser.LINEFROMTEXT - 731)) | (1 << (MySqlParser.LINEFROMWKB - 731)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 731)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 731)) | (1 << (MySqlParser.LN - 731)) | (1 << (MySqlParser.LOAD_FILE - 731)) | (1 << (MySqlParser.LOCATE - 731)) | (1 << (MySqlParser.LOG - 731)) | (1 << (MySqlParser.LOG10 - 731)) | (1 << (MySqlParser.LOG2 - 731)) | (1 << (MySqlParser.LOWER - 731)) | (1 << (MySqlParser.LPAD - 731)) | (1 << (MySqlParser.LTRIM - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MySqlParser.MAKEDATE - 763)) | (1 << (MySqlParser.MAKETIME - 763)) | (1 << (MySqlParser.MAKE_SET - 763)) | (1 << (MySqlParser.MASTER_POS_WAIT - 763)) | (1 << (MySqlParser.MBRCONTAINS - 763)) | (1 << (MySqlParser.MBRDISJOINT - 763)) | (1 << (MySqlParser.MBREQUAL - 763)) | (1 << (MySqlParser.MBRINTERSECTS - 763)) | (1 << (MySqlParser.MBROVERLAPS - 763)) | (1 << (MySqlParser.MBRTOUCHES - 763)) | (1 << (MySqlParser.MBRWITHIN - 763)) | (1 << (MySqlParser.MD5 - 763)) | (1 << (MySqlParser.MLINEFROMTEXT - 763)) | (1 << (MySqlParser.MLINEFROMWKB - 763)) | (1 << (MySqlParser.MONTHNAME - 763)) | (1 << (MySqlParser.MPOINTFROMTEXT - 763)) | (1 << (MySqlParser.MPOINTFROMWKB - 763)) | (1 << (MySqlParser.MPOLYFROMTEXT - 763)) | (1 << (MySqlParser.MPOLYFROMWKB - 763)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 763)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 763)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 763)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 763)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 763)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 763)) | (1 << (MySqlParser.NAME_CONST - 763)) | (1 << (MySqlParser.NULLIF - 763)) | (1 << (MySqlParser.NUMGEOMETRIES - 763)) | (1 << (MySqlParser.NUMINTERIORRINGS - 763)) | (1 << (MySqlParser.NUMPOINTS - 763)) | (1 << (MySqlParser.OCT - 763)) | (1 << (MySqlParser.OCTET_LENGTH - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MySqlParser.ORD - 795)) | (1 << (MySqlParser.OVERLAPS - 795)) | (1 << (MySqlParser.PERIOD_ADD - 795)) | (1 << (MySqlParser.PERIOD_DIFF - 795)) | (1 << (MySqlParser.PI - 795)) | (1 << (MySqlParser.POINTFROMTEXT - 795)) | (1 << (MySqlParser.POINTFROMWKB - 795)) | (1 << (MySqlParser.POINTN - 795)) | (1 << (MySqlParser.POLYFROMTEXT - 795)) | (1 << (MySqlParser.POLYFROMWKB - 795)) | (1 << (MySqlParser.POLYGONFROMTEXT - 795)) | (1 << (MySqlParser.POLYGONFROMWKB - 795)) | (1 << (MySqlParser.POW - 795)) | (1 << (MySqlParser.POWER - 795)) | (1 << (MySqlParser.QUOTE - 795)) | (1 << (MySqlParser.RADIANS - 795)) | (1 << (MySqlParser.RAND - 795)) | (1 << (MySqlParser.RANDOM_BYTES - 795)) | (1 << (MySqlParser.RELEASE_LOCK - 795)) | (1 << (MySqlParser.REVERSE - 795)) | (1 << (MySqlParser.ROUND - 795)) | (1 << (MySqlParser.ROW_COUNT - 795)) | (1 << (MySqlParser.RPAD - 795)) | (1 << (MySqlParser.RTRIM - 795)) | (1 << (MySqlParser.SEC_TO_TIME - 795)) | (1 << (MySqlParser.SESSION_USER - 795)) | (1 << (MySqlParser.SHA - 795)) | (1 << (MySqlParser.SHA1 - 795)) | (1 << (MySqlParser.SHA2 - 795)) | (1 << (MySqlParser.SIGN - 795)) | (1 << (MySqlParser.SIN - 795)) | (1 << (MySqlParser.SLEEP - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MySqlParser.SOUNDEX - 827)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 827)) | (1 << (MySqlParser.SQRT - 827)) | (1 << (MySqlParser.SRID - 827)) | (1 << (MySqlParser.STARTPOINT - 827)) | (1 << (MySqlParser.STRCMP - 827)) | (1 << (MySqlParser.STR_TO_DATE - 827)) | (1 << (MySqlParser.ST_AREA - 827)) | (1 << (MySqlParser.ST_ASBINARY - 827)) | (1 << (MySqlParser.ST_ASTEXT - 827)) | (1 << (MySqlParser.ST_ASWKB - 827)) | (1 << (MySqlParser.ST_ASWKT - 827)) | (1 << (MySqlParser.ST_BUFFER - 827)) | (1 << (MySqlParser.ST_CENTROID - 827)) | (1 << (MySqlParser.ST_CONTAINS - 827)) | (1 << (MySqlParser.ST_CROSSES - 827)) | (1 << (MySqlParser.ST_DIFFERENCE - 827)) | (1 << (MySqlParser.ST_DIMENSION - 827)) | (1 << (MySqlParser.ST_DISJOINT - 827)) | (1 << (MySqlParser.ST_DISTANCE - 827)) | (1 << (MySqlParser.ST_ENDPOINT - 827)) | (1 << (MySqlParser.ST_ENVELOPE - 827)) | (1 << (MySqlParser.ST_EQUALS - 827)) | (1 << (MySqlParser.ST_EXTERIORRING - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 827)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 827)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 827)) | (1 << (MySqlParser.ST_GEOMETRYN - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MySqlParser.ST_GEOMETRYTYPE - 859)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 859)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 859)) | (1 << (MySqlParser.ST_INTERIORRINGN - 859)) | (1 << (MySqlParser.ST_INTERSECTION - 859)) | (1 << (MySqlParser.ST_INTERSECTS - 859)) | (1 << (MySqlParser.ST_ISCLOSED - 859)) | (1 << (MySqlParser.ST_ISEMPTY - 859)) | (1 << (MySqlParser.ST_ISSIMPLE - 859)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 859)) | (1 << (MySqlParser.ST_LINEFROMWKB - 859)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 859)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 859)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 859)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 859)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 859)) | (1 << (MySqlParser.ST_NUMPOINTS - 859)) | (1 << (MySqlParser.ST_OVERLAPS - 859)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 859)) | (1 << (MySqlParser.ST_POINTFROMWKB - 859)) | (1 << (MySqlParser.ST_POINTN - 859)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 859)) | (1 << (MySqlParser.ST_POLYFROMWKB - 859)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 859)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 859)) | (1 << (MySqlParser.ST_SRID - 859)) | (1 << (MySqlParser.ST_STARTPOINT - 859)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 859)) | (1 << (MySqlParser.ST_TOUCHES - 859)) | (1 << (MySqlParser.ST_UNION - 859)) | (1 << (MySqlParser.ST_WITHIN - 859)) | (1 << (MySqlParser.ST_X - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MySqlParser.ST_Y - 891)) | (1 << (MySqlParser.SUBDATE - 891)) | (1 << (MySqlParser.SUBSTRING_INDEX - 891)) | (1 << (MySqlParser.SUBTIME - 891)) | (1 << (MySqlParser.SYSTEM_USER - 891)) | (1 << (MySqlParser.TAN - 891)) | (1 << (MySqlParser.TIMEDIFF - 891)) | (1 << (MySqlParser.TIMESTAMPADD - 891)) | (1 << (MySqlParser.TIMESTAMPDIFF - 891)) | (1 << (MySqlParser.TIME_FORMAT - 891)) | (1 << (MySqlParser.TIME_TO_SEC - 891)) | (1 << (MySqlParser.TOUCHES - 891)) | (1 << (MySqlParser.TO_BASE64 - 891)) | (1 << (MySqlParser.TO_DAYS - 891)) | (1 << (MySqlParser.TO_SECONDS - 891)) | (1 << (MySqlParser.UCASE - 891)) | (1 << (MySqlParser.UNCOMPRESS - 891)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 891)) | (1 << (MySqlParser.UNHEX - 891)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 891)) | (1 << (MySqlParser.UPDATEXML - 891)) | (1 << (MySqlParser.UPPER - 891)) | (1 << (MySqlParser.UUID - 891)) | (1 << (MySqlParser.UUID_SHORT - 891)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 891)) | (1 << (MySqlParser.VERSION - 891)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 891)) | (1 << (MySqlParser.WEEKDAY - 891)) | (1 << (MySqlParser.WEEKOFYEAR - 891)) | (1 << (MySqlParser.WEIGHT_STRING - 891)) | (1 << (MySqlParser.WITHIN - 891)) | (1 << (MySqlParser.YEARWEEK - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MySqlParser.Y_FUNCTION - 923)) | (1 << (MySqlParser.X_FUNCTION - 923)) | (1 << (MySqlParser.PLUS - 923)) | (1 << (MySqlParser.MINUS - 923)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 923)) | (1 << (MySqlParser.BIT_NOT_OP - 923)) | (1 << (MySqlParser.LR_BRACKET - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MySqlParser.ZERO_DECIMAL - 955)) | (1 << (MySqlParser.ONE_DECIMAL - 955)) | (1 << (MySqlParser.TWO_DECIMAL - 955)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 955)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 955)) | (1 << (MySqlParser.STRING_LITERAL - 955)) | (1 << (MySqlParser.DECIMAL_LITERAL - 955)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 955)) | (1 << (MySqlParser.REAL_LITERAL - 955)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 955)) | (1 << (MySqlParser.BIT_STRING - 955)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 955)) | (1 << (MySqlParser.ID - 955)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 955)) | (1 << (MySqlParser.LOCAL_ID - 955)) | (1 << (MySqlParser.GLOBAL_ID - 955)))) !== 0)) {
					{
					this.state = 5506;
					this.functionArgs();
					}
				}

				this.state = 5509;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5511;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specificFunction(): SpecificFunctionContext {
		let _localctx: SpecificFunctionContext = new SpecificFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, MySqlParser.RULE_specificFunction);
		let _la: number;
		try {
			this.state = 5671;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5514;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CURRENT_USER || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & ((1 << (MySqlParser.CURRENT_DATE - 229)) | (1 << (MySqlParser.CURRENT_TIME - 229)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 229)) | (1 << (MySqlParser.LOCALTIME - 229)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5515;
				this.match(MySqlParser.CONVERT);
				this.state = 5516;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5517;
				this.expression(0);
				this.state = 5518;
				(_localctx as DataTypeFunctionCallContext)._separator = this.match(MySqlParser.COMMA);
				this.state = 5519;
				this.convertedDataType();
				this.state = 5520;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5522;
				this.match(MySqlParser.CONVERT);
				this.state = 5523;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5524;
				this.expression(0);
				this.state = 5525;
				this.match(MySqlParser.USING);
				this.state = 5526;
				this.charsetName();
				this.state = 5527;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5529;
				this.match(MySqlParser.CAST);
				this.state = 5530;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5531;
				this.expression(0);
				this.state = 5532;
				this.match(MySqlParser.AS);
				this.state = 5533;
				this.convertedDataType();
				this.state = 5534;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5536;
				this.match(MySqlParser.VALUES);
				this.state = 5537;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5538;
				this.fullColumnName();
				this.state = 5539;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5541;
				this.match(MySqlParser.CASE);
				this.state = 5542;
				this.expression(0);
				this.state = 5544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5543;
					this.caseFuncAlternative();
					}
					}
					this.state = 5546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.WHEN);
				this.state = 5550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ELSE) {
					{
					this.state = 5548;
					this.match(MySqlParser.ELSE);
					this.state = 5549;
					(_localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 5552;
				this.match(MySqlParser.END);
				}
				break;

			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5554;
				this.match(MySqlParser.CASE);
				this.state = 5556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5555;
					this.caseFuncAlternative();
					}
					}
					this.state = 5558;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.WHEN);
				this.state = 5562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ELSE) {
					{
					this.state = 5560;
					this.match(MySqlParser.ELSE);
					this.state = 5561;
					(_localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 5564;
				this.match(MySqlParser.END);
				}
				break;

			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5566;
				this.match(MySqlParser.CHAR);
				this.state = 5567;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5568;
				this.functionArgs();
				this.state = 5571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 5569;
					this.match(MySqlParser.USING);
					this.state = 5570;
					this.charsetName();
					}
				}

				this.state = 5573;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5575;
				this.match(MySqlParser.POSITION);
				this.state = 5576;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5579;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 812, this._ctx) ) {
				case 1:
					{
					this.state = 5577;
					(_localctx as PositionFunctionCallContext)._positionString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5578;
					(_localctx as PositionFunctionCallContext)._positionExpression = this.expression(0);
					}
					break;
				}
				this.state = 5581;
				this.match(MySqlParser.IN);
				this.state = 5584;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 813, this._ctx) ) {
				case 1:
					{
					this.state = 5582;
					(_localctx as PositionFunctionCallContext)._inString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5583;
					(_localctx as PositionFunctionCallContext)._inExpression = this.expression(0);
					}
					break;
				}
				this.state = 5586;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5588;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SUBSTR || _la === MySqlParser.SUBSTRING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5589;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5592;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 814, this._ctx) ) {
				case 1:
					{
					this.state = 5590;
					(_localctx as SubstrFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5591;
					(_localctx as SubstrFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5594;
				this.match(MySqlParser.FROM);
				this.state = 5597;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 815, this._ctx) ) {
				case 1:
					{
					this.state = 5595;
					(_localctx as SubstrFunctionCallContext)._fromDecimal = this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 5596;
					(_localctx as SubstrFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 5599;
					this.match(MySqlParser.FOR);
					this.state = 5602;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 816, this._ctx) ) {
					case 1:
						{
						this.state = 5600;
						(_localctx as SubstrFunctionCallContext)._forDecimal = this.decimalLiteral();
						}
						break;

					case 2:
						{
						this.state = 5601;
						(_localctx as SubstrFunctionCallContext)._forExpression = this.expression(0);
						}
						break;
					}
					}
				}

				this.state = 5606;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5608;
				this.match(MySqlParser.TRIM);
				this.state = 5609;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5610;
				(_localctx as TrimFunctionCallContext)._positioinForm = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BOTH || _la === MySqlParser.LEADING || _la === MySqlParser.TRAILING)) {
					(_localctx as TrimFunctionCallContext)._positioinForm = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5613;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 818, this._ctx) ) {
				case 1:
					{
					this.state = 5611;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5612;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5615;
				this.match(MySqlParser.FROM);
				this.state = 5618;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 819, this._ctx) ) {
				case 1:
					{
					this.state = 5616;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5617;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5620;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5622;
				this.match(MySqlParser.TRIM);
				this.state = 5623;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5626;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 820, this._ctx) ) {
				case 1:
					{
					this.state = 5624;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5625;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5628;
				this.match(MySqlParser.FROM);
				this.state = 5631;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 821, this._ctx) ) {
				case 1:
					{
					this.state = 5629;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5630;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5633;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5635;
				this.match(MySqlParser.WEIGHT_STRING);
				this.state = 5636;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5639;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 822, this._ctx) ) {
				case 1:
					{
					this.state = 5637;
					this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5638;
					this.expression(0);
					}
					break;
				}
				this.state = 5647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 5641;
					this.match(MySqlParser.AS);
					this.state = 5642;
					(_localctx as WeightFunctionCallContext)._stringFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CHAR || _la === MySqlParser.BINARY)) {
						(_localctx as WeightFunctionCallContext)._stringFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5643;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 5644;
					this.decimalLiteral();
					this.state = 5645;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 5650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LEVEL) {
					{
					this.state = 5649;
					this.levelsInWeightString();
					}
				}

				this.state = 5652;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5654;
				this.match(MySqlParser.EXTRACT);
				this.state = 5655;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5656;
				this.intervalType();
				this.state = 5657;
				this.match(MySqlParser.FROM);
				this.state = 5660;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 825, this._ctx) ) {
				case 1:
					{
					this.state = 5658;
					(_localctx as ExtractFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5659;
					(_localctx as ExtractFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5662;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5664;
				this.match(MySqlParser.GET_FORMAT);
				this.state = 5665;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5666;
				(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.DATETIME - 183)))) !== 0))) {
					(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5667;
				this.match(MySqlParser.COMMA);
				this.state = 5668;
				this.stringLiteral();
				this.state = 5669;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseFuncAlternative(): CaseFuncAlternativeContext {
		let _localctx: CaseFuncAlternativeContext = new CaseFuncAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, MySqlParser.RULE_caseFuncAlternative);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5673;
			this.match(MySqlParser.WHEN);
			this.state = 5674;
			_localctx._condition = this.functionArg();
			this.state = 5675;
			this.match(MySqlParser.THEN);
			this.state = 5676;
			_localctx._consequent = this.functionArg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelsInWeightString(): LevelsInWeightStringContext {
		let _localctx: LevelsInWeightStringContext = new LevelsInWeightStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, MySqlParser.RULE_levelsInWeightString);
		let _la: number;
		try {
			this.state = 5692;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 828, this._ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5678;
				this.match(MySqlParser.LEVEL);
				this.state = 5679;
				this.levelInWeightListElement();
				this.state = 5684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 5680;
					this.match(MySqlParser.COMMA);
					this.state = 5681;
					this.levelInWeightListElement();
					}
					}
					this.state = 5686;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5687;
				this.match(MySqlParser.LEVEL);
				this.state = 5688;
				(_localctx as LevelWeightRangeContext)._firstLevel = this.decimalLiteral();
				this.state = 5689;
				this.match(MySqlParser.MINUS);
				this.state = 5690;
				(_localctx as LevelWeightRangeContext)._lastLevel = this.decimalLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelInWeightListElement(): LevelInWeightListElementContext {
		let _localctx: LevelInWeightListElementContext = new LevelInWeightListElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, MySqlParser.RULE_levelInWeightListElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5694;
			this.decimalLiteral();
			this.state = 5696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ASC || _la === MySqlParser.DESC || _la === MySqlParser.REVERSE) {
				{
				this.state = 5695;
				_localctx._orderType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC || _la === MySqlParser.REVERSE)) {
					_localctx._orderType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		let _localctx: AggregateWindowedFunctionContext = new AggregateWindowedFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, MySqlParser.RULE_aggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 5754;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 838, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5698;
				_la = this._input.LA(1);
				if (!(((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (MySqlParser.AVG - 213)) | (1 << (MySqlParser.MAX - 213)) | (1 << (MySqlParser.MIN - 213)) | (1 << (MySqlParser.SUM - 213)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5699;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
					{
					this.state = 5700;
					_localctx._aggregator = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
						_localctx._aggregator = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5703;
				this.functionArg();
				this.state = 5704;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5706;
				this.match(MySqlParser.COUNT);
				this.state = 5707;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5713;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STAR:
					{
					this.state = 5708;
					_localctx._starArg = this.match(MySqlParser.STAR);
					}
					break;
				case MySqlParser.ALL:
				case MySqlParser.CASE:
				case MySqlParser.CAST:
				case MySqlParser.CONVERT:
				case MySqlParser.CURRENT_USER:
				case MySqlParser.DATABASE:
				case MySqlParser.EXISTS:
				case MySqlParser.FALSE:
				case MySqlParser.IF:
				case MySqlParser.INSERT:
				case MySqlParser.INTERVAL:
				case MySqlParser.LEFT:
				case MySqlParser.NOT:
				case MySqlParser.NULL_LITERAL:
				case MySqlParser.REPLACE:
				case MySqlParser.RIGHT:
				case MySqlParser.TRUE:
				case MySqlParser.VALUES:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.CHAR:
				case MySqlParser.BINARY:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.AVG:
				case MySqlParser.BIT_AND:
				case MySqlParser.BIT_OR:
				case MySqlParser.BIT_XOR:
				case MySqlParser.COUNT:
				case MySqlParser.GROUP_CONCAT:
				case MySqlParser.MAX:
				case MySqlParser.MIN:
				case MySqlParser.STD:
				case MySqlParser.STDDEV:
				case MySqlParser.STDDEV_POP:
				case MySqlParser.STDDEV_SAMP:
				case MySqlParser.SUM:
				case MySqlParser.VAR_POP:
				case MySqlParser.VAR_SAMP:
				case MySqlParser.VARIANCE:
				case MySqlParser.CURRENT_DATE:
				case MySqlParser.CURRENT_TIME:
				case MySqlParser.CURRENT_TIMESTAMP:
				case MySqlParser.LOCALTIME:
				case MySqlParser.CURDATE:
				case MySqlParser.CURTIME:
				case MySqlParser.DATE_ADD:
				case MySqlParser.DATE_SUB:
				case MySqlParser.EXTRACT:
				case MySqlParser.LOCALTIMESTAMP:
				case MySqlParser.NOW:
				case MySqlParser.POSITION:
				case MySqlParser.SUBSTR:
				case MySqlParser.SUBSTRING:
				case MySqlParser.SYSDATE:
				case MySqlParser.TRIM:
				case MySqlParser.UTC_DATE:
				case MySqlParser.UTC_TIME:
				case MySqlParser.UTC_TIMESTAMP:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLIENT:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HASH:
				case MySqlParser.HOST:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFOMANCE_SCHEMA:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.PLUS:
				case MySqlParser.MINUS:
				case MySqlParser.EXCLAMATION_SYMBOL:
				case MySqlParser.BIT_NOT_OP:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.ZERO_DECIMAL:
				case MySqlParser.ONE_DECIMAL:
				case MySqlParser.TWO_DECIMAL:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.DECIMAL_LITERAL:
				case MySqlParser.HEXADECIMAL_LITERAL:
				case MySqlParser.REAL_LITERAL:
				case MySqlParser.NULL_SPEC_LITERAL:
				case MySqlParser.BIT_STRING:
				case MySqlParser.STRING_CHARSET_NAME:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
				case MySqlParser.LOCAL_ID:
				case MySqlParser.GLOBAL_ID:
					{
					this.state = 5710;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL) {
						{
						this.state = 5709;
						_localctx._aggregator = this.match(MySqlParser.ALL);
						}
					}

					this.state = 5712;
					this.functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5715;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5716;
				this.match(MySqlParser.COUNT);
				this.state = 5717;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5718;
				_localctx._aggregator = this.match(MySqlParser.DISTINCT);
				this.state = 5719;
				this.functionArgs();
				this.state = 5720;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5722;
				_la = this._input.LA(1);
				if (!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (MySqlParser.BIT_AND - 214)) | (1 << (MySqlParser.BIT_OR - 214)) | (1 << (MySqlParser.BIT_XOR - 214)) | (1 << (MySqlParser.STD - 214)) | (1 << (MySqlParser.STDDEV - 214)) | (1 << (MySqlParser.STDDEV_POP - 214)) | (1 << (MySqlParser.STDDEV_SAMP - 214)) | (1 << (MySqlParser.VAR_POP - 214)) | (1 << (MySqlParser.VAR_SAMP - 214)) | (1 << (MySqlParser.VARIANCE - 214)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5723;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALL) {
					{
					this.state = 5724;
					_localctx._aggregator = this.match(MySqlParser.ALL);
					}
				}

				this.state = 5727;
				this.functionArg();
				this.state = 5728;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5730;
				this.match(MySqlParser.GROUP_CONCAT);
				this.state = 5731;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DISTINCT) {
					{
					this.state = 5732;
					_localctx._aggregator = this.match(MySqlParser.DISTINCT);
					}
				}

				this.state = 5735;
				this.functionArgs();
				this.state = 5746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 5736;
					this.match(MySqlParser.ORDER);
					this.state = 5737;
					this.match(MySqlParser.BY);
					this.state = 5738;
					this.orderByExpression();
					this.state = 5743;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.COMMA) {
						{
						{
						this.state = 5739;
						this.match(MySqlParser.COMMA);
						this.state = 5740;
						this.orderByExpression();
						}
						}
						this.state = 5745;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SEPARATOR) {
					{
					this.state = 5748;
					this.match(MySqlParser.SEPARATOR);
					this.state = 5749;
					_localctx._separator = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 5752;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scalarFunctionName(): ScalarFunctionNameContext {
		let _localctx: ScalarFunctionNameContext = new ScalarFunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, MySqlParser.RULE_scalarFunctionName);
		try {
			this.state = 5779;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.YEAR:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5756;
				this.functionNameBase();
				}
				break;
			case MySqlParser.ASCII:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5757;
				this.match(MySqlParser.ASCII);
				}
				break;
			case MySqlParser.CURDATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5758;
				this.match(MySqlParser.CURDATE);
				}
				break;
			case MySqlParser.CURRENT_DATE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5759;
				this.match(MySqlParser.CURRENT_DATE);
				}
				break;
			case MySqlParser.CURRENT_TIME:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5760;
				this.match(MySqlParser.CURRENT_TIME);
				}
				break;
			case MySqlParser.CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5761;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case MySqlParser.CURTIME:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5762;
				this.match(MySqlParser.CURTIME);
				}
				break;
			case MySqlParser.DATE_ADD:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5763;
				this.match(MySqlParser.DATE_ADD);
				}
				break;
			case MySqlParser.DATE_SUB:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5764;
				this.match(MySqlParser.DATE_SUB);
				}
				break;
			case MySqlParser.IF:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5765;
				this.match(MySqlParser.IF);
				}
				break;
			case MySqlParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5766;
				this.match(MySqlParser.INSERT);
				}
				break;
			case MySqlParser.LOCALTIME:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5767;
				this.match(MySqlParser.LOCALTIME);
				}
				break;
			case MySqlParser.LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5768;
				this.match(MySqlParser.LOCALTIMESTAMP);
				}
				break;
			case MySqlParser.MID:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5769;
				this.match(MySqlParser.MID);
				}
				break;
			case MySqlParser.NOW:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5770;
				this.match(MySqlParser.NOW);
				}
				break;
			case MySqlParser.REPLACE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5771;
				this.match(MySqlParser.REPLACE);
				}
				break;
			case MySqlParser.SUBSTR:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5772;
				this.match(MySqlParser.SUBSTR);
				}
				break;
			case MySqlParser.SUBSTRING:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5773;
				this.match(MySqlParser.SUBSTRING);
				}
				break;
			case MySqlParser.SYSDATE:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5774;
				this.match(MySqlParser.SYSDATE);
				}
				break;
			case MySqlParser.TRIM:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5775;
				this.match(MySqlParser.TRIM);
				}
				break;
			case MySqlParser.UTC_DATE:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5776;
				this.match(MySqlParser.UTC_DATE);
				}
				break;
			case MySqlParser.UTC_TIME:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 5777;
				this.match(MySqlParser.UTC_TIME);
				}
				break;
			case MySqlParser.UTC_TIMESTAMP:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 5778;
				this.match(MySqlParser.UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		let _localctx: PasswordFunctionClauseContext = new PasswordFunctionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, MySqlParser.RULE_passwordFunctionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5781;
			_localctx._functionName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.OLD_PASSWORD || _la === MySqlParser.PASSWORD)) {
				_localctx._functionName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5782;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5783;
			this.functionArg();
			this.state = 5784;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArgs(): FunctionArgsContext {
		let _localctx: FunctionArgsContext = new FunctionArgsContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, MySqlParser.RULE_functionArgs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5790;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 840, this._ctx) ) {
			case 1:
				{
				this.state = 5786;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 5787;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				this.state = 5788;
				this.functionCall();
				}
				break;

			case 4:
				{
				this.state = 5789;
				this.expression(0);
				}
				break;
			}
			this.state = 5801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5792;
				this.match(MySqlParser.COMMA);
				this.state = 5797;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 841, this._ctx) ) {
				case 1:
					{
					this.state = 5793;
					this.constant();
					}
					break;

				case 2:
					{
					this.state = 5794;
					this.fullColumnName();
					}
					break;

				case 3:
					{
					this.state = 5795;
					this.functionCall();
					}
					break;

				case 4:
					{
					this.state = 5796;
					this.expression(0);
					}
					break;
				}
				}
				}
				this.state = 5803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArg(): FunctionArgContext {
		let _localctx: FunctionArgContext = new FunctionArgContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, MySqlParser.RULE_functionArg);
		try {
			this.state = 5808;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 843, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5804;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5805;
				this.fullColumnName();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5806;
				this.functionCall();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5807;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 580;
		this.enterRecursionRule(_localctx, 580, MySqlParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 845, this._ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5811;
				(_localctx as NotExpressionContext)._notOperator = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NOT || _la === MySqlParser.EXCLAMATION_SYMBOL)) {
					(_localctx as NotExpressionContext)._notOperator = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5812;
				this.expression(4);
				}
				break;

			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5813;
				this.predicate(0);
				this.state = 5814;
				this.match(MySqlParser.IS);
				this.state = 5816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 5815;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 5818;
				(_localctx as IsExpressionContext)._testValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FALSE || _la === MySqlParser.TRUE || _la === MySqlParser.UNKNOWN)) {
					(_localctx as IsExpressionContext)._testValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5820;
				this.predicate(0);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5829;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 846, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expression);
					this.state = 5823;
					if (!(this.precpred(this._ctx, 3))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
					}
					this.state = 5824;
					this.logicalOperator();
					this.state = 5825;
					this.expression(4);
					}
					}
				}
				this.state = 5831;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 846, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public predicate(): PredicateContext;
	public predicate(_p: number): PredicateContext;
	// @RuleVersion(0)
	public predicate(_p?: number): PredicateContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PredicateContext = new PredicateContext(this._ctx, _parentState);
		let _prevctx: PredicateContext = _localctx;
		let _startState: number = 582;
		this.enterRecursionRule(_localctx, 582, MySqlParser.RULE_predicate, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 5835;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 5833;
				this.match(MySqlParser.LOCAL_ID);
				this.state = 5834;
				this.match(MySqlParser.VAR_ASSIGN);
				}
				break;
			}
			this.state = 5837;
			this.expressionAtom(0);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5896;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5894;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						(_localctx as BinaryComparasionPredicateContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5839;
						if (!(this.precpred(this._ctx, 7))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						}
						this.state = 5840;
						this.comparisonOperator();
						this.state = 5841;
						(_localctx as BinaryComparasionPredicateContext)._right = this.predicate(8);
						}
						break;

					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5843;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 5845;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 5844;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 5847;
						this.match(MySqlParser.BETWEEN);
						this.state = 5848;
						this.predicate(0);
						this.state = 5849;
						this.match(MySqlParser.AND);
						this.state = 5850;
						this.predicate(6);
						}
						break;

					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5852;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 5853;
						this.match(MySqlParser.SOUNDS);
						this.state = 5854;
						this.match(MySqlParser.LIKE);
						this.state = 5855;
						this.predicate(5);
						}
						break;

					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5856;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5858;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 5857;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 5860;
						(_localctx as RegexpPredicateContext)._regex = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.REGEXP || _la === MySqlParser.RLIKE)) {
							(_localctx as RegexpPredicateContext)._regex = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5861;
						this.predicate(3);
						}
						break;

					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5862;
						if (!(this.precpred(this._ctx, 9))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 9)");
						}
						this.state = 5864;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 5863;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 5866;
						this.match(MySqlParser.IN);
						this.state = 5867;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 5870;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 851, this._ctx) ) {
						case 1:
							{
							this.state = 5868;
							this.selectStatement();
							}
							break;

						case 2:
							{
							this.state = 5869;
							this.expressions();
							}
							break;
						}
						this.state = 5872;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;

					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5874;
						if (!(this.precpred(this._ctx, 8))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 8)");
						}
						this.state = 5875;
						this.match(MySqlParser.IS);
						this.state = 5876;
						this.nullNotnull();
						}
						break;

					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5877;
						if (!(this.precpred(this._ctx, 6))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						}
						this.state = 5878;
						this.comparisonOperator();
						this.state = 5879;
						(_localctx as SubqueryComparasionPredicateContext)._quantifier = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.ANY || _la === MySqlParser.SOME)) {
							(_localctx as SubqueryComparasionPredicateContext)._quantifier = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5880;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 5881;
						this.selectStatement();
						this.state = 5882;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;

					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 5884;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 5886;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 5885;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 5888;
						this.match(MySqlParser.LIKE);
						this.state = 5889;
						this.predicate(0);
						this.state = 5892;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
						case 1:
							{
							this.state = 5890;
							this.match(MySqlParser.ESCAPE);
							this.state = 5891;
							this.match(MySqlParser.STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					}
				}
				this.state = 5898;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public expressionAtom(): ExpressionAtomContext;
	public expressionAtom(_p: number): ExpressionAtomContext;
	// @RuleVersion(0)
	public expressionAtom(_p?: number): ExpressionAtomContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionAtomContext = new ExpressionAtomContext(this._ctx, _parentState);
		let _prevctx: ExpressionAtomContext = _localctx;
		let _startState: number = 584;
		this.enterRecursionRule(_localctx, 584, MySqlParser.RULE_expressionAtom, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5944;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5900;
				this.constant();
				}
				break;

			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5901;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5902;
				this.functionCall();
				}
				break;

			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5903;
				this.mysqlVariable();
				}
				break;

			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5904;
				this.unaryOperator();
				this.state = 5905;
				this.expressionAtom(9);
				}
				break;

			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5907;
				this.match(MySqlParser.BINARY);
				this.state = 5908;
				this.expressionAtom(8);
				}
				break;

			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5909;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5910;
				this.expression(0);
				this.state = 5915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 5911;
					this.match(MySqlParser.COMMA);
					this.state = 5912;
					this.expression(0);
					}
					}
					this.state = 5917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5918;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5920;
				this.match(MySqlParser.ROW);
				this.state = 5921;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5922;
				this.expression(0);
				this.state = 5925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5923;
					this.match(MySqlParser.COMMA);
					this.state = 5924;
					this.expression(0);
					}
					}
					this.state = 5927;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.COMMA);
				this.state = 5929;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5931;
				this.match(MySqlParser.EXISTS);
				this.state = 5932;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5933;
				this.selectStatement();
				this.state = 5934;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5936;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5937;
				this.selectStatement();
				this.state = 5938;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5940;
				this.match(MySqlParser.INTERVAL);
				this.state = 5941;
				this.expression(0);
				this.state = 5942;
				this.intervalType();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5959;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 860, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5957;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 859, this._ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as BitExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 5946;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 5947;
						this.bitOperator();
						this.state = 5948;
						(_localctx as BitExpressionAtomContext)._right = this.expressionAtom(3);
						}
						break;

					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as MathExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 5950;
						if (!(this.precpred(this._ctx, 1))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						}
						this.state = 5951;
						this.mathOperator();
						this.state = 5952;
						(_localctx as MathExpressionAtomContext)._right = this.expressionAtom(2);
						}
						break;

					case 3:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 5954;
						if (!(this.precpred(this._ctx, 11))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 11)");
						}
						this.state = 5955;
						this.match(MySqlParser.COLLATE);
						this.state = 5956;
						this.collationName();
						}
						break;
					}
					}
				}
				this.state = 5961;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 860, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unaryOperator(): UnaryOperatorContext {
		let _localctx: UnaryOperatorContext = new UnaryOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, MySqlParser.RULE_unaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5962;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.NOT || ((((_la - 937)) & ~0x1F) === 0 && ((1 << (_la - 937)) & ((1 << (MySqlParser.PLUS - 937)) | (1 << (MySqlParser.MINUS - 937)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 937)) | (1 << (MySqlParser.BIT_NOT_OP - 937)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, MySqlParser.RULE_comparisonOperator);
		try {
			this.state = 5978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5964;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5965;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5966;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5967;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 5968;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5969;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 5970;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5971;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 5972;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5973;
				this.match(MySqlParser.EXCLAMATION_SYMBOL);
				this.state = 5974;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5975;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 5976;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 5977;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logicalOperator(): LogicalOperatorContext {
		let _localctx: LogicalOperatorContext = new LogicalOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, MySqlParser.RULE_logicalOperator);
		try {
			this.state = 5987;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.AND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5980;
				this.match(MySqlParser.AND);
				}
				break;
			case MySqlParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5981;
				this.match(MySqlParser.BIT_AND_OP);
				this.state = 5982;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case MySqlParser.XOR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5983;
				this.match(MySqlParser.XOR);
				}
				break;
			case MySqlParser.OR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5984;
				this.match(MySqlParser.OR);
				}
				break;
			case MySqlParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5985;
				this.match(MySqlParser.BIT_OR_OP);
				this.state = 5986;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitOperator(): BitOperatorContext {
		let _localctx: BitOperatorContext = new BitOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, MySqlParser.RULE_bitOperator);
		try {
			this.state = 5996;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LESS_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5989;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 5990;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;
			case MySqlParser.GREATER_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5991;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 5992;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case MySqlParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5993;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case MySqlParser.BIT_XOR_OP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5994;
				this.match(MySqlParser.BIT_XOR_OP);
				}
				break;
			case MySqlParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5995;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mathOperator(): MathOperatorContext {
		let _localctx: MathOperatorContext = new MathOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, MySqlParser.RULE_mathOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5998;
			_la = this._input.LA(1);
			if (!(((((_la - 934)) & ~0x1F) === 0 && ((1 << (_la - 934)) & ((1 << (MySqlParser.STAR - 934)) | (1 << (MySqlParser.DIVIDE - 934)) | (1 << (MySqlParser.MODULE - 934)) | (1 << (MySqlParser.PLUS - 934)) | (1 << (MySqlParser.MINUSMINUS - 934)) | (1 << (MySqlParser.MINUS - 934)) | (1 << (MySqlParser.DIV - 934)) | (1 << (MySqlParser.MOD - 934)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetNameBase(): CharsetNameBaseContext {
		let _localctx: CharsetNameBaseContext = new CharsetNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, MySqlParser.RULE_charsetNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6000;
			_la = this._input.LA(1);
			if (!(((((_la - 573)) & ~0x1F) === 0 && ((1 << (_la - 573)) & ((1 << (MySqlParser.ARMSCII8 - 573)) | (1 << (MySqlParser.ASCII - 573)) | (1 << (MySqlParser.BIG5 - 573)) | (1 << (MySqlParser.CP1250 - 573)) | (1 << (MySqlParser.CP1251 - 573)) | (1 << (MySqlParser.CP1256 - 573)) | (1 << (MySqlParser.CP1257 - 573)) | (1 << (MySqlParser.CP850 - 573)) | (1 << (MySqlParser.CP852 - 573)) | (1 << (MySqlParser.CP866 - 573)) | (1 << (MySqlParser.CP932 - 573)) | (1 << (MySqlParser.DEC8 - 573)) | (1 << (MySqlParser.EUCJPMS - 573)) | (1 << (MySqlParser.EUCKR - 573)) | (1 << (MySqlParser.GB2312 - 573)) | (1 << (MySqlParser.GBK - 573)) | (1 << (MySqlParser.GEOSTD8 - 573)) | (1 << (MySqlParser.GREEK - 573)) | (1 << (MySqlParser.HEBREW - 573)) | (1 << (MySqlParser.HP8 - 573)) | (1 << (MySqlParser.KEYBCS2 - 573)) | (1 << (MySqlParser.KOI8R - 573)) | (1 << (MySqlParser.KOI8U - 573)) | (1 << (MySqlParser.LATIN1 - 573)) | (1 << (MySqlParser.LATIN2 - 573)) | (1 << (MySqlParser.LATIN5 - 573)) | (1 << (MySqlParser.LATIN7 - 573)) | (1 << (MySqlParser.MACCE - 573)) | (1 << (MySqlParser.MACROMAN - 573)) | (1 << (MySqlParser.SJIS - 573)) | (1 << (MySqlParser.SWE7 - 573)) | (1 << (MySqlParser.TIS620 - 573)))) !== 0) || ((((_la - 605)) & ~0x1F) === 0 && ((1 << (_la - 605)) & ((1 << (MySqlParser.UCS2 - 605)) | (1 << (MySqlParser.UJIS - 605)) | (1 << (MySqlParser.UTF16 - 605)) | (1 << (MySqlParser.UTF16LE - 605)) | (1 << (MySqlParser.UTF32 - 605)) | (1 << (MySqlParser.UTF8 - 605)) | (1 << (MySqlParser.UTF8MB3 - 605)) | (1 << (MySqlParser.UTF8MB4 - 605)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevelBase(): TransactionLevelBaseContext {
		let _localctx: TransactionLevelBaseContext = new TransactionLevelBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, MySqlParser.RULE_transactionLevelBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6002;
			_la = this._input.LA(1);
			if (!(((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & ((1 << (MySqlParser.REPEATABLE - 624)) | (1 << (MySqlParser.COMMITTED - 624)) | (1 << (MySqlParser.UNCOMMITTED - 624)) | (1 << (MySqlParser.SERIALIZABLE - 624)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegesBase(): PrivilegesBaseContext {
		let _localctx: PrivilegesBaseContext = new PrivilegesBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, MySqlParser.RULE_privilegesBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6004;
			_la = this._input.LA(1);
			if (!(((((_la - 564)) & ~0x1F) === 0 && ((1 << (_la - 564)) & ((1 << (MySqlParser.TABLES - 564)) | (1 << (MySqlParser.ROUTINE - 564)) | (1 << (MySqlParser.EXECUTE - 564)) | (1 << (MySqlParser.FILE - 564)) | (1 << (MySqlParser.PROCESS - 564)) | (1 << (MySqlParser.RELOAD - 564)) | (1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalTypeBase(): IntervalTypeBaseContext {
		let _localctx: IntervalTypeBaseContext = new IntervalTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, MySqlParser.RULE_intervalTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6006;
			_la = this._input.LA(1);
			if (!(((((_la - 556)) & ~0x1F) === 0 && ((1 << (_la - 556)) & ((1 << (MySqlParser.QUARTER - 556)) | (1 << (MySqlParser.MONTH - 556)) | (1 << (MySqlParser.DAY - 556)) | (1 << (MySqlParser.HOUR - 556)) | (1 << (MySqlParser.MINUTE - 556)) | (1 << (MySqlParser.WEEK - 556)) | (1 << (MySqlParser.SECOND - 556)) | (1 << (MySqlParser.MICROSECOND - 556)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeBase(): DataTypeBaseContext {
		let _localctx: DataTypeBaseContext = new DataTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, MySqlParser.RULE_dataTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6008;
			_la = this._input.LA(1);
			if (!(((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.DATETIME - 183)) | (1 << (MySqlParser.YEAR - 183)) | (1 << (MySqlParser.TEXT - 183)) | (1 << (MySqlParser.ENUM - 183)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		let _localctx: KeywordsCanBeIdContext = new KeywordsCanBeIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, MySqlParser.RULE_keywordsCanBeId);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6010;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.SERIAL || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (MySqlParser.ACCOUNT - 248)) | (1 << (MySqlParser.ACTION - 248)) | (1 << (MySqlParser.AFTER - 248)) | (1 << (MySqlParser.AGGREGATE - 248)) | (1 << (MySqlParser.ALGORITHM - 248)) | (1 << (MySqlParser.ANY - 248)) | (1 << (MySqlParser.AT - 248)) | (1 << (MySqlParser.AUTHORS - 248)) | (1 << (MySqlParser.AUTOCOMMIT - 248)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 248)) | (1 << (MySqlParser.AUTO_INCREMENT - 248)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 248)) | (1 << (MySqlParser.BEGIN - 248)) | (1 << (MySqlParser.BINLOG - 248)) | (1 << (MySqlParser.BIT - 248)) | (1 << (MySqlParser.BLOCK - 248)) | (1 << (MySqlParser.BOOL - 248)) | (1 << (MySqlParser.BOOLEAN - 248)) | (1 << (MySqlParser.BTREE - 248)) | (1 << (MySqlParser.CASCADED - 248)) | (1 << (MySqlParser.CHAIN - 248)) | (1 << (MySqlParser.CHANGED - 248)) | (1 << (MySqlParser.CHANNEL - 248)) | (1 << (MySqlParser.CHECKSUM - 248)) | (1 << (MySqlParser.CIPHER - 248)) | (1 << (MySqlParser.CLIENT - 248)) | (1 << (MySqlParser.COALESCE - 248)) | (1 << (MySqlParser.CODE - 248)) | (1 << (MySqlParser.COLUMNS - 248)) | (1 << (MySqlParser.COLUMN_FORMAT - 248)))) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (MySqlParser.COMMENT - 280)) | (1 << (MySqlParser.COMMIT - 280)) | (1 << (MySqlParser.COMPACT - 280)) | (1 << (MySqlParser.COMPLETION - 280)) | (1 << (MySqlParser.COMPRESSED - 280)) | (1 << (MySqlParser.COMPRESSION - 280)) | (1 << (MySqlParser.CONCURRENT - 280)) | (1 << (MySqlParser.CONNECTION - 280)) | (1 << (MySqlParser.CONSISTENT - 280)) | (1 << (MySqlParser.CONTAINS - 280)) | (1 << (MySqlParser.CONTEXT - 280)) | (1 << (MySqlParser.CONTRIBUTORS - 280)) | (1 << (MySqlParser.COPY - 280)) | (1 << (MySqlParser.CPU - 280)) | (1 << (MySqlParser.DATA - 280)) | (1 << (MySqlParser.DATAFILE - 280)) | (1 << (MySqlParser.DEALLOCATE - 280)) | (1 << (MySqlParser.DEFAULT_AUTH - 280)) | (1 << (MySqlParser.DEFINER - 280)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 280)) | (1 << (MySqlParser.DIRECTORY - 280)) | (1 << (MySqlParser.DISABLE - 280)) | (1 << (MySqlParser.DISCARD - 280)) | (1 << (MySqlParser.DISK - 280)) | (1 << (MySqlParser.DO - 280)) | (1 << (MySqlParser.DUMPFILE - 280)) | (1 << (MySqlParser.DUPLICATE - 280)) | (1 << (MySqlParser.DYNAMIC - 280)) | (1 << (MySqlParser.ENABLE - 280)) | (1 << (MySqlParser.ENCRYPTION - 280)))) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (MySqlParser.ENDS - 312)) | (1 << (MySqlParser.ENGINE - 312)) | (1 << (MySqlParser.ENGINES - 312)) | (1 << (MySqlParser.ERROR - 312)) | (1 << (MySqlParser.ERRORS - 312)) | (1 << (MySqlParser.ESCAPE - 312)) | (1 << (MySqlParser.EVEN - 312)) | (1 << (MySqlParser.EVENT - 312)) | (1 << (MySqlParser.EVENTS - 312)) | (1 << (MySqlParser.EVERY - 312)) | (1 << (MySqlParser.EXCHANGE - 312)) | (1 << (MySqlParser.EXCLUSIVE - 312)) | (1 << (MySqlParser.EXPIRE - 312)) | (1 << (MySqlParser.EXTENDED - 312)) | (1 << (MySqlParser.EXTENT_SIZE - 312)) | (1 << (MySqlParser.FAST - 312)) | (1 << (MySqlParser.FAULTS - 312)) | (1 << (MySqlParser.FIELDS - 312)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 312)) | (1 << (MySqlParser.FILTER - 312)) | (1 << (MySqlParser.FIRST - 312)) | (1 << (MySqlParser.FIXED - 312)) | (1 << (MySqlParser.FOLLOWS - 312)) | (1 << (MySqlParser.FULL - 312)) | (1 << (MySqlParser.FUNCTION - 312)) | (1 << (MySqlParser.GLOBAL - 312)) | (1 << (MySqlParser.GRANTS - 312)) | (1 << (MySqlParser.GROUP_REPLICATION - 312)))) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & ((1 << (MySqlParser.HASH - 345)) | (1 << (MySqlParser.HOST - 345)) | (1 << (MySqlParser.IDENTIFIED - 345)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 345)) | (1 << (MySqlParser.IMPORT - 345)) | (1 << (MySqlParser.INDEXES - 345)) | (1 << (MySqlParser.INITIAL_SIZE - 345)) | (1 << (MySqlParser.INPLACE - 345)) | (1 << (MySqlParser.INSERT_METHOD - 345)) | (1 << (MySqlParser.INSTANCE - 345)) | (1 << (MySqlParser.INVOKER - 345)) | (1 << (MySqlParser.IO - 345)) | (1 << (MySqlParser.IO_THREAD - 345)) | (1 << (MySqlParser.IPC - 345)) | (1 << (MySqlParser.ISOLATION - 345)) | (1 << (MySqlParser.ISSUER - 345)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 345)) | (1 << (MySqlParser.LANGUAGE - 345)) | (1 << (MySqlParser.LAST - 345)) | (1 << (MySqlParser.LEAVES - 345)) | (1 << (MySqlParser.LESS - 345)) | (1 << (MySqlParser.LEVEL - 345)) | (1 << (MySqlParser.LIST - 345)) | (1 << (MySqlParser.LOCAL - 345)) | (1 << (MySqlParser.LOGFILE - 345)) | (1 << (MySqlParser.LOGS - 345)) | (1 << (MySqlParser.MASTER - 345)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 345)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 377)) | (1 << (MySqlParser.MASTER_DELAY - 377)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 377)) | (1 << (MySqlParser.MASTER_HOST - 377)) | (1 << (MySqlParser.MASTER_LOG_FILE - 377)) | (1 << (MySqlParser.MASTER_LOG_POS - 377)) | (1 << (MySqlParser.MASTER_PASSWORD - 377)) | (1 << (MySqlParser.MASTER_PORT - 377)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 377)) | (1 << (MySqlParser.MASTER_SSL - 377)) | (1 << (MySqlParser.MASTER_SSL_CA - 377)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_CERT - 377)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 377)) | (1 << (MySqlParser.MASTER_SSL_CRL - 377)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 377)) | (1 << (MySqlParser.MASTER_SSL_KEY - 377)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 377)) | (1 << (MySqlParser.MASTER_USER - 377)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_ROWS - 377)) | (1 << (MySqlParser.MAX_SIZE - 377)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 377)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 377)) | (1 << (MySqlParser.MEDIUM - 377)) | (1 << (MySqlParser.MERGE - 377)) | (1 << (MySqlParser.MID - 377)) | (1 << (MySqlParser.MIGRATE - 377)) | (1 << (MySqlParser.MIN_ROWS - 377)) | (1 << (MySqlParser.MODIFY - 377)))) !== 0) || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MySqlParser.MUTEX - 409)) | (1 << (MySqlParser.MYSQL - 409)) | (1 << (MySqlParser.NAME - 409)) | (1 << (MySqlParser.NAMES - 409)) | (1 << (MySqlParser.NCHAR - 409)) | (1 << (MySqlParser.NEVER - 409)) | (1 << (MySqlParser.NO - 409)) | (1 << (MySqlParser.NODEGROUP - 409)) | (1 << (MySqlParser.NONE - 409)) | (1 << (MySqlParser.OFFLINE - 409)) | (1 << (MySqlParser.OFFSET - 409)) | (1 << (MySqlParser.OJ - 409)) | (1 << (MySqlParser.OLD_PASSWORD - 409)) | (1 << (MySqlParser.ONE - 409)) | (1 << (MySqlParser.ONLINE - 409)) | (1 << (MySqlParser.ONLY - 409)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 409)) | (1 << (MySqlParser.OPTIONS - 409)) | (1 << (MySqlParser.OWNER - 409)) | (1 << (MySqlParser.PACK_KEYS - 409)) | (1 << (MySqlParser.PAGE - 409)) | (1 << (MySqlParser.PARSER - 409)) | (1 << (MySqlParser.PARTIAL - 409)) | (1 << (MySqlParser.PARTITIONING - 409)) | (1 << (MySqlParser.PARTITIONS - 409)) | (1 << (MySqlParser.PASSWORD - 409)) | (1 << (MySqlParser.PHASE - 409)) | (1 << (MySqlParser.PLUGIN_DIR - 409)) | (1 << (MySqlParser.PLUGINS - 409)))) !== 0) || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & ((1 << (MySqlParser.PORT - 441)) | (1 << (MySqlParser.PRECEDES - 441)) | (1 << (MySqlParser.PREPARE - 441)) | (1 << (MySqlParser.PRESERVE - 441)) | (1 << (MySqlParser.PREV - 441)) | (1 << (MySqlParser.PROCESSLIST - 441)) | (1 << (MySqlParser.PROFILE - 441)) | (1 << (MySqlParser.PROFILES - 441)) | (1 << (MySqlParser.PROXY - 441)) | (1 << (MySqlParser.QUERY - 441)) | (1 << (MySqlParser.QUICK - 441)) | (1 << (MySqlParser.REBUILD - 441)) | (1 << (MySqlParser.RECOVER - 441)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 441)) | (1 << (MySqlParser.REDUNDANT - 441)) | (1 << (MySqlParser.RELAY_LOG_FILE - 441)) | (1 << (MySqlParser.RELAY_LOG_POS - 441)) | (1 << (MySqlParser.RELAYLOG - 441)) | (1 << (MySqlParser.REMOVE - 441)) | (1 << (MySqlParser.REORGANIZE - 441)) | (1 << (MySqlParser.REPAIR - 441)) | (1 << (MySqlParser.REPLICATE_DO_DB - 441)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 441)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 441)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 441)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 441)) | (1 << (MySqlParser.REPLICATION - 441)) | (1 << (MySqlParser.RESUME - 441)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (MySqlParser.RETURNS - 473)) | (1 << (MySqlParser.ROLLBACK - 473)) | (1 << (MySqlParser.ROLLUP - 473)) | (1 << (MySqlParser.ROTATE - 473)) | (1 << (MySqlParser.ROW - 473)) | (1 << (MySqlParser.ROWS - 473)) | (1 << (MySqlParser.ROW_FORMAT - 473)) | (1 << (MySqlParser.SAVEPOINT - 473)) | (1 << (MySqlParser.SCHEDULE - 473)) | (1 << (MySqlParser.SECURITY - 473)) | (1 << (MySqlParser.SERVER - 473)) | (1 << (MySqlParser.SESSION - 473)) | (1 << (MySqlParser.SHARE - 473)) | (1 << (MySqlParser.SHARED - 473)) | (1 << (MySqlParser.SIGNED - 473)) | (1 << (MySqlParser.SIMPLE - 473)) | (1 << (MySqlParser.SLAVE - 473)) | (1 << (MySqlParser.SNAPSHOT - 473)) | (1 << (MySqlParser.SOCKET - 473)) | (1 << (MySqlParser.SOME - 473)) | (1 << (MySqlParser.SOUNDS - 473)) | (1 << (MySqlParser.SOURCE - 473)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 473)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 473)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 473)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 473)) | (1 << (MySqlParser.SQL_CACHE - 473)) | (1 << (MySqlParser.SQL_NO_CACHE - 473)) | (1 << (MySqlParser.SQL_THREAD - 473)) | (1 << (MySqlParser.START - 473)))) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & ((1 << (MySqlParser.STARTS - 505)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 505)) | (1 << (MySqlParser.STATS_PERSISTENT - 505)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 505)) | (1 << (MySqlParser.STATUS - 505)) | (1 << (MySqlParser.STOP - 505)) | (1 << (MySqlParser.STORAGE - 505)) | (1 << (MySqlParser.STRING - 505)) | (1 << (MySqlParser.SUBJECT - 505)) | (1 << (MySqlParser.SUBPARTITION - 505)) | (1 << (MySqlParser.SUBPARTITIONS - 505)) | (1 << (MySqlParser.SUSPEND - 505)) | (1 << (MySqlParser.SWAPS - 505)) | (1 << (MySqlParser.SWITCHES - 505)) | (1 << (MySqlParser.TABLESPACE - 505)) | (1 << (MySqlParser.TEMPORARY - 505)) | (1 << (MySqlParser.TEMPTABLE - 505)) | (1 << (MySqlParser.THAN - 505)) | (1 << (MySqlParser.TRANSACTION - 505)) | (1 << (MySqlParser.TRUNCATE - 505)) | (1 << (MySqlParser.UNDEFINED - 505)) | (1 << (MySqlParser.UNDOFILE - 505)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 505)) | (1 << (MySqlParser.UNKNOWN - 505)) | (1 << (MySqlParser.UPGRADE - 505)) | (1 << (MySqlParser.USER - 505)))) !== 0) || ((((_la - 538)) & ~0x1F) === 0 && ((1 << (_la - 538)) & ((1 << (MySqlParser.VALIDATION - 538)) | (1 << (MySqlParser.VALUE - 538)) | (1 << (MySqlParser.VARIABLES - 538)) | (1 << (MySqlParser.VIEW - 538)) | (1 << (MySqlParser.WAIT - 538)) | (1 << (MySqlParser.WARNINGS - 538)) | (1 << (MySqlParser.WITHOUT - 538)) | (1 << (MySqlParser.WORK - 538)) | (1 << (MySqlParser.WRAPPER - 538)) | (1 << (MySqlParser.X509 - 538)) | (1 << (MySqlParser.XA - 538)) | (1 << (MySqlParser.XML - 538)))) !== 0) || _la === MySqlParser.MEMORY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionNameBase(): FunctionNameBaseContext {
		let _localctx: FunctionNameBaseContext = new FunctionNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, MySqlParser.RULE_functionNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6012;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (MySqlParser.DATE - 183)) | (1 << (MySqlParser.TIME - 183)) | (1 << (MySqlParser.TIMESTAMP - 183)) | (1 << (MySqlParser.YEAR - 183)))) !== 0) || _la === MySqlParser.COUNT || _la === MySqlParser.POSITION || ((((_la - 556)) & ~0x1F) === 0 && ((1 << (_la - 556)) & ((1 << (MySqlParser.QUARTER - 556)) | (1 << (MySqlParser.MONTH - 556)) | (1 << (MySqlParser.DAY - 556)) | (1 << (MySqlParser.HOUR - 556)) | (1 << (MySqlParser.MINUTE - 556)) | (1 << (MySqlParser.WEEK - 556)) | (1 << (MySqlParser.SECOND - 556)) | (1 << (MySqlParser.MICROSECOND - 556)))) !== 0) || ((((_la - 628)) & ~0x1F) === 0 && ((1 << (_la - 628)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 628)) | (1 << (MySqlParser.LINESTRING - 628)) | (1 << (MySqlParser.MULTILINESTRING - 628)) | (1 << (MySqlParser.MULTIPOINT - 628)) | (1 << (MySqlParser.MULTIPOLYGON - 628)) | (1 << (MySqlParser.POINT - 628)) | (1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)))) !== 0) || ((((_la - 660)) & ~0x1F) === 0 && ((1 << (_la - 660)) & ((1 << (MySqlParser.CEILING - 660)) | (1 << (MySqlParser.CENTROID - 660)) | (1 << (MySqlParser.CHARACTER_LENGTH - 660)) | (1 << (MySqlParser.CHARSET - 660)) | (1 << (MySqlParser.CHAR_LENGTH - 660)) | (1 << (MySqlParser.COERCIBILITY - 660)) | (1 << (MySqlParser.COLLATION - 660)) | (1 << (MySqlParser.COMPRESS - 660)) | (1 << (MySqlParser.CONCAT - 660)) | (1 << (MySqlParser.CONCAT_WS - 660)) | (1 << (MySqlParser.CONNECTION_ID - 660)) | (1 << (MySqlParser.CONV - 660)) | (1 << (MySqlParser.CONVERT_TZ - 660)) | (1 << (MySqlParser.COS - 660)) | (1 << (MySqlParser.COT - 660)) | (1 << (MySqlParser.CRC32 - 660)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 660)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 660)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 660)) | (1 << (MySqlParser.CREATE_DIGEST - 660)) | (1 << (MySqlParser.CROSSES - 660)) | (1 << (MySqlParser.DATEDIFF - 660)) | (1 << (MySqlParser.DATE_FORMAT - 660)) | (1 << (MySqlParser.DAYNAME - 660)) | (1 << (MySqlParser.DAYOFMONTH - 660)) | (1 << (MySqlParser.DAYOFWEEK - 660)) | (1 << (MySqlParser.DAYOFYEAR - 660)) | (1 << (MySqlParser.DECODE - 660)) | (1 << (MySqlParser.DEGREES - 660)) | (1 << (MySqlParser.DES_DECRYPT - 660)) | (1 << (MySqlParser.DES_ENCRYPT - 660)) | (1 << (MySqlParser.DIMENSION - 660)))) !== 0) || ((((_la - 692)) & ~0x1F) === 0 && ((1 << (_la - 692)) & ((1 << (MySqlParser.DISJOINT - 692)) | (1 << (MySqlParser.ELT - 692)) | (1 << (MySqlParser.ENCODE - 692)) | (1 << (MySqlParser.ENCRYPT - 692)) | (1 << (MySqlParser.ENDPOINT - 692)) | (1 << (MySqlParser.ENVELOPE - 692)) | (1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)))) !== 0) || ((((_la - 724)) & ~0x1F) === 0 && ((1 << (_la - 724)) & ((1 << (MySqlParser.GREATEST - 724)) | (1 << (MySqlParser.GTID_SUBSET - 724)) | (1 << (MySqlParser.GTID_SUBTRACT - 724)) | (1 << (MySqlParser.HEX - 724)) | (1 << (MySqlParser.IFNULL - 724)) | (1 << (MySqlParser.INET6_ATON - 724)) | (1 << (MySqlParser.INET6_NTOA - 724)) | (1 << (MySqlParser.INET_ATON - 724)) | (1 << (MySqlParser.INET_NTOA - 724)) | (1 << (MySqlParser.INSTR - 724)) | (1 << (MySqlParser.INTERIORRINGN - 724)) | (1 << (MySqlParser.INTERSECTS - 724)) | (1 << (MySqlParser.ISCLOSED - 724)) | (1 << (MySqlParser.ISEMPTY - 724)) | (1 << (MySqlParser.ISNULL - 724)) | (1 << (MySqlParser.ISSIMPLE - 724)) | (1 << (MySqlParser.IS_FREE_LOCK - 724)) | (1 << (MySqlParser.IS_IPV4 - 724)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 724)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 724)) | (1 << (MySqlParser.IS_IPV6 - 724)) | (1 << (MySqlParser.IS_USED_LOCK - 724)) | (1 << (MySqlParser.LAST_INSERT_ID - 724)) | (1 << (MySqlParser.LCASE - 724)) | (1 << (MySqlParser.LEAST - 724)) | (1 << (MySqlParser.LENGTH - 724)) | (1 << (MySqlParser.LINEFROMTEXT - 724)) | (1 << (MySqlParser.LINEFROMWKB - 724)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 724)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 724)) | (1 << (MySqlParser.LN - 724)) | (1 << (MySqlParser.LOAD_FILE - 724)))) !== 0) || ((((_la - 756)) & ~0x1F) === 0 && ((1 << (_la - 756)) & ((1 << (MySqlParser.LOCATE - 756)) | (1 << (MySqlParser.LOG - 756)) | (1 << (MySqlParser.LOG10 - 756)) | (1 << (MySqlParser.LOG2 - 756)) | (1 << (MySqlParser.LOWER - 756)) | (1 << (MySqlParser.LPAD - 756)) | (1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)))) !== 0) || ((((_la - 788)) & ~0x1F) === 0 && ((1 << (_la - 788)) & ((1 << (MySqlParser.NAME_CONST - 788)) | (1 << (MySqlParser.NULLIF - 788)) | (1 << (MySqlParser.NUMGEOMETRIES - 788)) | (1 << (MySqlParser.NUMINTERIORRINGS - 788)) | (1 << (MySqlParser.NUMPOINTS - 788)) | (1 << (MySqlParser.OCT - 788)) | (1 << (MySqlParser.OCTET_LENGTH - 788)) | (1 << (MySqlParser.ORD - 788)) | (1 << (MySqlParser.OVERLAPS - 788)) | (1 << (MySqlParser.PERIOD_ADD - 788)) | (1 << (MySqlParser.PERIOD_DIFF - 788)) | (1 << (MySqlParser.PI - 788)) | (1 << (MySqlParser.POINTFROMTEXT - 788)) | (1 << (MySqlParser.POINTFROMWKB - 788)) | (1 << (MySqlParser.POINTN - 788)) | (1 << (MySqlParser.POLYFROMTEXT - 788)) | (1 << (MySqlParser.POLYFROMWKB - 788)) | (1 << (MySqlParser.POLYGONFROMTEXT - 788)) | (1 << (MySqlParser.POLYGONFROMWKB - 788)) | (1 << (MySqlParser.POW - 788)) | (1 << (MySqlParser.POWER - 788)) | (1 << (MySqlParser.QUOTE - 788)) | (1 << (MySqlParser.RADIANS - 788)) | (1 << (MySqlParser.RAND - 788)) | (1 << (MySqlParser.RANDOM_BYTES - 788)) | (1 << (MySqlParser.RELEASE_LOCK - 788)) | (1 << (MySqlParser.REVERSE - 788)) | (1 << (MySqlParser.ROUND - 788)) | (1 << (MySqlParser.ROW_COUNT - 788)) | (1 << (MySqlParser.RPAD - 788)) | (1 << (MySqlParser.RTRIM - 788)) | (1 << (MySqlParser.SEC_TO_TIME - 788)))) !== 0) || ((((_la - 820)) & ~0x1F) === 0 && ((1 << (_la - 820)) & ((1 << (MySqlParser.SESSION_USER - 820)) | (1 << (MySqlParser.SHA - 820)) | (1 << (MySqlParser.SHA1 - 820)) | (1 << (MySqlParser.SHA2 - 820)) | (1 << (MySqlParser.SIGN - 820)) | (1 << (MySqlParser.SIN - 820)) | (1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)))) !== 0) || ((((_la - 852)) & ~0x1F) === 0 && ((1 << (_la - 852)) & ((1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 852)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.ST_GEOMETRYN - 852)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 852)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 852)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 852)) | (1 << (MySqlParser.ST_INTERIORRINGN - 852)) | (1 << (MySqlParser.ST_INTERSECTION - 852)) | (1 << (MySqlParser.ST_INTERSECTS - 852)) | (1 << (MySqlParser.ST_ISCLOSED - 852)) | (1 << (MySqlParser.ST_ISEMPTY - 852)) | (1 << (MySqlParser.ST_ISSIMPLE - 852)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 852)) | (1 << (MySqlParser.ST_LINEFROMWKB - 852)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 852)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 852)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 852)) | (1 << (MySqlParser.ST_NUMPOINTS - 852)) | (1 << (MySqlParser.ST_OVERLAPS - 852)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 852)) | (1 << (MySqlParser.ST_POINTFROMWKB - 852)) | (1 << (MySqlParser.ST_POINTN - 852)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 852)) | (1 << (MySqlParser.ST_POLYFROMWKB - 852)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 852)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 852)))) !== 0) || ((((_la - 884)) & ~0x1F) === 0 && ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_SRID - 884)) | (1 << (MySqlParser.ST_STARTPOINT - 884)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 884)) | (1 << (MySqlParser.ST_TOUCHES - 884)) | (1 << (MySqlParser.ST_UNION - 884)) | (1 << (MySqlParser.ST_WITHIN - 884)) | (1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)))) !== 0) || ((((_la - 916)) & ~0x1F) === 0 && ((1 << (_la - 916)) & ((1 << (MySqlParser.VERSION - 916)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 916)) | (1 << (MySqlParser.WEEKDAY - 916)) | (1 << (MySqlParser.WEEKOFYEAR - 916)) | (1 << (MySqlParser.WEIGHT_STRING - 916)) | (1 << (MySqlParser.WITHIN - 916)) | (1 << (MySqlParser.YEARWEEK - 916)) | (1 << (MySqlParser.Y_FUNCTION - 916)) | (1 << (MySqlParser.X_FUNCTION - 916)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 290:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);

		case 291:
			return this.predicate_sempred(_localctx as PredicateContext, predIndex);

		case 292:
			return this.expressionAtom_sempred(_localctx as ExpressionAtomContext, predIndex);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private predicate_sempred(_localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 7);

		case 2:
			return this.precpred(this._ctx, 5);

		case 3:
			return this.precpred(this._ctx, 4);

		case 4:
			return this.precpred(this._ctx, 2);

		case 5:
			return this.precpred(this._ctx, 9);

		case 6:
			return this.precpred(this._ctx, 8);

		case 7:
			return this.precpred(this._ctx, 6);

		case 8:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private expressionAtom_sempred(_localctx: ExpressionAtomContext, predIndex: number): boolean {
		switch (predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);

		case 10:
			return this.precpred(this._ctx, 1);

		case 11:
			return this.precpred(this._ctx, 11);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 12;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u03D4\u1781\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02\u026C\n\x02" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03" +
		"\u0291\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x05\x04\u029D\n\x04\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u02A8\n\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u02B9\n\x06\x03\x07\x03\x07" +
		"\x03\x07\x05\x07\u02BE\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x05\b\u02CA\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02E5\n\t\x03\n\x03" +
		"\n\x03\n\x03\n\x05\n\u02EB\n\n\x03\v\x03\v\x03\v\x05\v\u02F0\n\v\x03\v" +
		"\x03\v\x07\v\u02F4\n\v\f\v\x0E\v\u02F7\v\v\x03\f\x03\f\x05\f\u02FB\n\f" +
		"\x03\f\x03\f\x05\f\u02FF\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f" +
		"\x05\f\u0308\n\f\x03\f\x05\f\u030B\n\f\x03\f\x05\f\u030E\n\f\x03\f\x03" +
		"\f\x05\f\u0312\n\f\x03\f\x03\f\x03\f\x03\r\x03\r\x05\r\u0319\n\r\x03\r" +
		"\x05\r\u031C\n\r\x03\r\x03\r\x03\r\x05\r\u0321\n\r\x03\r\x03\r\x03\r\x03" +
		"\r\x07\r\u0327\n\r\f\r\x0E\r\u032A\v\r\x03\r\x03\r\x05\r\u032E\n\r\x03" +
		"\r\x03\r\x03\r\x05\r\u0333\n\r\x03\r\x05\r\u0336\n\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u0341\n\x0E" +
		"\x03\x0E\x05\x0E\u0344\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0348\n\x0E\x03\x0E" +
		"\x05\x0E\u034B\n\x0E\x03\x0E\x03\x0E\x05\x0E\u034F\n\x0E\x03\x0E\x05\x0E" +
		"\u0352\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0356\n\x0E\x03\x0E\x05\x0E\u0359" +
		"\n\x0E\x03\x0E\x05\x0E\u035C\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0360\n\x0E" +
		"\x03\x0E\x05\x0E\u0363\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0367\n\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x05\x0F\u036D\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x05\x0F\u0373\n\x0F\x03\x0F\x03\x0F\x07\x0F\u0377\n\x0F\f\x0F\x0E" +
		"\x0F\u037A\v\x0F\x03\x0F\x03\x0F\x07\x0F\u037E\n\x0F\f\x0F\x0E\x0F\u0381" +
		"\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x05\x10\u0387\n\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x05\x10\u038D\n\x10\x03\x10\x03\x10\x07\x10\u0391" +
		"\n\x10\f\x10\x0E\x10\u0394\v\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10" +
		"\u039A\n\x10\f\x10\x0E\x10\u039D\v\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x07\x11\u03AD\n\x11\f\x11\x0E\x11\u03B0\v\x11\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x05\x12\u03B6\n\x12\x03\x12\x03\x12\x05\x12\u03BA\n\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12" +
		"\u03C4\n\x12\x03\x12\x03\x12\x05\x12\u03C8\n\x12\x03\x12\x03\x12\x05\x12" +
		"\u03CC\n\x12\x03\x12\x03\x12\x05\x12\u03D0\n\x12\x03\x12\x03\x12\x05\x12" +
		"\u03D4\n\x12\x03\x12\x07\x12\u03D7\n\x12\f\x12\x0E\x12\u03DA\v\x12\x05" +
		"\x12\u03DC\n\x12\x03\x12\x05\x12\u03DF\n\x12\x03\x12\x05\x12\u03E2\n\x12" +
		"\x03\x12\x05\x12\u03E5\n\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u03EB" +
		"\n\x12\x03\x12\x03\x12\x05\x12\u03EF\n\x12\x03\x12\x03\x12\x03\x12\x03" +
		"\x12\x05\x12\u03F5\n\x12\x03\x12\x07\x12\u03F8\n\x12\f\x12\x0E\x12\u03FB" +
		"\v\x12\x05\x12\u03FD\n\x12\x03\x12\x05\x12\u0400\n\x12\x05\x12\u0402\n" +
		"\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x05\x13\u040D\n\x13\x03\x13\x03\x13\x05\x13\u0411\n\x13\x03\x13\x05" +
		"\x13\u0414\n\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0422\n\x14\x03\x14\x05" +
		"\x14\u0425\n\x14\x03\x14\x03\x14\x05\x14\u0429\n\x14\x03\x14\x05\x14\u042C" +
		"\n\x14\x03\x14\x03\x14\x05\x14\u0430\n\x14\x03\x14\x05\x14\u0433\n\x14" +
		"\x03\x14\x03\x14\x05\x14\u0437\n\x14\x03\x14\x05\x14\u043A\n\x14\x03\x14" +
		"\x03\x14\x05\x14\u043E\n\x14\x03\x14\x05\x14\u0441\n\x14\x03\x14\x05\x14" +
		"\u0444\n\x14\x03\x14\x03\x14\x05\x14\u0448\n\x14\x03\x14\x05\x14\u044B" +
		"\n\x14\x03\x14\x03\x14\x05\x14\u044F\n\x14\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x05\x15\u0455\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u0462\n\x15\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x16\x05\x16\u0469\n\x16\x03\x16\x03\x16\x03\x16" +
		"\x05\x16\u046E\n\x16\x03\x16\x05\x16\u0471\n\x16\x03\x16\x03\x16\x03\x16" +
		"\x05\x16\u0476\n\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05" +
		"\x16\u047E\n\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u0484\n\x16\x03" +
		"\x16\x03\x16\x05\x16\u0488\n\x16\x03\x17\x05\x17\u048B\n\x17\x03\x17\x03" +
		"\x17\x03\x17\x05\x17\u0490\n\x17\x03\x17\x05\x17\u0493\n\x17\x03\x17\x03" +
		"\x17\x05\x17\u0497\n\x17\x03\x17\x03\x17\x05\x17\u049B\n\x17\x03\x17\x05" +
		"\x17\u049E\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18" +
		"\u04A6\n\x18\x05\x18\u04A8\n\x18\x03\x19\x03\x19\x03\x19\x07\x19\u04AD" +
		"\n\x19\f\x19\x0E\x19\u04B0\v\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04B5" +
		"\n\x19\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u04BB\n\x19\f\x19\x0E\x19" +
		"\u04BE\v\x19\x05\x19\u04C0\n\x19\x03\x19\x03\x19\x03\x19\x07\x19\u04C5" +
		"\n\x19\f\x19\x0E\x19\u04C8\v\x19\x05\x19\u04CA\n\x19\x05\x19\u04CC\n\x19" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u04D2\n\x1A\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x05\x1B\u04D8\n\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x05\x1C\u04E9\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u04F0\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x05\x1F\u04F7" +
		"\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F" +
		"\u0500\n\x1F\x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x05\"\u050E\n\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x05\"\u051B\n\"\x03\"\x03\"\x03\"\x05\"\u0520\n\"" +
		"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03" +
		"#\x05#\u0530\n#\x03$\x03$\x03$\x03$\x07$\u0536\n$\f$\x0E$\u0539\v$\x03" +
		"$\x03$\x03%\x03%\x03%\x03%\x03%\x05%\u0542\n%\x03&\x03&\x07&\u0546\n&" +
		"\f&\x0E&\u0549\v&\x03\'\x03\'\x03\'\x03\'\x03\'\x05\'\u0550\n\'\x03\'" +
		"\x03\'\x03\'\x05\'\u0555\n\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'" +
		"\x03\'\x03\'\x05\'\u0560\n\'\x03\'\x03\'\x03\'\x03\'\x03\'\x05\'\u0567" +
		"\n\'\x03\'\x03\'\x03\'\x05\'\u056C\n\'\x03(\x03(\x05(\u0570\n(\x05(\u0572" +
		"\n(\x03(\x03(\x03(\x05(\u0577\n(\x03(\x03(\x07(\u057B\n(\f(\x0E(\u057E" +
		"\v(\x03(\x03(\x05(\u0582\n(\x05(\u0584\n(\x03(\x03(\x05(\u0588\n(\x03" +
		"(\x05(\u058B\n(\x03(\x05(\u058E\n(\x03(\x03(\x07(\u0592\n(\f(\x0E(\u0595" +
		"\v(\x03(\x03(\x05(\u0599\n(\x05(\u059B\n(\x03(\x03(\x03(\x05(\u05A0\n" +
		"(\x03(\x03(\x03(\x03(\x03(\x05(\u05A7\n(\x05(\u05A9\n(\x03(\x03(\x03(" +
		"\x03(\x03(\x05(\u05B0\n(\x03)\x03)\x03)\x03)\x03)\x05)\u05B7\n)\x03)\x05" +
		")\u05BA\n)\x03*\x03*\x03*\x03*\x03*\x03*\x05*\u05C2\n*\x03*\x03*\x03*" +
		"\x03*\x03*\x03*\x05*\u05CA\n*\x05*\u05CC\n*\x03+\x03+\x03+\x03+\x03+\x03" +
		"+\x05+\u05D4\n+\x03,\x03,\x05,\u05D8\n,\x03,\x05,\u05DB\n,\x03,\x03,\x07" +
		",\u05DF\n,\f,\x0E,\u05E2\v,\x03,\x03,\x05,\u05E6\n,\x03,\x05,\u05E9\n" +
		",\x03,\x03,\x07,\u05ED\n,\f,\x0E,\u05F0\v,\x05,\u05F2\n,\x03-\x03-\x05" +
		"-\u05F6\n-\x03-\x03-\x03-\x05-\u05FB\n-\x03-\x03-\x03-\x05-\u0600\n-\x03" +
		"-\x03-\x05-\u0604\n-\x03-\x03-\x03-\x05-\u0609\n-\x03-\x05-\u060C\n-\x03" +
		"-\x03-\x03-\x05-\u0611\n-\x03-\x03-\x05-\u0615\n-\x03-\x03-\x05-\u0619" +
		"\n-\x03-\x03-\x03-\x05-\u061E\n-\x03-\x03-\x03-\x05-\u0623\n-\x03-\x03" +
		"-\x03-\x05-\u0628\n-\x03-\x03-\x03-\x03-\x05-\u062E\n-\x03-\x03-\x03-" +
		"\x05-\u0633\n-\x03-\x03-\x03-\x05-\u0638\n-\x03-\x03-\x03-\x03-\x05-\u063E" +
		"\n-\x03-\x03-\x03-\x05-\u0643\n-\x03-\x03-\x03-\x05-\u0648\n-\x03-\x03" +
		"-\x03-\x05-\u064D\n-\x03-\x03-\x03-\x05-\u0652\n-\x03-\x03-\x03-\x05-" +
		"\u0657\n-\x03-\x03-\x03-\x05-\u065C\n-\x03-\x03-\x03-\x05-\u0661\n-\x03" +
		"-\x03-\x03-\x05-\u0666\n-\x03-\x03-\x03-\x05-\u066B\n-\x03-\x03-\x03-" +
		"\x05-\u0670\n-\x03-\x03-\x03-\x03-\x05-\u0676\n-\x03-\x03-\x05-\u067A" +
		"\n-\x03-\x03-\x03-\x03-\x05-\u0680\n-\x03.\x03.\x03.\x03/\x03/\x03/\x03" +
		"/\x03/\x05/\u068A\n/\x03/\x03/\x03/\x03/\x03/\x05/\u0691\n/\x05/\u0693" +
		"\n/\x03/\x03/\x03/\x03/\x07/\u0699\n/\f/\x0E/\u069C\v/\x03/\x03/\x05/" +
		"\u06A0\n/\x030\x050\u06A3\n0\x030\x030\x030\x030\x030\x030\x050\u06AB" +
		"\n0\x030\x030\x030\x030\x050\u06B1\n0\x030\x030\x030\x030\x030\x030\x03" +
		"0\x030\x030\x030\x030\x030\x030\x030\x050\u06C1\n0\x030\x030\x030\x03" +
		"0\x030\x030\x030\x030\x030\x030\x050\u06CD\n0\x050\u06CF\n0\x031\x051" +
		"\u06D2\n1\x031\x031\x031\x031\x031\x031\x051\u06DA\n1\x031\x031\x031\x03" +
		"1\x051\u06E0\n1\x031\x031\x031\x031\x051\u06E6\n1\x032\x032\x032\x032" +
		"\x032\x032\x032\x032\x032\x072\u06F1\n2\f2\x0E2\u06F4\v2\x032\x032\x07" +
		"2\u06F8\n2\f2\x0E2\u06FB\v2\x032\x032\x032\x072\u0700\n2\f2\x0E2\u0703" +
		"\v2\x052\u0705\n2\x032\x032\x032\x032\x032\x032\x032\x032\x072\u070F\n" +
		"2\f2\x0E2\u0712\v2\x032\x032\x072\u0716\n2\f2\x0E2\u0719\v2\x032\x032" +
		"\x032\x072\u071E\n2\f2\x0E2\u0721\v2\x052\u0723\n2\x032\x032\x032\x03" +
		"2\x032\x032\x032\x032\x072\u072D\n2\f2\x0E2\u0730\v2\x032\x032\x072\u0734" +
		"\n2\f2\x0E2\u0737\v2\x032\x032\x032\x072\u073C\n2\f2\x0E2\u073F\v2\x05" +
		"2\u0741\n2\x032\x032\x032\x072\u0746\n2\f2\x0E2\u0749\v2\x032\x032\x03" +
		"2\x072\u074E\n2\f2\x0E2\u0751\v2\x052\u0753\n2\x052\u0755\n2\x033\x03" +
		"3\x033\x053\u075A\n3\x034\x034\x034\x034\x064\u0760\n4\r4\x0E4\u0761\x03" +
		"4\x034\x035\x035\x035\x075\u0769\n5\f5\x0E5\u076C\v5\x036\x056\u076F\n" +
		"6\x036\x036\x056\u0773\n6\x036\x036\x036\x056\u0778\n6\x036\x036\x036" +
		"\x036\x056\u077E\n6\x036\x036\x036\x036\x056\u0784\n6\x036\x036\x036\x05" +
		"6\u0789\n6\x036\x036\x036\x056\u078E\n6\x036\x036\x036\x056\u0793\n6\x03" +
		"6\x036\x036\x056\u0798\n6\x036\x056\u079B\n6\x037\x037\x037\x057\u07A0" +
		"\n7\x037\x067\u07A3\n7\r7\x0E7\u07A4\x037\x037\x037\x037\x037\x037\x03" +
		"7\x037\x057\u07AF\n7\x038\x038\x058\u07B3\n8\x038\x038\x038\x038\x038" +
		"\x058\u07BA\n8\x038\x038\x038\x058\u07BF\n8\x038\x058\u07C2\n8\x038\x03" +
		"8\x038\x058\u07C7\n8\x038\x058\u07CA\n8\x038\x038\x058\u07CE\n8\x038\x03" +
		"8\x058\u07D2\n8\x039\x039\x039\x039\x079\u07D8\n9\f9\x0E9\u07DB\v9\x03" +
		":\x03:\x03:\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03" +
		";\x03;\x05;\u07ED\n;\x03;\x05;\u07F0\n;\x03;\x05;\u07F3\n;\x03;\x03;\x05" +
		";\u07F7\n;\x03;\x03;\x03<\x03<\x03<\x03<\x07<\u07FF\n<\f<\x0E<\u0802\v" +
		"<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x07=\u080C\n=\f=\x0E=\u080F" +
		"\v=\x03=\x03=\x03>\x03>\x05>\u0815\n>\x03>\x05>\u0818\n>\x03>\x03>\x03" +
		">\x03>\x03>\x07>\u081F\n>\f>\x0E>\u0822\v>\x03>\x05>\u0825\n>\x03?\x03" +
		"?\x03?\x03?\x03?\x03?\x03?\x03?\x03?\x05?\u0830\n?\x03?\x05?\u0833\n?" +
		"\x03?\x03?\x05?\u0837\n?\x03?\x03?\x03@\x03@\x03@\x03@\x05@\u083F\n@\x03" +
		"@\x05@\u0842\n@\x03@\x03@\x03@\x05@\u0847\n@\x03@\x03@\x03@\x03@\x03@" +
		"\x03@\x05@\u084F\n@\x03@\x03@\x03@\x03@\x05@\u0855\n@\x03@\x03@\x05@\u0859" +
		"\n@\x03A\x03A\x05A\u085D\nA\x03A\x07A\u0860\nA\fA\x0EA\u0863\vA\x03A\x03" +
		"A\x05A\u0867\nA\x03A\x03A\x03A\x03A\x03A\x05A\u086E\nA\x03A\x03A\x05A" +
		"\u0872\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x07A\u087B\nA\fA\x0EA\u087E" +
		"\vA\x03A\x03A\x03A\x03A\x03A\x05A\u0885\nA\x03A\x05A\u0888\nA\x03A\x03" +
		"A\x07A\u088C\nA\fA\x0EA\u088F\vA\x03A\x03A\x03A\x05A\u0894\nA\x05A\u0896" +
		"\nA\x03A\x03A\x03A\x05A\u089B\nA\x03A\x03A\x07A\u089F\nA\fA\x0EA\u08A2" +
		"\vA\x03A\x03A\x03A\x05A\u08A7\nA\x05A\u08A9\nA\x03A\x03A\x05A\u08AD\n" +
		"A\x03A\x05A\u08B0\nA\x03A\x05A\u08B3\nA\x03A\x03A\x07A\u08B7\nA\fA\x0E" +
		"A\u08BA\vA\x03A\x03A\x03A\x05A\u08BF\nA\x03A\x05A\u08C2\nA\x03A\x03A\x07" +
		"A\u08C6\nA\fA\x0EA\u08C9\vA\x03A\x03A\x03A\x05A\u08CE\nA\x05A\u08D0\n" +
		"A\x03A\x03A\x03A\x05A\u08D5\nA\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u08DD" +
		"\nA\x05A\u08DF\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u08E8\nA\x03" +
		"A\x03A\x03A\x05A\u08ED\nA\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u08F5\nA" +
		"\x03A\x03A\x05A\u08F9\nA\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0901\nA\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u090B\nA\x03A\x03A\x03A\x05" +
		"A\u0910\nA\x03A\x03A\x03A\x03A\x03A\x05A\u0917\nA\x03A";
	private static readonly _serializedATNSegment1: string =
		"\x03A\x05A\u091B\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A" +
		"\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u092E\nA\x03A\x03A\x05A\u0932" +
		"\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u093E\nA\x03" +
		"A\x05A\u0941\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u094A\nA\x03A" +
		"\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x07A\u0959" +
		"\nA\fA\x0EA\u095C\vA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05" +
		"A\u0967\nA\x03A\x03A\x03A\x03A\x03A\x05A\u096E\nA\x03A\x03A\x03A\x03A" +
		"\x03A\x05A\u0975\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A" +
		"\x03A\x07A\u0982\nA\fA\x0EA\u0985\vA\x03A\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x03A\x03A\x03A\x05A\u0991\nA\x03A\x03A\x03A\x03A\x05A\u0997\nA\x03A" +
		"\x03A\x03A\x03A\x05A\u099D\nA\x03A\x03A\x03A\x03A\x05A\u09A3\nA\x03A\x03" +
		"A\x03A\x03A\x05A\u09A9\nA\x03A\x03A\x03A\x03A\x05A\u09AF\nA\x03A\x03A" +
		"\x03A\x03A\x05A\u09B5\nA\x03B\x03B\x03B\x05B\u09BA\nB\x03B\x03B\x03C\x03" +
		"C\x03C\x05C\u09C1\nC\x03C\x03C\x03D\x03D\x03D\x05D\u09C8\nD\x03D\x03D" +
		"\x03D\x03D\x03D\x05D\u09CF\nD\x03D\x05D\u09D2\nD\x03D\x03D\x05D\u09D6" +
		"\nD\x03D\x05D\u09D9\nD\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03F\x03" +
		"F\x03F\x05F\u09E6\nF\x03F\x03F\x03G\x03G\x03G\x05G\u09ED\nG\x03G\x03G" +
		"\x03H\x03H\x03H\x05H\u09F4\nH\x03H\x03H\x03I\x03I\x05I\u09FA\nI\x03I\x03" +
		"I\x05I\u09FE\nI\x03I\x03I\x05I\u0A02\nI\x03J\x03J\x03J\x03J\x03J\x05J" +
		"\u0A09\nJ\x03J\x05J\u0A0C\nJ\x03K\x03K\x03K\x05K\u0A11\nK\x03K\x03K\x03" +
		"L\x03L\x03L\x05L\u0A18\nL\x03L\x03L\x03L\x07L\u0A1D\nL\fL\x0EL\u0A20\v" +
		"L\x03L\x05L\u0A23\nL\x03M\x03M\x03M\x03M\x03M\x07M\u0A2A\nM\fM\x0EM\u0A2D" +
		"\vM\x03N\x03N\x03N\x03N\x03O\x03O\x05O\u0A35\nO\x03O\x03O\x03P\x03P\x03" +
		"P\x03P\x03P\x05P\u0A3E\nP\x03P\x05P\u0A41\nP\x03Q\x03Q\x05Q\u0A45\nQ\x03" +
		"R\x03R\x03R\x03S\x03S\x03S\x03S\x05S\u0A4E\nS\x03T\x03T\x05T\u0A52\nT" +
		"\x03T\x05T\u0A55\nT\x03T\x05T\u0A58\nT\x03T\x03T\x03T\x03T\x03T\x03T\x05" +
		"T\u0A60\nT\x03T\x03T\x03T\x03T\x05T\u0A66\nT\x03T\x03T\x03T\x03T\x03T" +
		"\x07T\u0A6D\nT\fT\x0ET\u0A70\vT\x05T\u0A72\nT\x03T\x03T\x03T\x03T\x03" +
		"T\x03T\x03T\x07T\u0A7B\nT\fT\x0ET\u0A7E\vT\x05T\u0A80\nT\x03U\x03U\x03" +
		"U\x05U\u0A85\nU\x03U\x05U\u0A88\nU\x03U\x03U\x03U\x05U\u0A8D\nU\x03U\x03" +
		"U\x03U\x03U\x03U\x03U\x03U\x03U\x05U\u0A97\nU\x03U\x03U\x03U\x05U\u0A9C" +
		"\nU\x03U\x03U\x06U\u0AA0\nU\rU\x0EU\u0AA1\x05U\u0AA4\nU\x03U\x03U\x06" +
		"U\u0AA8\nU\rU\x0EU\u0AA9\x05U\u0AAC\nU\x03U\x03U\x03U\x03U\x05U\u0AB2" +
		"\nU\x03U\x03U\x03U\x03U\x07U\u0AB8\nU\fU\x0EU\u0ABB\vU\x03U\x03U\x05U" +
		"\u0ABF\nU\x03U\x03U\x03U\x03U\x07U\u0AC5\nU\fU\x0EU\u0AC8\vU\x05U\u0ACA" +
		"\nU\x03V\x03V\x03V\x05V\u0ACF\nV\x03V\x05V\u0AD2\nV\x03V\x03V\x03V\x05" +
		"V\u0AD7\nV\x03V\x03V\x03V\x03V\x03V\x03V\x05V\u0ADF\nV\x03V\x03V\x03V" +
		"\x03V\x03V\x03V\x05V\u0AE7\nV\x03V\x03V\x03V\x03V\x05V\u0AED\nV\x03V\x03" +
		"V\x03V\x03V\x07V\u0AF3\nV\fV\x0EV\u0AF6\vV\x03V\x03V\x05V\u0AFA\nV\x03" +
		"V\x03V\x03V\x03V\x07V\u0B00\nV\fV\x0EV\u0B03\vV\x05V\u0B05\nV\x03W\x03" +
		"W\x05W\u0B09\nW\x03W\x05W\u0B0C\nW\x03W\x03W\x03W\x03W\x03W\x03W\x05W" +
		"\u0B14\nW\x03W\x03W\x03W\x03W\x05W\u0B1A\nW\x03W\x03W\x03W\x03W\x03W\x07" +
		"W\u0B21\nW\fW\x0EW\u0B24\vW\x05W\u0B26\nW\x03X\x03X\x05X\u0B2A\nX\x03" +
		"X\x03X\x05X\u0B2E\nX\x03X\x03X\x06X\u0B32\nX\rX\x0EX\u0B33\x03X\x03X\x05" +
		"X\u0B38\nX\x03X\x03X\x05X\u0B3C\nX\x05X\u0B3E\nX\x03X\x05X\u0B41\nX\x03" +
		"X\x05X\u0B44\nX\x03X\x05X\u0B47\nX\x03X\x03X\x06X\u0B4B\nX\rX\x0EX\u0B4C" +
		"\x03X\x03X\x05X\u0B51\nX\x03X\x05X\u0B54\nX\x03X\x05X\u0B57\nX\x03X\x05" +
		"X\u0B5A\nX\x03X\x05X\u0B5D\nX\x05X\u0B5F\nX\x03Y\x03Y\x05Y\u0B63\nY\x03" +
		"Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x07Z\u0B6F\nZ\fZ\x0EZ\u0B72" +
		"\vZ\x05Z\u0B74\nZ\x03[\x03[\x03[\x03[\x05[\u0B7A\n[\x03\\\x03\\\x05\\" +
		"\u0B7E\n\\\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u0B86\n]\x03^\x03^\x05^" +
		"\u0B8A\n^\x03^\x05^\u0B8D\n^\x03^\x05^\u0B90\n^\x03^\x03^\x03^\x03^\x03" +
		"^\x03^\x03^\x05^\u0B99\n^\x03^\x03^\x05^\u0B9D\n^\x03^\x05^\u0BA0\n^\x03" +
		"^\x03^\x05^\u0BA4\n^\x03_\x03_\x05_\u0BA8\n_\x03_\x05_\u0BAB\n_\x03_\x05" +
		"_\u0BAE\n_\x03_\x03_\x03_\x05_\u0BB3\n_\x03_\x03_\x03_\x03_\x05_\u0BB9" +
		"\n_\x07_\u0BBB\n_\f_\x0E_\u0BBE\v_\x03_\x03_\x03_\x03_\x03_\x03_\x03_" +
		"\x05_\u0BC7\n_\x03_\x03_\x03_\x03_\x05_\u0BCD\n_\x07_\u0BCF\n_\f_\x0E" +
		"_\u0BD2\v_\x03_\x03_\x03_\x05_\u0BD7\n_\x03_\x03_\x05_\u0BDB\n_\x03`\x03" +
		"`\x03`\x03`\x05`\u0BE1\n`\x03`\x05`\u0BE4\n`\x03a\x03a\x03a\x03a\x03a" +
		"\x03a\x03a\x03a\x03a\x03a\x05a\u0BF0\na\x03a\x03a\x05a\u0BF4\na\x03a\x03" +
		"a\x05a\u0BF8\na\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0C00\nb\x03b\x03b" +
		"\x05b\u0C04\nb\x03c\x03c\x03c\x03c\x03d\x03d\x05d\u0C0C\nd\x03d\x05d\u0C0F" +
		"\nd\x03d\x03d\x05d\u0C13\nd\x03d\x05d\u0C16\nd\x03d\x03d\x03d\x03d\x07" +
		"d\u0C1C\nd\fd\x0Ed\u0C1F\vd\x03d\x03d\x05d\u0C23\nd\x03d\x05d\u0C26\n" +
		"d\x03d\x05d\u0C29\nd\x03e\x03e\x05e\u0C2D\ne\x03e\x05e\u0C30\ne\x03e\x03" +
		"e\x03e\x03e\x03e\x07e\u0C37\ne\fe\x0Ee\u0C3A\ve\x03e\x03e\x05e\u0C3E\n" +
		"e\x03f\x03f\x03f\x03f\x03f\x07f\u0C45\nf\ff\x0Ef\u0C48\vf\x03g\x03g\x05" +
		"g\u0C4C\ng\x03h\x03h\x03h\x07h\u0C51\nh\fh\x0Eh\u0C54\vh\x03i\x03i\x07" +
		"i\u0C58\ni\fi\x0Ei\u0C5B\vi\x03i\x03i\x03i\x07i\u0C60\ni\fi\x0Ei\u0C63" +
		"\vi\x03i\x03i\x05i\u0C67\ni\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u0C6F\n" +
		"j\x03j\x05j\u0C72\nj\x03j\x05j\u0C75\nj\x03j\x03j\x03j\x07j\u0C7A\nj\f" +
		"j\x0Ej\u0C7D\vj\x05j\u0C7F\nj\x03j\x03j\x03j\x03j\x03j\x05j\u0C86\nj\x03" +
		"j\x05j\u0C89\nj\x03j\x03j\x03j\x03j\x03j\x03j\x05j\u0C91\nj\x03k\x03k" +
		"\x03k\x03k\x05k\u0C97\nk\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03l\x03l" +
		"\x05l\u0CA2\nl\x03m\x05m\u0CA5\nm\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03" +
		"m\x03m\x05m\u0CB0\nm\x03m\x03m\x03m\x03m\x05m\u0CB6\nm\x03m\x03m\x05m" +
		"\u0CBA\nm\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x05m\u0CC5\nm\x03" +
		"m\x03m\x03m\x05m\u0CCA\nm\x05m\u0CCC\nm\x03m\x03m\x05m\u0CD0\nm\x03n\x03" +
		"n\x03n\x03n\x03n\x03n\x03n\x03n\x05n\u0CDA\nn\x03o\x03o\x03o\x03o\x03" +
		"o\x03o\x03o\x03o\x05o\u0CE4\no\x03p\x03p\x07p\u0CE8\np\fp\x0Ep\u0CEB\v" +
		"p\x03p\x03p\x05p\u0CEF\np\x03p\x05p\u0CF2\np\x03p\x05p\u0CF5\np\x03p\x05" +
		"p\u0CF8\np\x03p\x03p\x07p\u0CFC\np\fp\x0Ep\u0CFF\vp\x03p\x03p\x05p\u0D03" +
		"\np\x03p\x05p\u0D06\np\x03p\x05p\u0D09\np\x03p\x05p\u0D0C\np\x05p\u0D0E" +
		"\np\x03q\x03q\x07q\u0D12\nq\fq\x0Eq\u0D15\vq\x03q\x03q\x05q\u0D19\nq\x03" +
		"q\x05q\u0D1C\nq\x03q\x05q\u0D1F\nq\x03r\x03r\x05r\u0D23\nr\x03r\x03r\x03" +
		"s\x03s\x05s\u0D29\ns\x03s\x03s\x05s\u0D2D\ns\x03t\x03t\x03t\x03t\x03t" +
		"\x03t\x03t\x03t\x05t\u0D37\nt\x03u\x03u\x05u\u0D3B\nu\x03u\x03u\x07u\u0D3F" +
		"\nu\fu\x0Eu\u0D42\vu\x03v\x03v\x03v\x03v\x03v\x03v\x05v\u0D4A\nv\x03v" +
		"\x05v\u0D4D\nv\x03v\x03v\x05v\u0D51\nv\x03v\x05v\u0D54\nv\x03v\x03v\x05" +
		"v\u0D58\nv\x03v\x03v\x05v\u0D5C\nv\x03v\x05v\u0D5F\nv\x05v\u0D61\nv\x03" +
		"w\x03w\x03w\x03w\x07w\u0D67\nw\fw\x0Ew\u0D6A\vw\x03w\x03w\x03w\x03w\x03" +
		"w\x03w\x03w\x03w\x03w\x05w\u0D75\nw\x03w\x03w\x06w\u0D79\nw\rw\x0Ew\u0D7A" +
		"\x05w\u0D7D\nw\x03w\x03w\x06w\u0D81\nw\rw\x0Ew\u0D82\x05w\u0D85\nw\x05" +
		"w\u0D87\nw\x03x\x03x\x03x\x03x\x05x\u0D8D\nx\x03x\x03x\x03x\x03x\x03x" +
		"\x03x\x05x\u0D95\nx\x03y\x03y\x03y\x03y\x03y\x03y\x05y\u0D9D\ny\x03z\x03" +
		"z\x03z\x03z\x05z\u0DA3\nz\x03z\x03z\x03z\x03z\x03z\x07z\u0DAA\nz\fz\x0E" +
		"z\u0DAD\vz\x03z\x03z\x05z\u0DB1\nz\x05z\u0DB3\nz\x03z\x03z\x05z\u0DB7" +
		"\nz\x03{\x03{\x05{\u0DBB\n{\x03|\x03|\x03|\x03|\x05|\u0DC1\n|\x03|\x03" +
		"|\x03|\x03|\x03|\x05|\u0DC8\n|\x03}\x03}\x03}\x03}\x03}\x07}\u0DCF\n}" +
		"\f}\x0E}\u0DD2\v}\x05}\u0DD4\n}\x03~\x03~\x05~\u0DD8\n~\x03\x7F\x03\x7F" +
		"\x05\x7F\u0DDC\n\x7F\x03\x7F\x03\x7F\x05\x7F\u0DE0\n\x7F\x03\x7F\x05\x7F" +
		"\u0DE3\n\x7F\x03\x7F\x05\x7F\u0DE6\n\x7F\x03\x7F\x05\x7F\u0DE9\n\x7F\x03" +
		"\x80\x03\x80\x05\x80\u0DED\n\x80\x03\x80\x03\x80\x05\x80\u0DF1\n\x80\x03" +
		"\x80\x05\x80\u0DF4\n\x80\x03\x80\x05\x80\u0DF7\n\x80\x03\x80\x05\x80\u0DFA" +
		"\n\x80\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82\x05\x82\u0E01\n\x82\x03" +
		"\x82\x03\x82\x05\x82\u0E05\n\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83" +
		"\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x07\x84\u0E12\n\x84\f" +
		"\x84\x0E\x84\u0E15\v\x84\x03\x85\x03\x85\x03\x85\x03\x86\x03\x86\x03\x86" +
		"\x03\x86\x03\x86\x03\x87\x03\x87\x05\x87\u0E21\n\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x07\x87\u0E27\n\x87\f\x87\x0E\x87\u0E2A\v\x87\x03\x88\x03" +
		"\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x05\x88\u0E33\n\x88\x03\x89" +
		"\x03\x89\x05\x89\u0E37\n\x89\x03\x89\x05\x89\u0E3A\n\x89\x03\x89\x03\x89" +
		"\x03\x8A\x03\x8A\x05\x8A\u0E40\n\x8A\x03\x8A\x05\x8A\u0E43\n\x8A\x03\x8A" +
		"\x05\x8A\u0E46\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03" +
		"\x8B\x05\x8B\u0E4F\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C" +
		"\x03\x8C\x05\x8C\u0E58\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
		"\x8D\x07\x8D\u0E60\n\x8D\f\x8D\x0E\x8D\u0E63\v\x8D\x03\x8D\x05\x8D\u0E66" +
		"\n\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07\x8E\u0E6E\n" +
		"\x8E\f\x8E\x0E\x8E\u0E71\v\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F" +
		"\x03\x8F\x03\x8F\x05\x8F\u0E7A\n\x8F\x03\x90\x03\x90\x03\x90\x03\x91\x03" +
		"\x91\x03\x91\x05\x91\u0E82\n\x91\x03\x91\x05\x91\u0E85\n\x91\x03\x92\x03" +
		"\x92\x03\x92\x03\x92\x03\x92\x07\x92\u0E8C\n\x92\f\x92\x0E\x92\u0E8F\v" +
		"\x92\x05\x92\u0E91\n\x92\x03\x92\x03\x92\x05\x92\u0E95\n\x92\x03\x92\x07" +
		"\x92\u0E98\n\x92\f\x92\x0E\x92\u0E9B\v\x92\x03\x92\x05\x92\u0E9E\n\x92" +
		"\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x07\x93\u0EA5\n\x93\f\x93\x0E" +
		"\x93\u0EA8\v\x93\x05\x93\u0EAA\n\x93\x03\x94\x03\x94\x03\x94\x03\x95\x03" +
		"\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x03\x96\x03\x96\x07\x96\u0EC7\n\x96\f\x96\x0E\x96" +
		"\u0ECA\v\x96\x05\x96\u0ECC\n\x96\x03\x96\x05\x96\u0ECF\n\x96\x03\x97\x03" +
		"\x97\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u0F05\n\x9B\f\x9B" +
		"\x0E\x9B\u0F08\v\x9B\x03\x9B\x03\x9B\x05\x9B\u0F0C\n\x9B\x03\x9C\x03\x9C" +
		"\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9E" +
		"\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E" +
		"\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0F28\n\x9E\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x05\x9F\u0F36\n\x9F\x03\xA0\x03\xA0\x03\xA0\x07\xA0" +
		"\u0F3B\n\xA0\f\xA0\x0E\xA0\u0F3E\v\xA0\x03\xA0\x05\xA0\u0F41\n\xA0\x03" +
		"\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0F47\n\xA1\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0F4F\n\xA2\x05\xA2\u0F51\n\xA2\x03\xA3" +
		"\x03\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x05\xA4" +
		"\u0F5C\n\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03\xA6\x03" +
		"\xA6\x05\xA6\u0F66\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x05\xA7" +
		"\u0F6D\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0F73\n\xA8\x03\xA9" +
		"\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x05\xAA\u0F7B\n\xAA\x03\xAB\x03" +
		"\xAB\x03\xAB\x05\xAB\u0F80\n\xAB\x03\xAB\x03\xAB\x07\xAB\u0F84\n\xAB\f" +
		"\xAB\x0E\xAB\u0F87\v\xAB\x03\xAB\x07\xAB\u0F8A\n\xAB\f\xAB\x0E\xAB\u0F8D" +
		"\v\xAB\x03\xAB\x07\xAB\u0F90\n\xAB\f\xAB\x0E\xAB\u0F93\v\xAB\x03\xAB\x07" +
		"\xAB\u0F96\n\xAB\f\xAB\x0E\xAB\u0F99\v\xAB\x03\xAB\x06\xAB\u0F9C\n\xAB" +
		"\r\xAB\x0E\xAB\u0F9D\x05\xAB\u0FA0\n\xAB\x03\xAB\x03\xAB\x05\xAB\u0FA4" +
		"\n\xAB\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0FA9\n\xAC\x03\xAC\x06\xAC\u0FAC" +
		"\n\xAC\r\xAC\x0E\xAC\u0FAD\x03\xAC\x03\xAC\x06\xAC\u0FB2\n\xAC\r\xAC\x0E" +
		"\xAC\u0FB3\x05\xAC\u0FB6\n\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x06\xAD\u0FBF\n\xAD\r\xAD\x0E\xAD\u0FC0\x03\xAD\x07\xAD" +
		"\u0FC4\n\xAD\f\xAD\x0E\xAD\u0FC7\v\xAD\x03\xAD\x03\xAD\x06\xAD\u0FCB\n" +
		"\xAD\r\xAD\x0E\xAD\u0FCC\x05\xAD\u0FCF\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB0\x05" +
		"\xB0\u0FDD\n\xB0\x03\xB0\x03\xB0\x06\xB0\u0FE1\n\xB0\r\xB0\x0E\xB0\u0FE2" +
		"\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u0FE8\n\xB0\x03\xB1\x03\xB1\x03\xB1\x05" +
		"\xB1\u0FED\n\xB1\x03\xB1\x03\xB1\x06\xB1\u0FF1\n\xB1\r\xB1\x0E\xB1\u0FF2" +
		"\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05\xB1\u0FFA\n\xB1\x03\xB2\x03" +
		"\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u1002\n\xB3\x03\xB3\x03\xB3" +
		"\x03\xB3\x03\xB3\x06\xB3\u1008\n\xB3\r\xB3\x0E\xB3\u1009\x03\xB3\x03\xB3" +
		"\x03\xB3\x05\xB3\u100F\n\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u1015" +
		"\n\xB4\x03\xB4\x05\xB4\u1018\n\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x05\xB4\u1020\n\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5" +
		"\x05\xB5\u1027\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03" +
		"\xB6\x05\xB6\u1030\n\xB6\x03\xB6\x05\xB6\u1033\n\xB6\x03\xB7\x03\xB7\x03" +
		"\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB8\x07\xB8\u1042\n\xB8\f\xB8\x0E\xB8\u1045\v\xB8\x03\xB8\x03" +
		"\xB8\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u104C\n\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u1054\n\xB9\x03\xBA\x03\xBA\x05\xBA\u1058" +
		"\n\xBA\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u105D\n\xBB\x03\xBB\x03\xBB\x06" +
		"\xBB\u1061\n\xBB\r\xBB\x0E\xBB\u1062\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x06" +
		"\xBC\u1069\n\xBC\r\xBC\x0E\xBC\u106A\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03" +
		"\xBD\x07\xBD\u1072\n\xBD\f\xBD\x0E\xBD\u1075\v\xBD\x03\xBD\x03\xBD\x03" +
		"\xBD\x05\xBD\u107A\n\xBD\x03\xBD\x03\xBD\x03\xBD\x07\xBD\u107F\n\xBD\f" +
		"\xBD\x0E\xBD\u1082\v\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u1088" +
		"\n\xBD\x03\xBD\x07\xBD\u108B\n\xBD\f\xBD\x0E\xBD\u108E\v\xBD\x05\xBD\u1090" +
		"\n\xBD\x05\xBD\u1092\n\xBD\x03\xBD\x03\xBD\x06\xBD\u1096\n\xBD\r\xBD\x0E" +
		"\xBD\u1097\x05\xBD\u109A\n\xBD\x03\xBD\x03\xBD\x07\xBD\u109E\n\xBD\f\xBD" +
		"\x0E\xBD\u10A1\v\xBD\x05\xBD\u10A3\n\xBD\x03\xBE\x03\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x07\xBE\u10AA\n\xBE\f\xBE\x0E\xBE\u10AD\v\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x05\xBE\u10B2\n\xBE\x03\xBE\x03\xBE\x03\xBE\x07\xBE\u10B7\n\xBE" +
		"\f\xBE\x0E\xBE\u10BA\v\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u10C0" +
		"\n\xBE\x03\xBE\x07\xBE\u10C3\n\xBE\f\xBE\x0E\xBE\u10C6\v\xBE\x05\xBE\u10C8" +
		"\n\xBE\x05\xBE\u10CA\n\xBE\x03\xBE\x03\xBE\x06\xBE\u10CE\n\xBE\r\xBE\x0E" +
		"\xBE\u10CF\x05\xBE\u10D2\n\xBE\x03\xBE\x03\xBE\x07\xBE\u10D6\n\xBE\f\xBE" +
		"\x0E\xBE\u10D9\v\xBE\x05\xBE\u10DB\n\xBE\x03\xBF\x03\xBF\x03\xBF\x05\xBF" +
		"\u10E0\n\xBF\x03\xBF\x03\xBF\x03\xBF\x07\xBF\u10E5\n\xBF\f\xBF\x0E\xBF" +
		"\u10E8\v\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u10EE\n\xC0\f\xC0" +
		"\x0E\xC0\u10F1\v\xC0\x03\xC0\x03\xC0\x05\xC0\u10F5\n\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u10FC\n\xC0\f\xC0\x0E\xC0\u10FF\v\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u1105\n\xC0\x03\xC0\x07\xC0\u1108" +
		"\n\xC0\f\xC0\x0E\xC0\u110B\v\xC0\x05\xC0\u110D\n\xC0\x05\xC0\u110F\n\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x07\xC0\u1115\n\xC0\f\xC0\x0E\xC0\u1118" +
		"\v\xC0\x05\xC0\u111A\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x07\xC1\u1124\n\xC1\f\xC1\x0E\xC1\u1127\v\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x05\xC1\u112C\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x03\xC2\x07\xC2\u1133\n\xC2\f\xC2\x0E\xC2\u1136\v\xC2\x03\xC3\x03\xC3" +
		"\x03\xC3\x03\xC3\x07\xC3\u113C\n\xC3\f\xC3\x0E\xC3\u113F\v\xC3\x03\xC3" +
		"\x03\xC3\x05\xC3\u1143\n\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x07" +
		"\xC3\u114A\n\xC3\f\xC3\x0E\xC3\u114D\v\xC3\x03\xC3\x03\xC3\x03\xC3\x05" +
		"\xC3\u1152\n\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3" +
		"\x07\xC3\u115B\n\xC3\f\xC3\x0E\xC3\u115E\v\xC3\x05\xC3\u1160\n\xC3\x03" +
		"\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x07\xC4\u116A" +
		"\n\xC4\f\xC4\x0E\xC4\u116D\v\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5" +
		"\u1173\n\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u1178\n\xC5\x03\xC6\x03\xC6" +
		"\x03\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x05\xC7\u1187\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03" +
		"\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u1192\n\xC7\x03\xC7\x05\xC7" +
		"\u1195\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u119F\n\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x03\xC9\x03\xC9\x05\xC9\u11A9\n\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u11B3\n\xCA\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u11BD\n\xCC\x03\xCD\x03" +
		"\xCD\x05\xCD\u11C1\n\xCD\x03\xCD\x03\xCD\x05\xCD\u11C5\n\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u11CE\n\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u11E9\n\xCD\x03" +
		"\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x03\xCE\x03\xCE\x05\xCE\u11F8\n\xCE\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xD0";
	private static readonly _serializedATNSegment2: string =
		"\x03\xD0\x05\xD0\u1200\n\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03" +
		"\xD1\x03\xD1\x07\xD1\u1209\n\xD1\f\xD1\x0E\xD1\u120C\v\xD1\x03\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x05\xD2\u1212\n\xD2\x03\xD3\x03\xD3\x05\xD3\u1216" +
		"\n\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x05\xD4\u121D\n\xD4\x03" +
		"\xD4\x03\xD4\x03\xD4\x05\xD4\u1222\n\xD4\x03\xD4\x05\xD4\u1225\n\xD4\x03" +
		"\xD4\x05\xD4\u1228\n\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5" +
		"\x03\xD5\x05\xD5\u1231\n\xD5\x03\xD6\x03\xD6\x05\xD6\u1235\n\xD6\x03\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD9\x03\xD9" +
		"\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x07\xD9\u1251" +
		"\n\xD9\f\xD9\x0E\xD9\u1254\v\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x05\xD9" +
		"\u125A\n\xD9\x03\xD9\x03\xD9\x05\xD9\u125E\n\xD9\x03\xD9\x03\xD9\x03\xD9" +
		"\x03\xD9\x03\xD9\x05\xD9\u1265\n\xD9\x03\xD9\x05\xD9\u1268\n\xD9\x03\xD9" +
		"\x03\xD9\x03\xD9\x05\xD9\u126D\n\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u1277\n\xDA\x03\xDA\x03\xDA\x05\xDA" +
		"\u127B\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u1281\n\xDA\x03\xDA" +
		"\x05\xDA\u1284\n\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u1289\n\xDA\x03\xDA" +
		"\x03\xDA\x05\xDA\u128D\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05" +
		"\xDA\u1294\n\xDA\x03\xDA\x05\xDA\u1297\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x05\xDA\u129D\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u12B5" +
		"\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u12C2\n\xDA\x03\xDA\x05\xDA\u12C5\n\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA" +
		"\u12CF\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u12D7" +
		"\n\xDA\x03\xDA\x03\xDA\x05\xDA\u12DB\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x05\xDA\u12E2\n\xDA\x03\xDA\x05\xDA\u12E5\n\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x07\xDA\u12EC\n\xDA\f\xDA\x0E\xDA\u12EF\v" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u12F4\n\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x05\xDA\u12FA\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x05\xDA\u1304\n\xDA\x05\xDA\u1306\n\xDA\x03\xDB\x03" +
		"\xDB\x03\xDB\x03\xDB\x05\xDB\u130C\n\xDB\x03\xDB\x05\xDB\u130F\n\xDB\x03" +
		"\xDB\x05\xDB\u1312\n\xDB\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u131E\n\xDC\x03\xDC\x05\xDC\u1321" +
		"\n\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u1327\n\xDD\x03\xDE\x05" +
		"\xDE\u132A\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE" +
		"\u1332\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u133A" +
		"\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u1340\n\xDF\x03\xDF\x03" +
		"\xDF\x05\xDF\u1344\n\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0" +
		"\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u1352\n\xE0\x03" +
		"\xE1\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x07\xE2\u135C" +
		"\n\xE2\f\xE2\x0E\xE2\u135F\v\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x05\xE2" +
		"\u1365\n\xE2\x03\xE2\x05\xE2\u1368\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE3" +
		"\x03\xE3\x05\xE3\u136F\n\xE3\x03\xE3\x03\xE3\x03\xE3\x07\xE3\u1374\n\xE3" +
		"\f\xE3\x0E\xE3\u1377\v\xE3\x03\xE4\x03\xE4\x05\xE4\u137B\n\xE4\x03\xE4" +
		"\x06\xE4\u137E\n\xE4\r\xE4\x0E\xE4\u137F\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
		"\x03\xE5\x03\xE5\x03\xE5\x07\xE5\u1389\n\xE5\f\xE5\x0E\xE5\u138C\v\xE5" +
		"\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE7\x03\xE7\x03\xE8\x03\xE8\x05\xE8" +
		"\u1396\n\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u139C\n\xE8\x03\xE9" +
		"\x03\xE9\x03\xE9\x05\xE9\u13A1\n\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03" +
		"\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x05\xE9\u13AE\n\xE9" +
		"\x05\xE9\u13B0\n\xE9\x03\xE9\x03\xE9\x03\xE9\x05\xE9\u13B5\n\xE9\x03\xE9" +
		"\x03\xE9\x03\xE9\x05\xE9\u13BA\n\xE9\x05\xE9\u13BC\n\xE9\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u13C3\n\xEA\x03\xEB\x03\xEB\x03\xEB\x03" +
		"\xEB\x03\xEB\x05\xEB\u13CA\n\xEB\x03\xEB\x05\xEB\u13CD\n\xEB\x03\xEB\x05" +
		"\xEB\u13D0\n\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x05\xEB\u13D6\n\xEB\x03" +
		"\xEB\x03\xEB\x05\xEB\u13DA\n\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC" +
		"\u13E0\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x05\xED\u13E6\n\xED\x03\xED" +
		"\x03\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xF0\x03\xF0" +
		"\x03\xF0\x03\xF0\x03\xF0\x05\xF0\u13F5\n\xF0\x03\xF0\x03\xF0\x03\xF0\x05" +
		"\xF0\u13FA\n\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u1400\n\xF1\x03" +
		"\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u1407\n\xF3\x05\xF3\u1409" +
		"\n\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x05\xF4\u1410\n\xF4\x03" +
		"\xF4\x05\xF4\u1413\n\xF4\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x05\xF7\u141D\n\xF7\x03\xF8\x03\xF8\x05\xF8\u1421\n\xF8" +
		"\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x06\xFA\u1433" +
		"\n\xFA\r\xFA\x0E\xFA\u1434\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05" +
		"\xFB\u143C\n\xFB\x05\xFB\u143E\n\xFB\x03\xFC\x03\xFC\x03\xFC\x06\xFC\u1443" +
		"\n\xFC\r\xFC\x0E\xFC\u1444\x05\xFC\u1447\n\xFC\x03\xFD\x03\xFD\x05\xFD" +
		"\u144B\n\xFD\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u1450\n\xFE\x03\xFF\x03\xFF" +
		"\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u145B" +
		"\n\xFF\x03\u0100\x03\u0100\x03\u0100\x05\u0100\u1460\n\u0100\x03\u0101" +
		"\x03\u0101\x03\u0102\x03\u0102\x05\u0102\u1466\n\u0102\x03\u0103\x05\u0103" +
		"\u1469\n\u0103\x03\u0103\x03\u0103\x05\u0103\u146D\n\u0103\x03\u0103\x06" +
		"\u0103\u1470\n\u0103\r\u0103\x0E\u0103\u1471\x03\u0103\x05\u0103\u1475" +
		"\n\u0103\x03\u0103\x03\u0103\x05\u0103\u1479\n\u0103\x03\u0103\x03\u0103" +
		"\x05\u0103\u147D\n\u0103\x05\u0103\u147F\n\u0103\x03\u0104\x03\u0104\x03" +
		"\u0105\x05\u0105\u1484\n\u0105\x03\u0105\x03\u0105\x03\u0106\x05\u0106" +
		"\u1489\n\u0106\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107" +
		"\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x05\u0107\u1496\n\u0107" +
		"\x03\u0107\x05\u0107\u1499\n\u0107\x03\u0108\x03\u0108\x05\u0108\u149D" +
		"\n\u0108\x03\u0108\x05\u0108\u14A0\n\u0108\x03\u0108\x03\u0108\x03\u0108" +
		"\x05\u0108\u14A5\n\u0108\x03\u0108\x03\u0108\x05\u0108\u14A9\n\u0108\x03" +
		"\u0108\x03\u0108\x05\u0108\u14AD\n\u0108\x03\u0108\x05\u0108\u14B0\n\u0108" +
		"\x03\u0108\x05\u0108\u14B3\n\u0108\x03\u0108\x03\u0108\x05\u0108\u14B7" +
		"\n\u0108\x03\u0108\x05\u0108\u14BA\n\u0108\x03\u0108\x05\u0108\u14BD\n" +
		"\u0108\x03\u0108\x03\u0108\x05\u0108\u14C1\n\u0108\x03\u0108\x05\u0108" +
		"\u14C4\n\u0108\x03\u0108\x05\u0108\u14C7\n\u0108\x03\u0108\x03\u0108\x03" +
		"\u0108\x05\u0108\u14CC\n\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108" +
		"\x03\u0108\x07\u0108\u14D3\n\u0108\f\u0108\x0E\u0108\u14D6\v\u0108\x03" +
		"\u0108\x03\u0108\x05\u0108\u14DA\n\u0108\x03\u0108\x03\u0108\x03\u0108" +
		"\x05\u0108\u14DF\n\u0108\x03\u0108\x03\u0108\x05\u0108\u14E3\n\u0108\x03" +
		"\u0108\x05\u0108\u14E6\n\u0108\x03\u0109\x03\u0109\x05\u0109\u14EA\n\u0109" +
		"\x03\u0109\x03\u0109\x05\u0109\u14EE\n\u0109\x03\u0109\x03\u0109\x03\u0109" +
		"\x05\u0109\u14F3\n\u0109\x03\u0109\x03\u0109\x03\u0109\x05\u0109\u14F8" +
		"\n\u0109\x03\u0109\x03\u0109\x05\u0109\u14FC\n\u0109\x05\u0109\u14FE\n" +
		"\u0109\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x03" +
		"\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010C\x03\u010C\x03\u010C\x03" +
		"\u010C\x05\u010C\u150E\n\u010C\x03\u010C\x03\u010C\x03\u010D\x03\u010D" +
		"\x03\u010D\x07\u010D\u1515\n\u010D\f\u010D\x0E\u010D\u1518\v\u010D\x03" +
		"\u010E\x03\u010E\x03\u010E\x07\u010E\u151D\n\u010E\f\u010E\x0E\u010E\u1520" +
		"\v\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x07\u010F\u1526\n\u010F" +
		"\f\u010F\x0E\u010F\u1529\v\u010F\x03\u010F\x03\u010F\x03\u0110\x03\u0110" +
		"\x03\u0110\x07\u0110\u1530\n\u0110\f\u0110\x0E\u0110\u1533\v\u0110\x03" +
		"\u0111\x03\u0111\x03\u0111\x07\u0111\u1538\n\u0111\f\u0111\x0E\u0111\u153B" +
		"\v\u0111\x03\u0112\x03\u0112\x03\u0112\x07\u0112\u1540\n\u0112\f\u0112" +
		"\x0E\u0112\u1543\v\u0112\x03\u0113\x03\u0113\x03\u0113\x07\u0113\u1548" +
		"\n\u0113\f\u0113\x0E\u0113\u154B\v\u0113\x03\u0114\x03\u0114\x03\u0114" +
		"\x07\u0114\u1550\n\u0114\f\u0114\x0E\u0114\u1553\v\u0114\x03\u0115\x03" +
		"\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u155B\n\u0115" +
		"\x05\u0115\u155D\n\u0115\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1562" +
		"\n\u0116\x03\u0116\x05\u0116\u1565\n\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x05\u0116\u156A\n\u0116\x03\u0116\x05\u0116\u156D\n\u0116\x03\u0117\x03" +
		"\u0117\x05\u0117\u1571\n\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x05\u011A\u157F\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x05\u011A\u1586\n\u011A\x03\u011A\x03\u011A\x03\u011A\x05\u011A" +
		"\u158B\n\u011A\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x06\u011B\u15AB\n\u011B\r\u011B\x0E\u011B" +
		"\u15AC\x03\u011B\x03\u011B\x05\u011B\u15B1\n\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x06\u011B\u15B7\n\u011B\r\u011B\x0E\u011B\u15B8\x03" +
		"\u011B\x03\u011B\x05\u011B\u15BD\n\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15C6\n\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15CE\n\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15D3\n\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15DB\n\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x05\u011B\u15E0\n\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x05\u011B\u15E5\n\u011B\x05\u011B\u15E7\n\u011B\x03\u011B\x03\u011B\x03" +
		"\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15F0\n\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15F5\n\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u15FD\n\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x05\u011B\u1602\n\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u160A\n\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u1612\n\u011B\x03\u011B" +
		"\x05\u011B\u1615\n\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u161F\n\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x05\u011B\u162A\n\u011B\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x07\u011D\u1635\n\u011D\f\u011D" +
		"\x0E\u011D\u1638\v\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
		"\x05\u011D\u163F\n\u011D\x03\u011E\x03\u011E\x05\u011E\u1643\n\u011E\x03" +
		"\u011F\x03\u011F\x03\u011F\x05\u011F\u1648\n\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u1651\n\u011F" +
		"\x03\u011F\x05\u011F\u1654\n\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x05\u011F" +
		"\u1660\n\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x05\u011F\u1668\n\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x03\u011F\x07\u011F\u1670\n\u011F\f\u011F\x0E\u011F\u1673\v\u011F\x05" +
		"\u011F\u1675\n\u011F\x03\u011F\x03\u011F\x05\u011F\u1679\n\u011F\x03\u011F" +
		"\x03\u011F\x05\u011F\u167D\n\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u1696\n\u0120" +
		"\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u16A1\n\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u16A8\n\u0122\x07\u0122\u16AA\n\u0122\f" +
		"\u0122\x0E\u0122\u16AD\v\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123" +
		"\x05\u0123\u16B3\n\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x05\u0124\u16BB\n\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124" +
		"\u16C0\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x07\u0124\u16C6" +
		"\n\u0124\f\u0124\x0E\u0124\u16C9\v\u0124\x03\u0125\x03\u0125\x03\u0125" +
		"\x05\u0125\u16CE\n\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u16D8\n\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x05\u0125\u16E5\n\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x05\u0125\u16EB\n\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x05\u0125\u16F1\n\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x05\u0125\u1701\n\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x05\u0125\u1707\n\u0125\x07\u0125\u1709\n\u0125\f\u0125\x0E" +
		"\u0125\u170C\v\u0125\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x07\u0126\u171C\n\u0126\f\u0126\x0E\u0126\u171F\v" +
		"\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03" +
		"\u0126\x06\u0126\u1728\n\u0126\r\u0126\x0E\u0126\u1729\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126" +
		"\u173B\n\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x07\u0126\u1748\n\u0126" +
		"\f\u0126\x0E\u0126\u174B\v\u0126\x03\u0127\x03\u0127\x03\u0128\x03\u0128" +
		"\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
		"\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u175D\n\u0128" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x05\u0129\u1766\n\u0129\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A" +
		"\x03\u012A\x03\u012A\x05\u012A\u176F\n\u012A\x03\u012B\x03\u012B\x03\u012C" +
		"\x03\u012C\x03\u012D\x03\u012D\x03\u012E\x03\u012E\x03\u012F\x03\u012F" +
		"\x03\u0130\x03\u0130\x03\u0131\x03\u0131\x03\u0132\x03\u0132\x03\u0132" +
		"\x02\x02\x05\u0246\u0248\u024A\u0133\x02\x02\x04\x02\x06\x02\b\x02\n\x02" +
		"\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02" +
		"\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x02" +
		"8\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02" +
		"T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02" +
		"p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02" +
		"\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02" +
		"\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02" +
		"\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02" +
		"\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02" +
		"\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02" +
		"\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02" +
		"\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104" +
		"\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112" +
		"\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120" +
		"\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E" +
		"\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C" +
		"\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A" +
		"\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158" +
		"\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166" +
		"\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174" +
		"\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182" +
		"\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190" +
		"\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E" +
		"\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC" +
		"\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA" +
		"\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8" +
		"\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6" +
		"\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4" +
		"\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2" +
		"\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200" +
		"\x02\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E" +
		"\x02\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C" +
		"\x02\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A" +
		"\x02\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238" +
		"\x02\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246" +
		"\x02\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254" +
		"\x02\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262" +
		"\x02\x02u\x04\x02%%\x85\x85\x04\x02\u01A5\u01A5\u01AA\u01AA\x05\x02??" +
		"\x8B\x8B\x9F\x9F\x05\x02((\u0126\u0126\u0164\u0164\x06\x02((\u0145\u0145" +
		"\u01A4\u01A4\u01E8\u01E8\x04\x02\u019C\u019C\u03C7\u03C7\x04\x02FF~~\x04" +
		"\x02\x10\x10\xFC\xFC\x05\x02**LL\xA2\xA2\x04\x02\u0152\u0152\u01BC\u01BC" +
		"\x05\x02\u0195\u0195\u020C\u020C\u0212\u0212\x04\x02\u012C\u012C\u0168" +
		"\u0168\x04\x02\u010E\u010E\u0176\u0176\x04\x02\u010C\u010C\u015B\u015B" +
		"\x05\x02GGKKoo\x05\x02((\u0136\u0136\u0150\u0150\x05\x02((\u0132\u0132" +
		"\u026C\u026C\x04\x02\u0202\u0202\u0220\u0220\x04\x02HHRR\x05\x02\u0154" +
		"\u0154\u01B3\u01B3\u01EA\u01EA\x04\x02??\x8B\x8B\x03\x02\u03BD\u03BE\x05" +
		"\x02\u014F\u014F\u0171\u0171\u01A2\u01A2\x04\x02((\u03BD\u03BE\b\x02(" +
		"(\u011C\u011C\u011E\u011E\u0136\u0136\u0150\u0150\u01C9\u01C9\x03\x02" +
		"\u03BE\u03BF\x04\x02\b\b00\x04\x02\x0E\x0E\x99\x99\x04\x02\xAA\xAA\u0223" +
		"\u0223\x04\x02\x15\x15\x80\x80\x05\x02))DD__\x04\x02__\u0120\u0120\x04" +
		"\x02\u0118\u0118\u014C\u014C\x04\x02[[\u01E0\u01E0\x04\x02))__\x04\x02" +
		"\t\t..\x04\x02\xA6\xA6\u021D\u021D\x06\x02\u014F\u014F\u0171\u0171\u01A1" +
		"\u01A1\u01BF\u01BF\x04\x02\u014F\u014F\u01A1\u01A1\x04\x02\x0F\x0F++\x05" +
		"\x02<<FF\xA4\xA4\x04\x02\"\"JJ\x04\x02WW\x83\x83\x04\x02\t\t./\x03\x02" +
		"\u01F7\u01F8\x04\x02\u0157\u0157\u01E6\u01E6\x04\x02\xC0\xC0\u0179\u0179" +
		"\x07\x02``\u017E\u017F\u0181\u0181\u0185\u018D\u01CB\u01CB\x06\x02\u017B" +
		"\u017C\u0180\u0180\u0182\u0183\u01CC\u01CC\x05\x02aa\u017A\u017A\u0184" +
		"\u0184\x04\x02\u016A\u016A\u01F9\u01F9\x04\x02\u01F3\u01F3\u01F5\u01F5" +
		"\x04\x02\u0106\u0106\u01FA\u01FA\x04\x02QQ\u01DA\u01DA\x04\x0200\u012A" +
		"\u012A\x05\x02\x1F\x1F77\x9D\x9D\x05\x02tt\x96\x96\u0155\u0155\x04\x02" +
		"]]\xA0\xA0\x04\x02\u0114\u0114\u01EB\u01EB\x04\x02&&\u021F\u021F\x04\x02" +
		"gg\u0176\u0176\x04\x02\u0148\u0148\u01C5\u01C5\x06\x02\xB2\xB2\xB4\xB4" +
		"\xB7\xB7\u0203\u0203\x04\x02\u0107\u0107\u01CD\u01CD\x04\x02>>GG\b\x02" +
		"tt\x96\x96\x9B\x9B\u0141\u0141\u0155\u0155\u021F\u021F\x04\x02\u019B\u019B" +
		"\u01FF\u01FF\x04\x02\u013E\u013E\u0222\u0222\x04\x02tt\u0155\u0155\x05" +
		"\x02HHSS\u0162\u0162\x04\x02\u01FF\u01FF\u021E\u021E\x04\x02\u0121\u0121" +
		"\u01C4\u01C4\b\x02\xC0\xC0\u013B\u013B\u013D\u013D\u0156\u0156\u01CA\u01CA" +
		"\u01EC\u01EC\x04\x02+,88\x05\x02\u0148\u0148\u01B5\u01B5\u02C4\u02C4\x04" +
		"\x02\u016E\u016E\u020E\u020E\x04\x02\u03CF\u03CF\u03D1\u03D1\x03\x02\u03D2" +
		"\u03D3\x05\x02\u0267\u0271\u03C7\u03C7\u03D0\u03D0\x04\x02\u03BD\u03BF" +
		"\u03C8\u03C8\x04\x0299\x9C\x9C\x04\x02hh\u03CB\u03CB\x04\x02\xBE\xBF\xC6" +
		"\xC9\x03\x02\xAE\xB3\x03\x02\xB4\xB6\x03\x02\xB7\xB8\x06\x02\xB9\xB9\xC2" +
		"\xC5\xCB\xCB\u010A\u010B\x05\x02\xBA\xBD\xC0\xC1\u0108\u0108\x04\x02\x88" +
		"\x88\xCA\xCA\x03\x02\u0276\u027C\x04\x02\xC0\xC0\u019F\u019F\x04\x02\xB9" +
		"\xBA\xBC\xBC\x04\x02\xA1\xA1\u01E9\u01E9\x04\x02\xE9\xEA\xF0\xF0\x04\x02" +
		"##\xE7\xEA\x03\x02\xF3\xF4\x05\x02\x12\x12UU\x9A\x9A\x04\x02\xBE\xBE\xC0" +
		"\xC0\x05\x02\x0F\x0F++\u0330\u0330\x05\x02\xD7\xD7\xDD\xDE\xE3\xE3\x05" +
		"\x02\xD8\xDA\xDF\xE2\xE4\xE6\x04\x02\u01A8\u01A8\u01B6\u01B6\x04\x02f" +
		"f\u03B3\u03B3\x05\x0299\x9C\x9C\u0216\u0216\x04\x02zz\x84\x84\x05\x02" +
		"\t\t\xFF\xFF\u01EF\u01EF\x06\x02ff\u03AB\u03AB\u03AD\u03AD\u03B3\u03B4" +
		"\x03\x02\u03A8\u03AF\x03\x02\u023F\u0266\x03\x02\u0272\u0275\x03\x02\u0236" +
		"\u023E\x03\x02\u022E\u0235\x05\x02\xB9\xBD\xC7\xC7\xCA\xCA!\x02\xCB\xCB" +
		"\xFA\u010C\u010E\u0114\u0116\u012D\u012F\u0138\u013A\u0146\u0148\u0150" +
		"\u0152\u0152\u0154\u0155\u0157\u0159\u015B\u015B\u015D\u015D\u015F\u0165" +
		"\u0167\u016D\u016F\u0198\u019A\u01A0\u01A2\u01AB\u01AD\u01B7\u01B9\u01C9" +
		"\u01CB\u01D8\u01DA\u01EB\u01ED\u01EF\u01F1\u0201\u0203\u020D\u020F\u020F" +
		"\u0211\u0214\u0216\u0216\u0218\u0219\u021C\u021F\u0221\u0228\u026C\u026C" +
		"\v\x02%%WW\x83\x83\xB9\xBB\xBD\xBD\xDB\xDB\xF2\xF2\u022E\u0235\u0276\u039E" +
		"\x02\u1B7E\x02\u026B\x03\x02\x02\x02\x04\u0290\x03\x02\x02\x02\x06\u029C" +
		"\x03\x02\x02\x02\b\u02A7\x03\x02\x02\x02\n\u02B8\x03\x02\x02\x02\f\u02BD" +
		"\x03\x02\x02\x02\x0E\u02C9\x03\x02\x02\x02\x10\u02E4\x03\x02\x02\x02\x12" +
		"\u02EA\x03\x02\x02\x02\x14\u02EC\x03\x02\x02\x02\x16\u02F8\x03\x02\x02" +
		"\x02\x18\u0316\x03\x02\x02\x02\x1A\u0337\x03\x02\x02\x02\x1C\u036A\x03" +
		"\x02\x02\x02\x1E\u0384\x03\x02\x02\x02 \u03A0\x03\x02\x02\x02\"\u0401" +
		"\x03\x02\x02\x02$\u0403\x03\x02\x02\x02&\u0415\x03\x02\x02\x02(\u0452" +
		"\x03\x02\x02\x02*\u0465\x03\x02\x02\x02,\u049D\x03\x02\x02\x02.\u049F" +
		"\x03\x02\x02\x020\u04CB\x03\x02\x02\x022\u04D1\x03\x02\x02\x024\u04D3" +
		"\x03\x02\x02\x026\u04E8\x03\x02\x02\x028\u04EF\x03\x02\x02\x02:\u04F1" +
		"\x03\x02\x02\x02<\u04FF\x03\x02\x02\x02>\u0501\x03\x02\x02\x02@\u0505" +
		"\x03\x02\x02\x02B\u051F\x03\x02\x02\x02D\u052F\x03\x02\x02\x02F\u0531" +
		"\x03\x02\x02\x02H\u0541\x03\x02\x02\x02J\u0543\x03\x02\x02\x02L\u056B" +
		"\x03\x02\x02\x02N\u05AF\x03\x02\x02\x02P\u05B1\x03\x02\x02\x02R\u05CB" +
		"\x03\x02\x02\x02T\u05D3\x03\x02\x02\x02V\u05F1\x03\x02\x02\x02X\u067F" +
		"\x03\x02\x02\x02Z\u0681\x03\x02\x02\x02\\\u0684\x03\x02\x02\x02^\u06CE" +
		"\x03\x02\x02\x02`\u06E5\x03\x02\x02\x02b\u0754\x03\x02\x02\x02d\u0759" +
		"\x03\x02\x02\x02f\u075B\x03\x02\x02\x02h\u0765\x03\x02\x02\x02j\u079A" +
		"\x03\x02\x02\x02l\u07AE\x03\x02\x02\x02n\u07B0\x03\x02\x02\x02p\u07D3" +
		"\x03\x02\x02\x02r\u07DC\x03\x02\x02\x02t\u07E3\x03\x02\x02\x02v\u07FA" +
		"\x03\x02\x02\x02x\u0803\x03\x02\x02\x02z\u0812\x03\x02\x02\x02|\u0826" +
		"\x03\x02\x02\x02~\u083A\x03\x02\x02\x02\x80\u09B4\x03\x02\x02\x02\x82" +
		"\u09B6\x03\x02\x02\x02\x84\u09BD\x03\x02\x02\x02\x86\u09C4\x03\x02\x02" +
		"\x02\x88\u09DA\x03\x02\x02\x02\x8A\u09E2\x03\x02\x02\x02\x8C\u09E9\x03" +
		"\x02\x02\x02\x8E\u09F0\x03\x02\x02\x02\x90\u09F7\x03\x02\x02\x02\x92\u0A03" +
		"\x03\x02\x02\x02\x94\u0A0D\x03\x02\x02\x02\x96\u0A14\x03\x02\x02\x02\x98" +
		"\u0A24\x03\x02\x02\x02\x9A\u0A2E\x03\x02\x02\x02\x9C\u0A32\x03\x02\x02" +
		"\x02\x9E\u0A38\x03\x02\x02\x02\xA0\u0A44\x03\x02\x02\x02\xA2\u0A46\x03" +
		"\x02\x02\x02\xA4";
	private static readonly _serializedATNSegment3: string =
		"\u0A4D\x03\x02\x02\x02\xA6\u0A4F\x03\x02\x02\x02\xA8\u0A81\x03\x02\x02" +
		"\x02\xAA\u0ACB\x03\x02\x02\x02\xAC\u0B06\x03\x02\x02\x02\xAE\u0B5E\x03" +
		"\x02\x02\x02\xB0\u0B62\x03\x02\x02\x02\xB2\u0B73\x03\x02\x02\x02\xB4\u0B75" +
		"\x03\x02\x02\x02\xB6\u0B7D\x03\x02\x02\x02\xB8\u0B85\x03\x02\x02\x02\xBA" +
		"\u0B87\x03\x02\x02\x02\xBC\u0BA5\x03\x02\x02\x02\xBE\u0BDC\x03\x02\x02" +
		"\x02\xC0\u0BE5\x03\x02\x02\x02\xC2\u0BF9\x03\x02\x02\x02\xC4\u0C05\x03" +
		"\x02\x02\x02\xC6\u0C09\x03\x02\x02\x02\xC8\u0C2A\x03\x02\x02\x02\xCA\u0C3F" +
		"\x03\x02\x02\x02\xCC\u0C49\x03\x02\x02\x02\xCE\u0C4D\x03\x02\x02\x02\xD0" +
		"\u0C66\x03\x02\x02\x02\xD2\u0C90\x03\x02\x02\x02\xD4\u0C92\x03\x02\x02" +
		"\x02\xD6\u0CA1\x03\x02\x02\x02\xD8\u0CCF\x03\x02\x02\x02\xDA\u0CD9\x03" +
		"\x02\x02\x02\xDC\u0CE3\x03\x02\x02\x02\xDE\u0D0D\x03\x02\x02\x02\xE0\u0D0F" +
		"\x03\x02\x02\x02\xE2\u0D20\x03\x02\x02\x02\xE4\u0D26\x03\x02\x02\x02\xE6" +
		"\u0D36\x03\x02\x02\x02\xE8\u0D3A\x03\x02\x02\x02\xEA\u0D60\x03\x02\x02" +
		"\x02\xEC\u0D86\x03\x02\x02\x02\xEE\u0D94\x03\x02\x02\x02\xF0\u0D9C\x03" +
		"\x02\x02\x02\xF2\u0D9E\x03\x02\x02\x02\xF4\u0DB8\x03\x02\x02\x02\xF6\u0DBC" +
		"\x03\x02\x02\x02\xF8\u0DC9\x03\x02\x02\x02\xFA\u0DD5\x03\x02\x02\x02\xFC" +
		"\u0DD9\x03\x02\x02\x02\xFE\u0DEA\x03\x02\x02\x02\u0100\u0DFB\x03\x02\x02" +
		"\x02\u0102\u0DFE\x03\x02\x02\x02\u0104\u0E08\x03\x02\x02\x02\u0106\u0E0C" +
		"\x03\x02\x02\x02\u0108\u0E16\x03\x02\x02\x02\u010A\u0E19\x03\x02\x02\x02" +
		"\u010C\u0E1E\x03\x02\x02\x02\u010E\u0E32\x03\x02\x02\x02\u0110\u0E34\x03" +
		"\x02\x02\x02\u0112\u0E45\x03\x02\x02\x02\u0114\u0E4E\x03\x02\x02\x02\u0116" +
		"\u0E57\x03\x02\x02\x02\u0118\u0E59\x03\x02\x02\x02\u011A\u0E67\x03\x02" +
		"\x02\x02\u011C\u0E72\x03\x02\x02\x02\u011E\u0E7B\x03\x02\x02\x02\u0120" +
		"\u0E7E\x03\x02\x02\x02\u0122\u0E86\x03\x02\x02\x02\u0124\u0E9F\x03\x02" +
		"\x02\x02\u0126\u0EAB\x03\x02\x02\x02\u0128\u0EAE\x03\x02\x02\x02\u012A" +
		"\u0ECE\x03\x02\x02\x02\u012C\u0ED0\x03\x02\x02\x02\u012E\u0ED2\x03\x02" +
		"\x02\x02\u0130\u0ED4\x03\x02\x02\x02\u0132\u0ED6\x03\x02\x02\x02\u0134" +
		"\u0F0B\x03\x02\x02\x02\u0136\u0F0D\x03\x02\x02\x02\u0138\u0F13\x03\x02" +
		"\x02\x02\u013A\u0F27\x03\x02\x02\x02\u013C\u0F35\x03\x02\x02\x02\u013E" +
		"\u0F40\x03\x02\x02\x02\u0140\u0F42\x03\x02\x02\x02\u0142\u0F48\x03\x02" +
		"\x02\x02\u0144\u0F52\x03\x02\x02\x02\u0146\u0F56\x03\x02\x02\x02\u0148" +
		"\u0F5D\x03\x02\x02\x02\u014A\u0F61\x03\x02\x02\x02\u014C\u0F67\x03\x02" +
		"\x02\x02\u014E\u0F6E\x03\x02\x02\x02\u0150\u0F74\x03\x02\x02\x02\u0152" +
		"\u0F7A\x03\x02\x02\x02\u0154\u0F7F\x03\x02\x02\x02\u0156\u0FA5\x03\x02" +
		"\x02\x02\u0158\u0FBA\x03\x02\x02\x02\u015A\u0FD3\x03\x02\x02\x02\u015C" +
		"\u0FD6\x03\x02\x02\x02\u015E\u0FDC\x03\x02\x02\x02\u0160\u0FEC\x03\x02" +
		"\x02\x02\u0162\u0FFB\x03\x02\x02\x02\u0164\u1001\x03\x02\x02\x02\u0166" +
		"\u101F\x03\x02\x02\x02\u0168\u1021\x03\x02\x02\x02\u016A\u1028\x03\x02" +
		"\x02\x02\u016C\u1034\x03\x02\x02\x02\u016E\u103A\x03\x02\x02\x02\u0170" +
		"\u1053\x03\x02\x02\x02\u0172\u1057\x03\x02\x02\x02\u0174\u1059\x03\x02" +
		"\x02\x02\u0176\u1064\x03\x02\x02\x02\u0178\u10A2\x03\x02\x02\x02\u017A" +
		"\u10DA\x03\x02\x02\x02\u017C\u10DC\x03\x02\x02\x02\u017E\u10E9\x03\x02" +
		"\x02\x02\u0180\u111B\x03\x02\x02\x02\u0182\u112D\x03\x02\x02\x02\u0184" +
		"\u115F\x03\x02\x02\x02\u0186\u1161\x03\x02\x02\x02\u0188\u116E\x03\x02" +
		"\x02\x02\u018A\u1179\x03\x02\x02\x02\u018C\u1194\x03\x02\x02\x02\u018E" +
		"\u119E\x03\x02\x02\x02\u0190\u11A8\x03\x02\x02\x02\u0192\u11AA\x03\x02" +
		"\x02\x02\u0194\u11B4\x03\x02\x02\x02\u0196\u11B7\x03\x02\x02\x02\u0198" +
		"\u11E8\x03\x02\x02\x02\u019A\u11F7\x03\x02\x02\x02\u019C\u11F9\x03\x02" +
		"\x02\x02\u019E\u11FD\x03\x02\x02\x02\u01A0\u1204\x03\x02\x02\x02\u01A2" +
		"\u120D\x03\x02\x02\x02\u01A4\u1213\x03\x02\x02\x02\u01A6\u121A\x03\x02" +
		"\x02\x02\u01A8\u1230\x03\x02\x02\x02\u01AA\u1232\x03\x02\x02\x02\u01AC" +
		"\u123D\x03\x02\x02\x02\u01AE\u1243\x03\x02\x02\x02\u01B0\u126C\x03\x02" +
		"\x02\x02\u01B2\u1305\x03\x02\x02\x02\u01B4\u1311\x03\x02\x02\x02\u01B6" +
		"\u1320\x03\x02\x02\x02\u01B8\u1326\x03\x02\x02\x02\u01BA\u1339\x03\x02" +
		"\x02\x02\u01BC\u1343\x03\x02\x02\x02\u01BE\u1351\x03\x02\x02\x02\u01C0" +
		"\u1353\x03\x02\x02\x02\u01C2\u1356\x03\x02\x02\x02\u01C4\u136C\x03\x02" +
		"\x02\x02\u01C6\u1378\x03\x02\x02\x02\u01C8\u1381\x03\x02\x02\x02\u01CA" +
		"\u138D\x03\x02\x02\x02\u01CC\u1391\x03\x02\x02\x02\u01CE\u1393\x03\x02" +
		"\x02\x02\u01D0\u13BB\x03\x02\x02\x02\u01D2\u13C2\x03\x02\x02\x02\u01D4" +
		"\u13C4\x03\x02\x02\x02\u01D6\u13DB\x03\x02\x02\x02\u01D8\u13E1\x03\x02" +
		"\x02\x02\u01DA\u13E9\x03\x02\x02\x02\u01DC\u13EC\x03\x02\x02\x02\u01DE" +
		"\u13F9\x03\x02\x02\x02\u01E0\u13FB\x03\x02\x02\x02\u01E2\u1401\x03\x02" +
		"\x02\x02\u01E4\u1403\x03\x02\x02\x02\u01E6\u140A\x03\x02\x02\x02\u01E8" +
		"\u1414\x03\x02\x02\x02\u01EA\u1416\x03\x02\x02\x02\u01EC\u141C\x03\x02" +
		"\x02\x02\u01EE\u1420\x03\x02\x02\x02\u01F0\u1422\x03\x02\x02\x02\u01F2" +
		"\u1424\x03\x02\x02\x02\u01F4\u1436\x03\x02\x02\x02\u01F6\u1446\x03\x02" +
		"\x02\x02\u01F8\u144A\x03\x02\x02\x02\u01FA\u144F\x03\x02\x02\x02\u01FC" +
		"\u145A\x03\x02\x02\x02\u01FE\u145F\x03\x02\x02\x02\u0200\u1461\x03\x02" +
		"\x02\x02\u0202\u1465\x03\x02\x02\x02\u0204\u147E\x03\x02\x02\x02\u0206" +
		"\u1480\x03\x02\x02\x02\u0208\u1483\x03\x02\x02\x02\u020A\u1488\x03\x02" +
		"\x02\x02\u020C\u1498\x03\x02\x02\x02\u020E\u14E5\x03\x02\x02\x02\u0210" +
		"\u14FD\x03\x02\x02\x02\u0212\u14FF\x03\x02\x02\x02\u0214\u1503\x03\x02" +
		"\x02\x02\u0216\u1509\x03\x02\x02\x02\u0218\u1511\x03\x02\x02\x02\u021A" +
		"\u1519\x03\x02\x02\x02\u021C\u1521\x03\x02\x02\x02\u021E\u152C\x03\x02" +
		"\x02\x02\u0220\u1534\x03\x02\x02\x02\u0222\u153C\x03\x02\x02\x02\u0224" +
		"\u1544\x03\x02\x02\x02\u0226\u154C\x03\x02\x02\x02\u0228\u155C\x03\x02" +
		"\x02\x02\u022A\u156C\x03\x02\x02\x02\u022C\u1570\x03\x02\x02\x02\u022E" +
		"\u1572\x03\x02\x02\x02\u0230\u1575\x03\x02\x02\x02\u0232\u158A\x03\x02" +
		"\x02\x02\u0234\u1629\x03\x02\x02\x02\u0236\u162B\x03\x02\x02\x02\u0238" +
		"\u163E\x03\x02\x02\x02\u023A\u1640\x03\x02\x02\x02\u023C\u167C\x03\x02" +
		"\x02\x02\u023E\u1695\x03\x02\x02\x02\u0240\u1697\x03\x02\x02\x02\u0242" +
		"\u16A0\x03\x02\x02\x02\u0244\u16B2\x03\x02\x02\x02\u0246\u16BF\x03\x02" +
		"\x02\x02\u0248\u16CA\x03\x02\x02\x02\u024A\u173A\x03\x02\x02\x02\u024C" +
		"\u174C\x03\x02\x02\x02\u024E\u175C\x03\x02\x02\x02\u0250\u1765\x03\x02" +
		"\x02\x02\u0252\u176E\x03\x02\x02\x02\u0254\u1770\x03\x02\x02\x02\u0256" +
		"\u1772\x03\x02\x02\x02\u0258\u1774\x03\x02\x02\x02\u025A\u1776\x03\x02" +
		"\x02\x02\u025C\u1778\x03\x02\x02\x02\u025E\u177A\x03\x02\x02\x02\u0260" +
		"\u177C\x03\x02\x02\x02\u0262\u177E\x03\x02\x02\x02\u0264\u026C\x05\x04" +
		"\x03\x02\u0265\u026C\x05\x06\x04\x02\u0266\u026C\x05\b\x05\x02\u0267\u026C" +
		"\x05\n\x06\x02\u0268\u026C\x05\f\x07\x02\u0269\u026C\x05\x10\t\x02\u026A" +
		"\u026C\x05\x12\n\x02\u026B\u0264\x03\x02\x02\x02\u026B\u0265\x03\x02\x02" +
		"\x02\u026B\u0266\x03\x02\x02\x02\u026B\u0267\x03\x02\x02\x02\u026B\u0268" +
		"\x03\x02\x02\x02\u026B\u0269\x03\x02\x02\x02\u026B\u026A\x03\x02\x02\x02" +
		"\u026C\x03\x03\x02\x02\x02\u026D\u0291\x05\x14\v\x02\u026E\u0291\x05\x16" +
		"\f\x02\u026F\u0291\x05\x18\r\x02\u0270\u0291\x05\x1A\x0E\x02\u0271\u0291" +
		"\x05\x1C\x0F\x02\u0272\u0291\x05\x1E\x10\x02\u0273\u0291\x05 \x11\x02" +
		"\u0274\u0291\x05\"\x12\x02\u0275\u0291\x05$\x13\x02\u0276\u0291\x05&\x14" +
		"\x02\u0277\u0291\x05(\x15\x02\u0278\u0291\x05*\x16\x02\u0279\u0291\x05" +
		"l7\x02\u027A\u0291\x05n8\x02\u027B\u0291\x05p9\x02\u027C\u0291\x05r:\x02" +
		"\u027D\u0291\x05t;\x02\u027E\u0291\x05v<\x02\u027F\u0291\x05x=\x02\u0280" +
		"\u0291\x05z>\x02\u0281\u0291\x05|?\x02\u0282\u0291\x05~@\x02\u0283\u0291" +
		"\x05\x82B\x02\u0284\u0291\x05\x84C\x02\u0285\u0291\x05\x86D\x02\u0286" +
		"\u0291\x05\x88E\x02\u0287\u0291\x05\x8AF\x02\u0288\u0291\x05\x8CG\x02" +
		"\u0289\u0291\x05\x8EH\x02\u028A\u0291\x05\x90I\x02\u028B\u0291\x05\x92" +
		"J\x02\u028C\u0291\x05\x94K\x02\u028D\u0291\x05\x96L\x02\u028E\u0291\x05" +
		"\x98M\x02\u028F\u0291\x05\x9CO\x02\u0290\u026D\x03\x02\x02\x02\u0290\u026E" +
		"\x03\x02\x02\x02\u0290\u026F\x03\x02\x02\x02\u0290\u0270\x03\x02\x02\x02" +
		"\u0290\u0271\x03\x02\x02\x02\u0290\u0272\x03\x02\x02\x02\u0290\u0273\x03" +
		"\x02\x02\x02\u0290\u0274\x03\x02\x02\x02\u0290\u0275\x03\x02\x02\x02\u0290" +
		"\u0276\x03\x02\x02\x02\u0290\u0277\x03\x02\x02\x02\u0290\u0278\x03\x02" +
		"\x02\x02\u0290\u0279\x03\x02\x02\x02\u0290\u027A\x03\x02\x02\x02\u0290" +
		"\u027B\x03\x02\x02\x02\u0290\u027C\x03\x02\x02\x02\u0290\u027D\x03\x02" +
		"\x02\x02\u0290\u027E\x03\x02\x02\x02\u0290\u027F\x03\x02\x02\x02\u0290" +
		"\u0280\x03\x02\x02\x02\u0290\u0281\x03\x02\x02\x02\u0290\u0282\x03\x02" +
		"\x02\x02\u0290\u0283\x03\x02\x02\x02\u0290\u0284\x03\x02\x02\x02\u0290" +
		"\u0285\x03\x02\x02\x02\u0290\u0286\x03\x02\x02\x02\u0290\u0287\x03\x02" +
		"\x02\x02\u0290\u0288\x03\x02\x02\x02\u0290\u0289\x03\x02\x02\x02\u0290" +
		"\u028A\x03\x02\x02\x02\u0290\u028B\x03\x02\x02\x02\u0290\u028C\x03\x02" +
		"\x02\x02\u0290\u028D\x03\x02\x02\x02\u0290\u028E\x03\x02\x02\x02\u0290" +
		"\u028F\x03\x02\x02\x02\u0291\x05\x03\x02\x02\x02\u0292\u029D\x05\xAEX" +
		"\x02\u0293\u029D\x05\xA6T\x02\u0294\u029D\x05\xB0Y\x02\u0295\u029D\x05" +
		"\xA0Q\x02\u0296\u029D\x05\xACW\x02\u0297\u029D\x05\x9EP\x02\u0298\u029D" +
		"\x05\xA8U\x02\u0299\u029D\x05\xAAV\x02\u029A\u029D\x05\xA2R\x02\u029B" +
		"\u029D\x05\xA4S\x02\u029C\u0292\x03\x02\x02\x02\u029C\u0293\x03\x02\x02" +
		"\x02\u029C\u0294\x03\x02\x02\x02\u029C\u0295\x03\x02\x02\x02\u029C\u0296" +
		"\x03\x02\x02\x02\u029C\u0297\x03\x02\x02\x02\u029C\u0298\x03\x02\x02\x02" +
		"\u029C\u0299\x03\x02\x02\x02\u029C\u029A\x03\x02\x02\x02\u029C\u029B\x03" +
		"\x02\x02\x02\u029D\x07\x03\x02\x02\x02\u029E\u02A8\x05\xF8}\x02\u029F" +
		"\u02A8\x05\xFA~\x02\u02A0\u02A8\x05\xFC\x7F\x02\u02A1\u02A8\x05\xFE\x80" +
		"\x02\u02A2\u02A8\x05\u0100\x81\x02\u02A3\u02A8\x05\u0102\x82\x02\u02A4" +
		"\u02A8\x05\u0104\x83\x02\u02A5\u02A8\x05\u0106\x84\x02\u02A6\u02A8\x05" +
		"\u0108\x85\x02\u02A7\u029E\x03\x02\x02\x02\u02A7\u029F\x03\x02\x02\x02" +
		"\u02A7\u02A0\x03\x02\x02\x02\u02A7\u02A1\x03\x02\x02\x02\u02A7\u02A2\x03" +
		"\x02\x02\x02\u02A7\u02A3\x03\x02\x02\x02\u02A7\u02A4\x03\x02\x02\x02\u02A7" +
		"\u02A5\x03\x02\x02\x02\u02A7\u02A6\x03\x02\x02\x02\u02A8\t\x03\x02\x02" +
		"\x02\u02A9\u02B9\x05\u0118\x8D\x02\u02AA\u02B9\x05\u011A\x8E\x02\u02AB" +
		"\u02B9\x05\u011C\x8F\x02\u02AC\u02B9\x05\u011E\x90\x02\u02AD\u02B9\x05" +
		"\u0120\x91\x02\u02AE\u02B9\x05\u0122\x92\x02\u02AF\u02B9\x05\u0124\x93" +
		"\x02\u02B0\u02B9\x05\u0126\x94\x02\u02B1\u02B9\x05\u0128\x95\x02\u02B2" +
		"\u02B9\x05\u0140\xA1\x02\u02B3\u02B9\x05\u0142\xA2\x02\u02B4\u02B9\x05" +
		"\u0144\xA3\x02\u02B5\u02B9\x05\u0146\xA4\x02\u02B6\u02B9\x05\u0148\xA5" +
		"\x02\u02B7\u02B9\x05\u014A\xA6\x02\u02B8\u02A9\x03\x02\x02\x02\u02B8\u02AA" +
		"\x03\x02\x02\x02\u02B8\u02AB\x03\x02\x02\x02\u02B8\u02AC\x03\x02\x02\x02" +
		"\u02B8\u02AD\x03\x02\x02\x02\u02B8\u02AE\x03\x02\x02\x02\u02B8\u02AF\x03" +
		"\x02\x02\x02\u02B8\u02B0\x03\x02\x02\x02\u02B8\u02B1\x03\x02\x02\x02\u02B8" +
		"\u02B2\x03\x02\x02\x02\u02B8\u02B3\x03\x02\x02\x02\u02B8\u02B4\x03\x02" +
		"\x02\x02\u02B8\u02B5\x03\x02\x02\x02\u02B8\u02B6\x03\x02\x02\x02\u02B8" +
		"\u02B7\x03\x02\x02\x02\u02B9\v\x03\x02\x02\x02\u02BA\u02BE\x05\u014C\xA7" +
		"\x02\u02BB\u02BE\x05\u014E\xA8\x02\u02BC\u02BE\x05\u0150\xA9\x02\u02BD" +
		"\u02BA\x03\x02\x02\x02\u02BD\u02BB\x03\x02\x02\x02\u02BD\u02BC\x03\x02" +
		"\x02\x02\u02BE\r\x03\x02\x02\x02\u02BF\u02CA\x05\u0154\xAB\x02\u02C0\u02CA" +
		"\x05\u0156\xAC\x02\u02C1\u02CA\x05\u0158\xAD\x02\u02C2\u02CA\x05\u015C" +
		"\xAF\x02\u02C3\u02CA\x05\u015E\xB0\x02\u02C4\u02CA\x05\u0160\xB1\x02\u02C5" +
		"\u02CA\x05\u0164\xB3\x02\u02C6\u02CA\x05\u015A\xAE\x02\u02C7\u02CA\x05" +
		"\u0162\xB2\x02\u02C8\u02CA\x05\u0166\xB4\x02\u02C9\u02BF\x03\x02\x02\x02" +
		"\u02C9\u02C0\x03\x02\x02\x02\u02C9\u02C1\x03\x02\x02\x02\u02C9\u02C2\x03" +
		"\x02\x02\x02\u02C9\u02C3\x03\x02\x02\x02\u02C9\u02C4\x03\x02\x02\x02\u02C9" +
		"\u02C5\x03\x02\x02\x02\u02C9\u02C6\x03\x02\x02\x02\u02C9\u02C7\x03\x02" +
		"\x02\x02\u02C9\u02C8\x03\x02\x02\x02\u02CA\x0F\x03\x02\x02\x02\u02CB\u02E5" +
		"\x05\u0178\xBD\x02\u02CC\u02E5\x05\u017A\xBE\x02\u02CD\u02E5\x05\u017C" +
		"\xBF\x02\u02CE\u02E5\x05\u017E\xC0\x02\u02CF\u02E5\x05\u0180\xC1\x02\u02D0" +
		"\u02E5\x05\u0182\xC2\x02\u02D1\u02E5\x05\u0184\xC3\x02\u02D2\u02E5\x05" +
		"\u0186\xC4\x02\u02D3\u02E5\x05\u019E\xD0\x02\u02D4\u02E5\x05\u01A0\xD1" +
		"\x02\u02D5\u02E5\x05\u01A2\xD2\x02\u02D6\u02E5\x05\u01A4\xD3\x02\u02D7" +
		"\u02E5\x05\u01A6\xD4\x02\u02D8\u02E5\x05\u01AA\xD6\x02\u02D9\u02E5\x05" +
		"\u01AC\xD7\x02\u02DA\u02E5\x05\u01AE\xD8\x02\u02DB\u02E5\x05\u01B0\xD9" +
		"\x02\u02DC\u02E5\x05\u01B2\xDA\x02\u02DD\u02E5\x05\u01C0\xE1\x02\u02DE" +
		"\u02E5\x05\u01C2\xE2\x02\u02DF\u02E5\x05\u01C4\xE3\x02\u02E0\u02E5\x05" +
		"\u01C6\xE4\x02\u02E1\u02E5\x05\u01C8\xE5\x02\u02E2\u02E5\x05\u01CA\xE6" +
		"\x02\u02E3\u02E5\x05\u01CC\xE7\x02\u02E4\u02CB\x03\x02\x02\x02\u02E4\u02CC" +
		"\x03\x02\x02\x02\u02E4\u02CD\x03\x02\x02\x02\u02E4\u02CE\x03\x02\x02\x02" +
		"\u02E4\u02CF\x03\x02\x02\x02\u02E4\u02D0\x03\x02\x02\x02\u02E4\u02D1\x03" +
		"\x02\x02\x02\u02E4\u02D2\x03\x02\x02\x02\u02E4\u02D3\x03\x02\x02\x02\u02E4" +
		"\u02D4\x03\x02\x02\x02\u02E4\u02D5\x03\x02\x02\x02\u02E4\u02D6\x03\x02" +
		"\x02\x02\u02E4\u02D7\x03\x02\x02\x02\u02E4\u02D8\x03\x02\x02\x02\u02E4" +
		"\u02D9\x03\x02\x02\x02\u02E4\u02DA\x03\x02\x02\x02\u02E4\u02DB\x03\x02" +
		"\x02\x02\u02E4\u02DC\x03\x02\x02\x02\u02E4\u02DD\x03\x02\x02\x02\u02E4" +
		"\u02DE\x03\x02\x02\x02\u02E4\u02DF\x03\x02\x02\x02\u02E4\u02E0\x03\x02" +
		"\x02\x02\u02E4\u02E1\x03\x02\x02\x02\u02E4\u02E2\x03\x02\x02\x02\u02E4" +
		"\u02E3\x03\x02\x02\x02\u02E5\x11\x03\x02\x02\x02\u02E6\u02EB\x05\u01D6" +
		"\xEC\x02\u02E7\u02EB\x05\u01D8\xED\x02\u02E8\u02EB\x05\u01DA\xEE\x02\u02E9" +
		"\u02EB\x05\u01DC\xEF\x02\u02EA\u02E6\x03\x02\x02\x02\u02EA\u02E7\x03\x02" +
		"\x02\x02\u02EA\u02E8\x03\x02\x02\x02\u02EA\u02E9\x03\x02\x02\x02\u02EB" +
		"\x13\x03\x02\x02\x02\u02EC\u02ED\x07!\x02\x02\u02ED\u02EF\t\x02\x02\x02" +
		"\u02EE\u02F0\x05\u0230\u0119\x02\u02EF\u02EE\x03\x02\x02\x02\u02EF\u02F0" +
		"\x03\x02\x02\x02\u02F0\u02F1\x03\x02\x02\x02\u02F1\u02F5\x05\u01FA\xFE" +
		"\x02\u02F2\u02F4\x05,\x17\x02\u02F3\u02F2\x03\x02\x02\x02\u02F4\u02F7" +
		"\x03\x02\x02\x02\u02F5\u02F3\x03\x02\x02\x02\u02F5\u02F6\x03\x02\x02\x02" +
		"\u02F6\x15\x03\x02\x02\x02\u02F7\u02F5\x03\x02\x02\x02\u02F8\u02FA\x07" +
		"!\x02\x02\u02F9\u02FB\x05.\x18\x02\u02FA\u02F9\x03\x02\x02\x02\u02FA\u02FB" +
		"\x03\x02\x02\x02\u02FB\u02FC\x03\x02\x02\x02\u02FC\u02FE\x07\u0141\x02" +
		"\x02\u02FD\u02FF\x05\u0230\u0119\x02\u02FE\u02FD\x03\x02\x02\x02\u02FE" +
		"\u02FF\x03\x02\x02\x02\u02FF\u0300\x03\x02\x02\x02\u0300\u0301\x05\u01E0" +
		"\xF1\x02\u0301\u0302\x07i\x02\x02\u0302\u0303\x07\u01E3\x02\x02\u0303" +
		"\u030A\x050\x19\x02\u0304\u0305\x07i\x02\x02\u0305\u0307\x07\u011D\x02" +
		"\x02\u0306\u0308\x07f\x02\x02\u0307\u0306\x03\x02\x02\x02\u0307\u0308" +
		"\x03\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u030B\x07\u01BE\x02" +
		"\x02\u030A\u0304\x03\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u030D" +
		"\x03\x02\x02\x02\u030C\u030E\x058\x1D\x02\u030D\u030C\x03\x02\x02\x02" +
		"\u030D\u030E\x03\x02\x02\x02\u030E\u0311\x03\x02\x02\x02\u030F\u0310\x07" +
		"\u011A\x02\x02\u0310\u0312\x07\u03C7\x02\x02\u0311\u030F\x03\x02\x02\x02" +
		"\u0311\u0312\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u0314\x07" +
		"\u0133\x02\x02\u0314\u0315\x05\u0152\xAA\x02\u0315\x17\x03\x02\x02\x02" +
		"\u0316\u0318\x07!\x02\x02\u0317\u0319\t\x03\x02\x02\u0318\u0317\x03\x02" +
		"\x02\x02\u0318\u0319\x03\x02\x02\x02\u0319\u031B\x03\x02\x02\x02\u031A" +
		"\u031C\t\x04\x02\x02\u031B\u031A\x03\x02\x02\x02\u031B\u031C\x03\x02\x02" +
		"\x02\u031C\u031D\x03\x02\x02\x02\u031D\u031E\x07H\x02\x02\u031E\u0320" +
		"\x05\u01FA\xFE\x02\u031F\u0321\x05:\x1E\x02\u0320\u031F\x03\x02\x02\x02" +
		"\u0320\u0321\x03\x02\x02\x02\u0321\u0322\x03\x02\x02\x02\u0322\u0323\x07" +
		"i\x02\x02\u0323\u0324\x05\u01E2\xF2\x02\u0324\u0328\x05\u021C\u010F\x02" +
		"\u0325\u0327\x05<\x1F\x02\u0326\u0325\x03\x02\x02\x02\u0327\u032A\x03" +
		"\x02\x02\x02\u0328\u0326\x03\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329" +
		"\u0335\x03\x02\x02\x02\u032A\u0328\x03\x02\x02\x02\u032B\u032D\x07\xFE" +
		"\x02\x02\u032C\u032E\x07\u03B0\x02\x02\u032D\u032C\x03\x02\x02\x02\u032D" +
		"\u032E\x03\x02\x02\x02\u032E\u032F\x03\x02\x02\x02\u032F\u0336\t\x05\x02" +
		"\x02\u0330\u0332\x07]\x02\x02\u0331\u0333\x07\u03B0\x02\x02\u0332\u0331" +
		"\x03\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333\u0334\x03\x02\x02\x02" +
		"\u0334\u0336\t\x06\x02\x02\u0335\u032B\x03\x02\x02\x02\u0335\u0330\x03" +
		"\x02\x02\x02\u0335\u0336\x03\x02\x02\x02\u0336\x19\x03\x02\x02\x02\u0337" +
		"\u0338\x07!\x02\x02\u0338\u0339\x07\u0177\x02\x02\u0339\u033A\x07B\x02" +
		"\x02\u033A\u033B\x05\u01FA\xFE\x02\u033B\u033C\x07\b\x02\x02\u033C\u033D" +
		"\x07\u0213\x02\x02\u033D\u0343\x07\u03C7\x02\x02\u033E\u0340\x07\u0163" +
		"\x02\x02\u033F\u0341\x07\u03B0\x02\x02\u0340\u033F\x03\x02\x02\x02\u0340" +
		"\u0341\x03\x02\x02\x02\u0341\u0342\x03\x02\x02\x02\u0342\u0344\x05\u0202" +
		"\u0102\x02\u0343\u033E\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344" +
		"\u034A\x03\x02\x02\x02\u0345\u0347\x07\u0214\x02\x02\u0346\u0348\x07\u03B0" +
		"\x02\x02\u0347\u0346\x03\x02\x02\x02\u0347\u0348\x03\x02\x02\x02\u0348" +
		"\u0349\x03\x02\x02\x02\u0349\u034B\x05\u0202\u0102\x02\u034A\u0345\x03" +
		"\x02\x02\x02\u034A\u034B\x03\x02\x02\x02\u034B\u0351\x03\x02\x02\x02\u034C" +
		"\u034E\x07\u01C8\x02\x02\u034D\u034F\x07\u03B0\x02\x02\u034E\u034D\x03" +
		"\x02\x02\x02\u034E\u034F\x03\x02\x02\x02\u034F\u0350\x03\x02\x02\x02\u0350" +
		"\u0352\x05\u0202\u0102\x02\u0351\u034C\x03\x02\x02\x02\u0351\u0352\x03" +
		"\x02\x02\x02\u0352\u0358\x03\x02\x02\x02\u0353\u0355\x07\u01A3\x02\x02" +
		"\u0354\u0356\x07\u03B0\x02\x02\u0355\u0354\x03\x02\x02\x02\u0355\u0356" +
		"\x03\x02\x02\x02\u0356\u0357\x03\x02\x02\x02\u0357\u0359\x05\u01FA\xFE" +
		"\x02\u0358\u0353\x03\x02\x02\x02\u0358\u0359\x03\x02\x02\x02\u0359\u035B" +
		"\x03\x02\x02\x02\u035A\u035C\x07\u0221\x02\x02\u035B\u035A\x03\x02\x02" +
		"\x02\u035B\u035C\x03\x02\x02\x02\u035C\u0362\x03\x02\x02\x02\u035D\u035F" +
		"\x07\u011A\x02\x02\u035E\u0360\x07\u03B0\x02\x02\u035F\u035E\x03\x02\x02" +
		"\x02\u035F\u0360\x03\x02\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u0363" +
		"\x07\u03C7\x02\x02\u0362\u035D\x03\x02\x02\x02\u0362\u0363\x03\x02\x02" +
		"\x02\u0363\u0364\x03\x02\x02\x02\u0364\u0366\x07\u013B\x02\x02\u0365\u0367" +
		"\x07\u03B0\x02\x02\u0366\u0365\x03\x02\x02\x02\u0366\u0367\x03\x02\x02" +
		"\x02\u0367\u0368\x03\x02\x02\x02\u0368\u0369\x05\u01F0\xF9\x02\u0369\x1B" +
		"\x03\x02\x02\x02\u036A\u036C\x07!\x02\x02\u036B\u036D\x05.\x18\x02\u036C" +
		"\u036B\x03\x02\x02\x02\u036C\u036D\x03\x02\x02\x02\u036D\u036E\x03\x02" +
		"\x02\x02\u036E\u036F\x07t\x02\x02\u036F\u0370\x05\u01E0\xF1\x02\u0370" +
		"\u0372\x07\u03B9\x02\x02\u0371\u0373\x05> \x02\u0372\u0371\x03\x02\x02" +
		"\x02\u0372\u0373\x03\x02\x02\x02\u0373\u0378\x03\x02\x02\x02\u0374\u0375" +
		"\x07\u03BB\x02\x02\u0375\u0377\x05> \x02\u0376\u0374\x03\x02\x02\x02\u0377" +
		"\u037A\x03\x02\x02\x02\u0378\u0376\x03\x02\x02\x02\u0378\u0379\x03\x02" +
		"\x02\x02\u0379\u037B\x03\x02\x02\x02\u037A\u0378\x03\x02\x02\x02\u037B" +
		"\u037F\x07\u03BA\x02\x02\u037C\u037E\x05B\"\x02\u037D\u037C\x03\x02\x02" +
		"\x02\u037E\u0381\x03\x02\x02\x02\u037F\u037D\x03\x02\x02\x02\u037F\u0380" +
		"\x03\x02\x02\x02\u0380\u0382\x03\x02\x02\x02\u0381\u037F\x03\x02\x02\x02" +
		"\u0382\u0383\x05\u0152\xAA\x02\u0383\x1D\x03\x02\x02\x02\u0384\u0386\x07" +
		"!\x02\x02\u0385\u0387\x05.\x18\x02\u0386\u0385\x03\x02\x02\x02\u0386\u0387" +
		"\x03\x02\x02\x02\u0387\u0388\x03\x02\x02\x02\u0388\u0389\x07\u0155\x02" +
		"\x02\u0389\u038A\x05\u01E0\xF1\x02\u038A\u038C\x07\u03B9\x02\x02\u038B" +
		"\u038D\x05@!\x02\u038C\u038B\x03\x02\x02\x02\u038C\u038D\x03\x02\x02\x02" +
		"\u038D\u0392\x03\x02\x02\x02\u038E\u038F\x07\u03BB\x02\x02\u038F\u0391" +
		"\x05@!\x02\u0390\u038E\x03\x02\x02\x02\u0391\u0394\x03\x02\x02\x02\u0392" +
		"\u0390\x03\x02\x02\x02\u0392\u0393\x03\x02\x02\x02\u0393\u0395\x03\x02" +
		"\x02\x02\u0394\u0392\x03\x02\x02\x02\u0395\u0396\x07\u03BA\x02\x02\u0396" +
		"\u0397\x07\u01DB\x02\x02\u0397\u039B\x05\u020E\u0108\x02\u0398\u039A\x05" +
		"B\"\x02\u0399\u0398\x03\x02\x02\x02\u039A\u039D\x03\x02\x02\x02\u039B" +
		"\u0399\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C\u039E\x03\x02" +
		"\x02\x02\u039D\u039B\x03\x02\x02\x02\u039E\u039F\x05\u0152\xAA\x02\u039F" +
		"\x1F\x03\x02\x02\x02\u03A0\u03A1\x07!\x02\x02\u03A1\u03A2\x07\u01E5\x02" +
		"\x02\u03A2\u03A3\x05\u01FA\xFE\x02\u03A3\u03A4\x07=\x02\x02\u03A4\u03A5" +
		"\x07\u0128\x02\x02\u03A5\u03A6\x07\u0225\x02\x02\u03A6\u03A7\t\x07\x02" +
		"\x02\u03A7\u03A8\x07\u01AE\x02\x02\u03A8\u03A9\x07\u03B9\x02\x02\u03A9" +
		"\u03AE\x05D#\x02\u03AA\u03AB\x07\u03BB\x02\x02\u03AB\u03AD\x05D#\x02\u03AC" +
		"\u03AA\x03\x02\x02\x02\u03AD\u03B0\x03\x02\x02\x02\u03AE\u03AC\x03\x02" +
		"\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03B1\x03\x02\x02\x02\u03B0" +
		"\u03AE\x03\x02\x02\x02\u03B1\u03B2\x07\u03BA\x02\x02\u03B2!\x03\x02\x02" +
		"\x02\u03B3\u03B5\x07!\x02\x02\u03B4\u03B6\x07\u020B\x02\x02\u03B5\u03B4" +
		"\x03\x02\x02\x02\u03B5\u03B6\x03\x02\x02\x02\u03B6\u03B7\x03\x02\x02\x02" +
		"\u03B7\u03B9\x07\x96\x02\x02\u03B8\u03BA\x05\u0230\u0119\x02\u03B9\u03B8" +
		"\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03BB\x03\x02\x02\x02" +
		"\u03BB\u03C3\x05\u01E2\xF2\x02\u03BC\u03BD\x07X\x02\x02\u03BD\u03C4\x05" +
		"\u01E2\xF2\x02\u03BE\u03BF\x07\u03B9\x02\x02\u03BF\u03C0\x07X\x02\x02" +
		"\u03C0\u03C1\x05\u01E2\xF2\x02\u03C1\u03C2\x07\u03BA\x02\x02\u03C2\u03C4" +
		"\x03\x02\x02\x02\u03C3\u03BC\x03\x02\x02\x02\u03C3\u03BE\x03\x02\x02\x02" +
		"\u03C4\u0402\x03\x02\x02\x02\u03C5\u03C7\x07!\x02\x02\u03C6\u03C8\x07" +
		"\u020B\x02\x02\u03C7\u03C6\x03\x02\x02\x02\u03C7\u03C8\x03\x02\x02\x02" +
		"\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03CB\x07\x96\x02\x02\u03CA\u03CC\x05" +
		"\u0230\u0119\x02\u03CB\u03CA\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02" +
		"\u03CC\u03CD\x03\x02\x02\x02\u03CD\u03CF\x05\u01E2\xF2\x02\u03CE\u03D0" +
		"\x05F$\x02\u03CF\u03CE\x03\x02\x02\x02\u03CF\u03D0\x03\x02\x02\x02\u03D0" +
		"\u03DB\x03\x02\x02\x02\u03D1\u03D8\x05X-\x02\u03D2\u03D4\x07\u03BB\x02" +
		"\x02\u03D3\u03D2\x03\x02\x02\x02\u03D3\u03D4\x03\x02\x02\x02\u03D4\u03D5" +
		"\x03\x02\x02\x02\u03D5\u03D7\x05X-\x02\u03D6\u03D3\x03\x02\x02\x02\u03D7" +
		"\u03DA\x03\x02\x02\x02\u03D8\u03D6\x03\x02\x02\x02\u03D8\u03D9\x03\x02" +
		"\x02\x02\u03D9\u03DC\x03\x02\x02\x02\u03DA\u03D8\x03\x02\x02\x02\u03DB" +
		"\u03D1\x03\x02\x02\x02\u03DB\u03DC\x03\x02\x02\x02\u03DC\u03DE\x03\x02" +
		"\x02\x02\u03DD\u03DF\x05\\/\x02\u03DE\u03DD\x03\x02\x02\x02\u03DE\u03DF" +
		"\x03\x02\x02\x02\u03DF\u03E1\x03\x02\x02\x02\u03E0\u03E2\t\b\x02\x02\u03E1" +
		"\u03E0\x03\x02\x02\x02\u03E1\u03E2\x03\x02\x02\x02\u03E2\u03E4\x03\x02" +
		"\x02\x02\u03E3\u03E5\x07\x0E\x02\x02\u03E4\u03E3\x03\x02\x02\x02\u03E4" +
		"\u03E5\x03\x02\x02\x02\u03E5\u03E6\x03\x02\x02\x02\u03E6\u03E7\x05\xAE" +
		"X\x02\u03E7\u0402\x03\x02\x02\x02\u03E8\u03EA\x07!\x02\x02\u03E9\u03EB" +
		"\x07\u020B\x02\x02\u03EA\u03E9\x03\x02\x02\x02\u03EA\u03EB\x03\x02\x02" +
		"\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03EE\x07\x96\x02\x02\u03ED\u03EF" +
		"\x05\u0230\u0119\x02\u03EE\u03ED\x03\x02\x02\x02\u03EE\u03EF\x03\x02\x02" +
		"\x02\u03EF\u03F0\x03\x02\x02\x02\u03F0\u03F1\x05\u01E2\xF2\x02\u03F1\u03FC" +
		"\x05F$\x02\u03F2\u03F9\x05X-\x02\u03F3\u03F5\x07\u03BB\x02\x02\u03F4\u03F3" +
		"\x03\x02\x02\x02\u03F4\u03F5\x03\x02\x02\x02\u03F5\u03F6\x03\x02\x02\x02" +
		"\u03F6\u03F8\x05X-\x02\u03F7\u03F4\x03\x02\x02\x02\u03F8\u03FB\x03\x02" +
		"\x02\x02\u03F9\u03F7\x03\x02\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA" +
		"\u03FD\x03\x02\x02\x02\u03FB\u03F9\x03\x02\x02\x02\u03FC\u03F2\x03\x02" +
		"\x02\x02\u03FC\u03FD\x03\x02\x02\x02\u03FD\u03FF\x03\x02\x02\x02\u03FE" +
		"\u0400\x05\\/\x02\u03FF\u03FE\x03\x02\x02\x02\u03FF\u0400\x03\x02\x02" +
		"\x02\u0400\u0402\x03\x02\x02\x02\u0401\u03B3\x03\x02\x02\x02\u0401\u03C5" +
		"\x03\x02\x02\x02\u0401\u03E8\x03\x02\x02\x02\u0402#\x03\x02\x02\x02\u0403" +
		"\u0404\x07!\x02\x02\u0404\u0405\x07\u020A\x02\x02\u0405\u0406\x05\u01FA" +
		"\xFE\x02\u0406\u0407\x07\b\x02\x02\u0407\u0408\x07\u0129\x02\x02\u0408" +
		"\u040C\x07\u03C7\x02\x02\u0409\u040A\x07\u014D\x02\x02\u040A\u040B\x07" +
		"\u03B0\x02\x02\u040B\u040D\x05\u0202\u0102\x02\u040C\u0409\x03\x02\x02" +
		"\x02\u040C\u040D\x03\x02\x02\x02\u040D\u0413\x03\x02\x02\x02\u040E\u0410" +
		"\x07\u013B\x02\x02\u040F\u0411\x07\u03B0\x02\x02\u0410\u040F\x03\x02\x02" +
		"\x02\u0410\u0411\x03\x02\x02\x02\u0411\u0412\x03\x02\x02\x02\u0412\u0414" +
		"\x05\u01F0\xF9\x02\u0413\u040E\x03\x02\x02\x02\u0413\u0414\x03\x02\x02" +
		"\x02\u0414%\x03\x02\x02\x02\u0415\u0416\x07!\x02\x02\u0416\u0417\x07\u020A" +
		"\x02\x02\u0417\u0418\x05\u01FA\xFE\x02\u0418\u0419\x07\b\x02\x02\u0419" +
		"\u041A\x07\u0129\x02\x02\u041A\u041B\x07\u03C7\x02\x02\u041B\u041C\x07" +
		"\xA4\x02\x02\u041C\u041D\x07";
	private static readonly _serializedATNSegment4: string =
		"\u0177\x02\x02\u041D\u041E\x07B\x02\x02\u041E\u0424\x05\u01FA\xFE\x02" +
		"\u041F\u0421\x07\u0149\x02\x02\u0420\u0422\x07\u03B0\x02\x02\u0421\u0420" +
		"\x03\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02" +
		"\u0423\u0425\x05\u0202\u0102\x02\u0424\u041F\x03\x02\x02\x02\u0424\u0425" +
		"\x03\x02\x02\x02\u0425\u042B\x03\x02\x02\x02\u0426\u0428\x07\u0163\x02" +
		"\x02\u0427\u0429\x07\u03B0\x02\x02\u0428\u0427\x03\x02\x02\x02\u0428\u0429" +
		"\x03\x02\x02\x02\u0429\u042A\x03\x02\x02\x02\u042A\u042C\x05\u0202\u0102" +
		"\x02\u042B\u0426\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C\u0432" +
		"\x03\x02\x02\x02\u042D\u042F\x07\u0103\x02\x02\u042E\u0430\x07\u03B0\x02" +
		"\x02\u042F\u042E\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\u0431" +
		"\x03\x02\x02\x02\u0431\u0433\x05\u0202\u0102\x02\u0432\u042D\x03\x02\x02" +
		"\x02\u0432\u0433\x03\x02\x02\x02\u0433\u0439\x03\x02\x02\x02\u0434\u0436" +
		"\x07\u0191\x02\x02\u0435\u0437\x07\u03B0\x02\x02\u0436\u0435\x03\x02\x02" +
		"\x02\u0436\u0437\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438\u043A" +
		"\x05\u0202\u0102\x02\u0439\u0434\x03\x02\x02\x02\u0439\u043A\x03\x02\x02" +
		"\x02\u043A\u0440\x03\x02\x02\x02\u043B\u043D\x07\u01A3\x02\x02\u043C\u043E" +
		"\x07\u03B0\x02\x02\u043D\u043C\x03\x02\x02\x02\u043D\u043E\x03\x02\x02" +
		"\x02\u043E\u043F\x03\x02\x02\x02\u043F\u0441\x05\u01FA\xFE\x02\u0440\u043B" +
		"\x03\x02\x02\x02\u0440\u0441\x03\x02\x02\x02\u0441\u0443\x03\x02\x02\x02" +
		"\u0442\u0444\x07\u0221\x02\x02\u0443\u0442\x03\x02\x02\x02\u0443\u0444" +
		"\x03\x02\x02\x02\u0444\u044A\x03\x02\x02\x02\u0445\u0447\x07\u011A\x02" +
		"\x02\u0446\u0448\x07\u03B0\x02\x02\u0447\u0446\x03\x02\x02\x02\u0447\u0448" +
		"\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449\u044B\x07\u03C7\x02" +
		"\x02\u044A\u0445\x03\x02\x02\x02\u044A\u044B\x03\x02\x02\x02\u044B\u044C" +
		"\x03\x02\x02\x02\u044C\u044E\x07\u013B\x02\x02\u044D\u044F\x07\u03B0\x02" +
		"\x02\u044E\u044D\x03\x02\x02\x02\u044E\u044F\x03\x02\x02\x02\u044F\u0450" +
		"\x03\x02\x02\x02\u0450\u0451\x05\u01F0\xF9\x02\u0451\'\x03\x02\x02\x02" +
		"\u0452\u0454\x07!\x02\x02\u0453\u0455\x05.\x18\x02\u0454\u0453\x03\x02" +
		"\x02\x02\u0454\u0455\x03\x02\x02\x02\u0455\u0456\x03\x02\x02\x02\u0456" +
		"\u0457\x07\x9B\x02\x02\u0457\u0458\x05\u01E0\xF1\x02\u0458\u0459\t\t\x02" +
		"\x02\u0459\u045A\t\n\x02\x02\u045A\u045B\x07i\x02\x02\u045B\u045C\x05" +
		"\u01E2\xF2\x02\u045C\u045D\x07;\x02\x02\u045D\u045E\x071\x02\x02\u045E" +
		"\u0461\x07\u01DF\x02\x02\u045F\u0460\t\v\x02\x02\u0460\u0462\x05\u01E0" +
		"\xF1\x02\u0461\u045F\x03\x02\x02\x02\u0461\u0462\x03\x02\x02\x02\u0462" +
		"\u0463\x03\x02\x02\x02\u0463\u0464\x05\u0152\xAA\x02\u0464)\x03\x02\x02" +
		"\x02\u0465\u0468\x07!\x02\x02\u0466\u0467\x07m\x02\x02\u0467\u0469\x07" +
		"~\x02\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469" +
		"\u046D\x03\x02\x02\x02\u046A\u046B\x07\xFE\x02\x02\u046B\u046C\x07\u03B0" +
		"\x02\x02\u046C\u046E\t\f\x02\x02\u046D\u046A\x03\x02\x02\x02\u046D\u046E" +
		"\x03\x02\x02\x02\u046E\u0470\x03\x02\x02\x02\u046F\u0471\x05.\x18\x02" +
		"\u0470\u046F\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u0475\x03" +
		"\x02\x02\x02\u0472\u0473\x07\x8C\x02\x02\u0473\u0474\x07\u01E4\x02\x02" +
		"\u0474\u0476\t\r\x02\x02\u0475\u0472\x03\x02\x02\x02\u0475\u0476\x03\x02" +
		"\x02\x02\u0476\u0477\x03\x02\x02\x02\u0477\u0478\x07\u021F\x02\x02\u0478" +
		"\u047D\x05\u01E0\xF1\x02\u0479\u047A\x07\u03B9\x02\x02\u047A\u047B\x05" +
		"\u0218\u010D\x02\u047B\u047C\x07\u03BA\x02\x02\u047C\u047E\x03\x02\x02" +
		"\x02\u047D\u0479\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02\u047E\u047F" +
		"\x03\x02\x02\x02\u047F\u0480\x07\x0E\x02\x02\u0480\u0487\x05\xAEX\x02" +
		"\u0481\u0483\x07\xAA\x02\x02\u0482\u0484\t\x0E\x02\x02\u0483\u0482\x03" +
		"\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0485\x03\x02\x02\x02\u0485" +
		"\u0486\x07\x1A\x02\x02\u0486\u0488\x07k\x02\x02\u0487\u0481\x03\x02\x02" +
		"\x02\u0487\u0488\x03\x02\x02\x02\u0488+\x03\x02\x02\x02\u0489\u048B\x07" +
		"(\x02\x02\u048A\u0489\x03\x02\x02\x02\u048A\u048B\x03\x02\x02\x02\u048B" +
		"\u048F\x03\x02\x02\x02\u048C\u048D\x07\x19\x02\x02\u048D\u0490\x07\x88" +
		"\x02\x02\u048E\u0490\x07\u0299\x02\x02\u048F\u048C\x03\x02\x02\x02\u048F" +
		"\u048E\x03\x02\x02\x02\u0490\u0492\x03\x02\x02\x02\u0491\u0493\x07\u03B0" +
		"\x02\x02\u0492\u0491\x03\x02\x02\x02\u0492\u0493\x03\x02\x02\x02\u0493" +
		"\u0494\x03\x02\x02\x02\u0494\u049E\x05\u01EC\xF7\x02\u0495\u0497\x07(" +
		"\x02\x02\u0496\u0495\x03\x02\x02\x02\u0496\u0497\x03\x02\x02\x02\u0497" +
		"\u0498\x03\x02\x02\x02\u0498\u049A\x07\x1B\x02\x02\u0499\u049B\x07\u03B0" +
		"\x02\x02\u049A\u0499\x03\x02\x02\x02\u049A\u049B\x03\x02\x02\x02\u049B" +
		"\u049C\x03\x02\x02\x02\u049C\u049E\x05\u01EE\xF8\x02\u049D\u048A\x03\x02" +
		"\x02\x02\u049D\u0496\x03\x02\x02\x02\u049E-\x03\x02\x02\x02\u049F\u04A0" +
		"\x07\u012C\x02\x02\u04A0\u04A7\x07\u03B0\x02\x02\u04A1\u04A8\x05\u01E8" +
		"\xF5\x02\u04A2\u04A5\x07#\x02\x02\u04A3\u04A4\x07\u03B9\x02\x02\u04A4" +
		"\u04A6\x07\u03BA\x02\x02\u04A5\u04A3\x03\x02\x02\x02\u04A5\u04A6\x03\x02" +
		"\x02\x02\u04A6\u04A8\x03\x02\x02\x02\u04A7\u04A1\x03\x02\x02\x02\u04A7" +
		"\u04A2\x03\x02\x02\x02\u04A8/\x03\x02\x02\x02\u04A9\u04AA\x07\u0100\x02" +
		"\x02\u04AA\u04AE\x052\x1A\x02\u04AB\u04AD\x054\x1B\x02\u04AC\u04AB\x03" +
		"\x02\x02\x02\u04AD\u04B0\x03\x02\x02\x02\u04AE\u04AC\x03\x02\x02\x02\u04AE" +
		"\u04AF\x03\x02\x02\x02\u04AF\u04CC\x03\x02\x02\x02\u04B0\u04AE\x03\x02" +
		"\x02\x02\u04B1\u04B4\x07\u0143\x02\x02\u04B2\u04B5\x05\u0200\u0101\x02" +
		"\u04B3\u04B5\x05\u0246\u0124\x02\u04B4\u04B2\x03\x02\x02\x02\u04B4\u04B3" +
		"\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02\x02\u04B6\u04BF\x056\x1C\x02" +
		"\u04B7\u04B8\x07\u01FB\x02\x02\u04B8\u04BC\x052\x1A\x02\u04B9\u04BB\x05" +
		"4\x1B\x02\u04BA\u04B9\x03\x02\x02\x02\u04BB\u04BE\x03\x02\x02\x02\u04BC" +
		"\u04BA\x03\x02\x02\x02\u04BC\u04BD\x03\x02\x02\x02\u04BD\u04C0\x03\x02" +
		"\x02\x02\u04BE\u04BC\x03\x02\x02\x02\u04BF\u04B7\x03\x02\x02\x02\u04BF" +
		"\u04C0\x03\x02\x02\x02\u04C0\u04C9\x03\x02\x02\x02\u04C1\u04C2\x07\u013A" +
		"\x02\x02\u04C2\u04C6\x052\x1A\x02\u04C3\u04C5\x054\x1B\x02\u04C4\u04C3" +
		"\x03\x02\x02\x02\u04C5\u04C8\x03\x02\x02\x02\u04C6\u04C4\x03\x02\x02\x02" +
		"\u04C6\u04C7\x03\x02\x02\x02\u04C7\u04CA\x03\x02\x02\x02\u04C8\u04C6\x03" +
		"\x02\x02\x02\u04C9\u04C1\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA" +
		"\u04CC\x03\x02\x02\x02\u04CB\u04A9\x03\x02\x02\x02\u04CB\u04B1\x03\x02" +
		"\x02\x02\u04CC1\x03\x02\x02\x02\u04CD\u04D2\x07\xE9\x02\x02\u04CE\u04D2" +
		"\x05\u0204\u0103\x02\u04CF\u04D2\x05\u0200\u0101\x02\u04D0\u04D2\x05\u0246" +
		"\u0124\x02\u04D1\u04CD\x03\x02\x02\x02\u04D1\u04CE\x03\x02\x02\x02\u04D1" +
		"\u04CF\x03\x02\x02\x02\u04D1\u04D0\x03\x02\x02\x02\u04D23\x03\x02\x02" +
		"\x02\u04D3\u04D4\x07\u03AB\x02\x02\u04D4\u04D7\x07M\x02\x02\u04D5\u04D8" +
		"\x05\u0200\u0101\x02\u04D6\u04D8\x05\u0246\u0124\x02\u04D7\u04D5\x03\x02" +
		"\x02\x02\u04D7\u04D6\x03\x02\x02\x02\u04D8\u04D9\x03\x02\x02\x02\u04D9" +
		"\u04DA\x056\x1C\x02\u04DA5\x03\x02\x02\x02\u04DB\u04E9\x05\u025C\u012F" +
		"\x02\u04DC\u04E9\x07\xBD\x02\x02\u04DD\u04E9\x07\xCC\x02\x02\u04DE\u04E9" +
		"\x07\xCD\x02\x02\u04DF\u04E9\x07\xCE\x02\x02\u04E0\u04E9\x07\xCF\x02\x02" +
		"\u04E1\u04E9\x07\xD0\x02\x02\u04E2\u04E9\x07\xD1\x02\x02\u04E3\u04E9\x07" +
		"\xD2\x02\x02\u04E4\u04E9\x07\xD3\x02\x02\u04E5\u04E9\x07\xD4\x02\x02\u04E6" +
		"\u04E9\x07\xD5\x02\x02\u04E7\u04E9\x07\xD6\x02\x02\u04E8\u04DB\x03\x02" +
		"\x02\x02\u04E8\u04DC\x03\x02\x02\x02\u04E8\u04DD\x03\x02\x02\x02\u04E8" +
		"\u04DE\x03\x02\x02\x02\u04E8\u04DF\x03\x02\x02\x02\u04E8\u04E0\x03\x02" +
		"\x02\x02\u04E8\u04E1\x03\x02\x02\x02\u04E8\u04E2\x03\x02\x02\x02\u04E8" +
		"\u04E3\x03\x02\x02\x02\u04E8\u04E4\x03\x02\x02\x02\u04E8\u04E5\x03\x02" +
		"\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E8\u04E7\x03\x02\x02\x02\u04E9" +
		"7\x03\x02\x02\x02\u04EA\u04F0\x07\u0137\x02\x02\u04EB\u04F0\x07\u0130" +
		"\x02\x02\u04EC\u04ED\x07\u0130\x02\x02\u04ED\u04EE\x07i\x02\x02\u04EE" +
		"\u04F0\x07\u01EB\x02\x02\u04EF\u04EA\x03\x02\x02\x02\u04EF\u04EB\x03\x02" +
		"\x02\x02\u04EF\u04EC\x03\x02\x02\x02\u04F09\x03\x02\x02\x02\u04F1\u04F2" +
		"\x07\xA5\x02\x02\u04F2\u04F3\t\x0F\x02\x02\u04F3;\x03\x02\x02\x02\u04F4" +
		"\u04F6\x07\u016F\x02\x02\u04F5\u04F7\x07\u03B0\x02\x02\u04F6\u04F5\x03" +
		"\x02\x02\x02\u04F6\u04F7\x03\x02\x02\x02\u04F7\u04F8\x03\x02\x02\x02\u04F8" +
		"\u0500\x05\u0202\u0102\x02\u04F9\u0500\x05:\x1E\x02\u04FA\u04FB\x07\xAA" +
		"\x02\x02\u04FB\u04FC\x07\u01B2\x02\x02\u04FC\u0500\x05\u01FA\xFE\x02\u04FD" +
		"\u04FE\x07\u011A\x02\x02\u04FE\u0500\x07\u03C7\x02\x02\u04FF\u04F4\x03" +
		"\x02\x02\x02\u04FF\u04F9\x03\x02\x02\x02\u04FF\u04FA\x03\x02\x02\x02\u04FF" +
		"\u04FD\x03\x02\x02\x02\u0500=\x03\x02\x02\x02\u0501\u0502\t\x10\x02\x02" +
		"\u0502\u0503\x05\u01FA\xFE\x02\u0503\u0504\x05\u020E\u0108\x02\u0504?" +
		"\x03\x02\x02\x02\u0505\u0506\x05\u01FA\xFE\x02\u0506\u0507\x05\u020E\u0108" +
		"\x02\u0507A\x03\x02\x02\x02\u0508\u0509\x07\u011A\x02\x02\u0509\u0520" +
		"\x07\u03C7\x02\x02\u050A\u050B\x07\u0170\x02\x02\u050B\u0520\x07\x8C\x02" +
		"\x02\u050C\u050E\x07f\x02\x02\u050D\u050C\x03\x02\x02\x02\u050D\u050E" +
		"\x03\x02\x02\x02\u050E\u050F\x03\x02\x02\x02\u050F\u0520\x07-\x02\x02" +
		"\u0510\u0511\x07\u0123\x02\x02\u0511\u051B\x07\x8C\x02\x02\u0512\u0513" +
		"\x07\u01A2\x02\x02\u0513\u051B\x07\x8C\x02\x02\u0514\u0515\x07x\x02\x02" +
		"\u0515\u0516\x07\x8C\x02\x02\u0516\u051B\x07\u0128\x02\x02\u0517\u0518" +
		"\x07d\x02\x02\u0518\u0519\x07\x8C\x02\x02\u0519\u051B\x07\u0128\x02\x02" +
		"\u051A\u0510\x03\x02\x02\x02\u051A\u0512\x03\x02\x02\x02\u051A\u0514\x03" +
		"\x02\x02\x02\u051A\u0517\x03\x02\x02\x02\u051B\u0520\x03\x02\x02\x02\u051C" +
		"\u051D\x07\x8C\x02\x02\u051D\u051E\x07\u01E4\x02\x02\u051E\u0520\t\r\x02" +
		"\x02\u051F\u0508\x03\x02\x02\x02\u051F\u050A\x03\x02\x02\x02\u051F\u050D" +
		"\x03\x02\x02\x02\u051F\u051A\x03\x02\x02\x02\u051F\u051C\x03\x02\x02\x02" +
		"\u0520C\x03\x02\x02\x02\u0521\u0522\x07\u015D\x02\x02\u0522\u0530\x07" +
		"\u03C7\x02\x02\u0523\u0524\x07%\x02\x02\u0524\u0530\x07\u03C7\x02\x02" +
		"\u0525\u0526\x07\u0219\x02\x02\u0526\u0530\x07\u03C7\x02\x02\u0527\u0528" +
		"\x07\u01B6\x02\x02\u0528\u0530\x07\u03C7\x02\x02\u0529\u052A\x07\u01EE" +
		"\x02\x02\u052A\u0530\x07\u03C7\x02\x02\u052B\u052C\x07\u01AF\x02\x02\u052C" +
		"\u0530\x07\u03C7\x02\x02\u052D\u052E\x07\u01BB\x02\x02\u052E\u0530\x05" +
		"\u0200\u0101\x02\u052F\u0521\x03\x02\x02\x02\u052F\u0523\x03\x02\x02\x02" +
		"\u052F\u0525\x03\x02\x02\x02\u052F\u0527\x03\x02\x02\x02\u052F\u0529\x03" +
		"\x02\x02\x02\u052F\u052B\x03\x02\x02\x02\u052F\u052D\x03\x02\x02\x02\u0530" +
		"E\x03\x02\x02\x02\u0531\u0532\x07\u03B9\x02\x02\u0532\u0537\x05H%\x02" +
		"\u0533\u0534\x07\u03BB\x02\x02\u0534\u0536\x05H%\x02\u0535\u0533\x03\x02" +
		"\x02\x02\u0536\u0539\x03\x02\x02\x02\u0537\u0535\x03\x02\x02\x02\u0537" +
		"\u0538\x03\x02\x02\x02\u0538\u053A\x03\x02\x02\x02\u0539\u0537\x03\x02" +
		"\x02\x02\u053A\u053B\x07\u03BA\x02\x02\u053BG\x03\x02\x02\x02\u053C\u053D" +
		"\x05\u01FA\xFE\x02\u053D\u053E\x05J&\x02\u053E\u0542\x03\x02\x02\x02\u053F" +
		"\u0542\x05N(\x02\u0540\u0542\x05V,\x02\u0541\u053C\x03\x02\x02\x02\u0541" +
		"\u053F\x03\x02\x02\x02\u0541\u0540\x03\x02\x02\x02\u0542I\x03\x02\x02" +
		"\x02\u0543\u0547\x05\u020E\u0108\x02\u0544\u0546\x05L\'\x02\u0545\u0544" +
		"\x03\x02\x02\x02\u0546\u0549\x03\x02\x02\x02\u0547\u0545\x03\x02\x02\x02" +
		"\u0547\u0548\x03\x02\x02\x02\u0548K\x03\x02\x02\x02\u0549\u0547\x03\x02" +
		"\x02\x02\u054A\u056C\x05\u020A\u0106\x02\u054B\u054C\x07(\x02\x02\u054C" +
		"\u056C\x05\u0228\u0115\x02\u054D\u056C\x07\u0104\x02\x02\u054E\u0550\x07" +
		"s\x02\x02\u054F\u054E\x03\x02\x02\x02\u054F\u0550\x03\x02\x02\x02\u0550" +
		"\u0551\x03\x02\x02\x02\u0551\u056C\x07R\x02\x02\u0552\u0554\x07\x9F\x02" +
		"\x02\u0553\u0555\x07R\x02\x02\u0554\u0553\x03\x02\x02\x02\u0554\u0555" +
		"\x03\x02\x02\x02\u0555\u056C\x03\x02\x02\x02\u0556\u0557\x07\u011A\x02" +
		"\x02\u0557\u056C\x07\u03C7\x02\x02\u0558\u0559\x07\u0119\x02\x02\u0559" +
		"\u056C\t\x11\x02\x02\u055A\u055B\x07\u0201\x02\x02\u055B\u056C\t\x12\x02" +
		"\x02\u055C\u056C\x05P)\x02\u055D\u055E\x07@\x02\x02\u055E\u0560\x07\v" +
		"\x02\x02\u055F\u055D\x03\x02\x02\x02\u055F\u0560\x03\x02\x02\x02\u0560" +
		"\u0561\x03\x02\x02\x02\u0561\u0562\x07\x0E\x02\x02\u0562\u0563\x07\u03B9" +
		"\x02\x02\u0563\u0564\x05\u0246\u0124\x02\u0564\u0566\x07\u03BA\x02\x02" +
		"\u0565\u0567\t\x13\x02\x02\u0566\u0565\x03\x02\x02\x02\u0566\u0567\x03" +
		"\x02\x02\x02\u0567\u056C\x03\x02\x02\x02\u0568\u0569\x07\xCB\x02\x02\u0569" +
		"\u056A\x07(\x02\x02\u056A\u056C\x07\u021D\x02\x02\u056B\u054A\x03\x02" +
		"\x02\x02\u056B\u054B\x03\x02\x02\x02\u056B\u054D\x03\x02\x02\x02\u056B" +
		"\u054F\x03\x02\x02\x02\u056B\u0552\x03\x02\x02\x02\u056B\u0556\x03\x02" +
		"\x02\x02\u056B\u0558\x03\x02\x02\x02\u056B\u055A\x03\x02\x02\x02\u056B" +
		"\u055C\x03\x02\x02\x02\u056B\u055F\x03\x02\x02\x02\u056B\u0568\x03\x02" +
		"\x02\x02\u056CM\x03\x02\x02\x02\u056D\u056F\x07\x1E\x02\x02\u056E\u0570" +
		"\x05\u01FA\xFE\x02\u056F\u056E\x03\x02\x02\x02\u056F\u0570\x03\x02\x02" +
		"\x02\u0570\u0572\x03\x02\x02\x02\u0571\u056D\x03\x02\x02\x02\u0571\u0572" +
		"\x03\x02\x02\x02\u0572\u0573\x03\x02\x02\x02\u0573\u0574\x07s\x02\x02" +
		"\u0574\u0576\x07R\x02\x02\u0575\u0577\x05:\x1E\x02\u0576\u0575\x03\x02" +
		"\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578" +
		"\u057C\x05\u021C\u010F\x02\u0579\u057B\x05<\x1F\x02\u057A\u0579\x03\x02" +
		"\x02\x02\u057B\u057E\x03\x02\x02\x02\u057C\u057A\x03\x02\x02\x02\u057C" +
		"\u057D\x03\x02\x02\x02\u057D\u05B0\x03\x02\x02\x02\u057E\u057C\x03\x02" +
		"\x02\x02\u057F\u0581\x07\x1E\x02\x02\u0580\u0582\x05\u01FA\xFE\x02\u0581" +
		"\u0580\x03\x02\x02\x02\u0581\u0582\x03\x02\x02\x02\u0582\u0584\x03\x02" +
		"\x02\x02\u0583\u057F\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02\u0584" +
		"\u0585\x03\x02\x02\x02\u0585\u0587\x07\x9F\x02\x02\u0586\u0588\t\x14\x02" +
		"\x02\u0587\u0586\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u058A" +
		"\x03\x02\x02\x02\u0589\u058B\x05\u01FA\xFE\x02\u058A\u0589\x03\x02\x02" +
		"\x02\u058A\u058B\x03\x02\x02\x02\u058B\u058D\x03\x02\x02\x02\u058C\u058E" +
		"\x05:\x1E\x02\u058D\u058C\x03\x02\x02\x02\u058D\u058E\x03\x02\x02\x02" +
		"\u058E\u058F\x03\x02\x02\x02\u058F\u0593\x05\u021C\u010F\x02\u0590\u0592" +
		"\x05<\x1F\x02\u0591\u0590\x03\x02\x02\x02\u0592\u0595\x03\x02\x02\x02" +
		"\u0593\u0591\x03\x02\x02\x02\u0593\u0594\x03\x02\x02\x02\u0594\u05B0\x03" +
		"\x02\x02\x02\u0595\u0593\x03\x02\x02\x02\u0596\u0598\x07\x1E\x02\x02\u0597" +
		"\u0599\x05\u01FA\xFE\x02\u0598\u0597\x03\x02\x02\x02\u0598\u0599\x03\x02" +
		"\x02\x02\u0599\u059B\x03\x02\x02\x02\u059A\u0596\x03\x02\x02\x02\u059A" +
		"\u059B\x03\x02\x02\x02\u059B\u059C\x03\x02\x02\x02\u059C\u059D\x07=\x02" +
		"\x02\u059D\u059F\x07R\x02\x02\u059E\u05A0\x05\u01FA\xFE\x02\u059F\u059E" +
		"\x03\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02" +
		"\u05A1\u05A2\x05\u021C\u010F\x02\u05A2\u05A3\x05P)\x02\u05A3\u05B0\x03" +
		"\x02\x02\x02\u05A4\u05A6\x07\x1E\x02\x02\u05A5\u05A7\x05\u01FA\xFE\x02" +
		"\u05A6\u05A5\x03\x02\x02\x02\u05A6\u05A7\x03\x02\x02\x02\u05A7\u05A9\x03" +
		"\x02\x02\x02\u05A8\u05A4\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9" +
		"\u05AA\x03\x02\x02\x02\u05AA\u05AB\x07\x1A\x02\x02\u05AB\u05AC\x07\u03B9" +
		"\x02\x02\u05AC\u05AD\x05\u0246\u0124\x02\u05AD\u05AE\x07\u03BA\x02\x02" +
		"\u05AE\u05B0\x03\x02\x02\x02\u05AF\u0571\x03\x02\x02\x02\u05AF\u0583\x03" +
		"\x02\x02\x02\u05AF\u059A\x03\x02\x02\x02\u05AF\u05A8\x03\x02\x02\x02\u05B0" +
		"O\x03\x02\x02\x02\u05B1\u05B2\x07y\x02\x02\u05B2\u05B3\x05\u01E2\xF2\x02" +
		"\u05B3\u05B6\x05\u021C\u010F\x02\u05B4\u05B5\x07b\x02\x02\u05B5\u05B7" +
		"\t\x15\x02\x02\u05B6\u05B4\x03\x02\x02\x02\u05B6\u05B7\x03\x02\x02\x02" +
		"\u05B7\u05B9\x03\x02\x02\x02\u05B8\u05BA\x05R*\x02\u05B9\u05B8\x03\x02" +
		"\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BAQ\x03\x02\x02\x02\u05BB\u05BC" +
		"\x07i\x02\x02\u05BC\u05BD\x07*\x02\x02\u05BD\u05C1\x05T+\x02\u05BE\u05BF" +
		"\x07i\x02\x02\u05BF\u05C0\x07\xA2\x02\x02\u05C0\u05C2\x05T+\x02\u05C1" +
		"\u05BE\x03\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2\u05CC\x03\x02" +
		"\x02\x02\u05C3\u05C4\x07i\x02\x02\u05C4\u05C5\x07\xA2\x02\x02\u05C5\u05C9" +
		"\x05T+\x02\u05C6\u05C7\x07i\x02\x02\u05C7\u05C8\x07*\x02\x02\u05C8\u05CA" +
		"\x05T+\x02\u05C9\u05C6\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA" +
		"\u05CC\x03\x02\x02\x02\u05CB\u05BB\x03\x02\x02\x02\u05CB\u05C3\x03\x02" +
		"\x02\x02\u05CCS\x03\x02\x02\x02\u05CD\u05D4\x07\x80\x02\x02\u05CE\u05D4" +
		"\x07\x15\x02\x02\u05CF\u05D0\x07\x88\x02\x02\u05D0\u05D4\x07h\x02\x02" +
		"\u05D1\u05D2\x07\u01A2\x02\x02\u05D2\u05D4\x07\xFB\x02\x02\u05D3\u05CD" +
		"\x03\x02\x02\x02\u05D3\u05CE\x03\x02\x02\x02\u05D3\u05CF\x03\x02\x02\x02" +
		"\u05D3\u05D1\x03\x02\x02\x02\u05D4U\x03\x02\x02\x02\u05D5\u05D7\t\x14" +
		"\x02\x02\u05D6\u05D8\x05\u01FA\xFE\x02\u05D7\u05D6\x03\x02\x02\x02\u05D7" +
		"\u05D8\x03\x02\x02\x02\u05D8\u05DA\x03\x02\x02\x02\u05D9\u05DB\x05:\x1E" +
		"\x02\u05DA\u05D9\x03\x02\x02\x02\u05DA\u05DB\x03\x02\x02\x02\u05DB\u05DC" +
		"\x03\x02\x02\x02\u05DC\u05E0\x05\u021C\u010F\x02\u05DD\u05DF\x05<\x1F" +
		"\x02\u05DE\u05DD\x03\x02\x02\x02\u05DF\u05E2\x03\x02\x02\x02\u05E0\u05DE" +
		"\x03\x02\x02\x02\u05E0\u05E1\x03\x02\x02\x02\u05E1\u05F2\x03\x02\x02\x02" +
		"\u05E2\u05E0\x03\x02\x02\x02\u05E3\u05E5\t\x16\x02\x02\u05E4\u05E6\t\x14" +
		"\x02\x02\u05E5\u05E4\x03\x02\x02\x02\u05E5\u05E6\x03\x02\x02\x02\u05E6" +
		"\u05E8\x03\x02\x02\x02\u05E7\u05E9\x05\u01FA\xFE\x02\u05E8\u05E7\x03\x02" +
		"\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05EA\x03\x02\x02\x02\u05EA" +
		"\u05EE\x05\u021C\u010F\x02\u05EB\u05ED\x05<\x1F\x02\u05EC\u05EB\x03\x02" +
		"\x02\x02\u05ED\u05F0\x03\x02\x02\x02\u05EE\u05EC\x03\x02\x02\x02\u05EE" +
		"\u05EF\x03\x02\x02\x02\u05EF\u05F2\x03\x02\x02\x02\u05F0\u05EE\x03\x02" +
		"\x02\x02\u05F1\u05D5\x03\x02\x02\x02\u05F1\u05E3\x03\x02\x02\x02\u05F2" +
		"W\x03\x02\x02\x02\u05F3\u05F5\x07\u013B\x02\x02\u05F4\u05F6\x07\u03B0" +
		"\x02\x02\u05F5\u05F4\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6" +
		"\u05F7\x03\x02\x02\x02\u05F7\u0680\x05\u01F0\xF9\x02\u05F8\u05FA\x07\u0104" +
		"\x02\x02\u05F9\u05FB\x07\u03B0\x02\x02\u05FA\u05F9\x03\x02\x02\x02\u05FA" +
		"\u05FB\x03\x02\x02\x02\u05FB\u05FC\x03\x02\x02\x02\u05FC\u0680\x05\u0200" +
		"\u0101\x02\u05FD\u05FF\x07\u0105\x02\x02\u05FE\u0600\x07\u03B0\x02\x02" +
		"\u05FF\u05FE\x03\x02\x02\x02\u05FF\u0600\x03\x02\x02\x02\u0600\u0601\x03" +
		"\x02\x02\x02\u0601\u0680\x05\u0200\u0101\x02\u0602\u0604\x07(\x02\x02" +
		"\u0603\u0602\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604\u0608\x03" +
		"\x02\x02\x02\u0605\u0606\x07\x19\x02\x02\u0606\u0609\x07\x88\x02\x02\u0607" +
		"\u0609\x07\u0299\x02\x02\u0608\u0605\x03\x02\x02\x02\u0608\u0607\x03\x02" +
		"\x02\x02\u0609\u060B\x03\x02\x02\x02\u060A\u060C\x07\u03B0\x02\x02\u060B" +
		"\u060A\x03\x02\x02\x02\u060B\u060C\x03\x02\x02\x02\u060C\u060D\x03\x02" +
		"\x02\x02\u060D\u0680\x05\u01EC\xF7\x02\u060E\u0610\x07\u0112\x02\x02\u060F" +
		"\u0611\x07\u03B0\x02\x02\u0610\u060F\x03\x02\x02\x02\u0610\u0611\x03\x02" +
		"\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612\u0680\t\x17\x02\x02\u0613\u0615" +
		"\x07(\x02\x02\u0614\u0613\x03\x02\x02\x02\u0614\u0615\x03\x02\x02\x02" +
		"\u0615\u0616\x03\x02\x02\x02\u0616\u0618\x07\x1B\x02\x02\u0617\u0619\x07" +
		"\u03B0\x02\x02\u0618\u0617\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02" +
		"\u0619\u061A\x03\x02\x02\x02\u061A\u0680\x05\u01EE\xF8\x02\u061B\u061D" +
		"\x07\u011A\x02\x02\u061C\u061E\x07\u03B0\x02\x02\u061D\u061C\x03\x02\x02" +
		"\x02\u061D\u061E\x03\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061F\u0680" +
		"\x07\u03C7\x02\x02\u0620\u0622\x07\u011F\x02\x02\u0621\u0623\x07\u03B0" +
		"\x02\x02\u0622\u0621\x03\x02\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623" +
		"\u0624\x03\x02\x02\x02\u0624\u0680\x07\u03C7\x02\x02\u0625\u0627\x07\u0121" +
		"\x02\x02\u0626\u0628\x07\u03B0\x02\x02\u0627\u0626\x03\x02\x02\x02\u0627" +
		"\u0628\x03\x02\x02\x02\u0628\u0629\x03\x02\x02\x02\u0629\u0680\x07\u03C7" +
		"\x02\x02\u062A\u062B\x07\u0128\x02\x02\u062B\u062D\x07\u012F\x02\x02\u062C" +
		"\u062E\x07\u03B0\x02\x02\u062D\u062C\x03\x02\x02\x02\u062D\u062E\x03\x02" +
		"\x02\x02\u062E\u062F\x03\x02\x02\x02\u062F\u0680\x07\u03C7\x02\x02\u0630" +
		"\u0632\x07\u012D\x02\x02\u0631\u0633\x07\u03B0\x02\x02\u0632\u0631\x03" +
		"\x02\x02\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0634\x03\x02\x02\x02\u0634" +
		"\u0680\t\x17\x02\x02\u0635\u0637\x07\u0138\x02\x02\u0636\u0638\x07\u03B0" +
		"\x02\x02\u0637\u0636\x03\x02\x02\x02\u0637\u0638\x03\x02\x02\x02\u0638" +
		"\u0639\x03\x02\x02\x02\u0639\u0680\x07\u03C7\x02\x02\u063A\u063B\x07H" +
		"\x02\x02\u063B\u063D\x07\u012F\x02\x02\u063C\u063E\x07\u03B0\x02\x02\u063D" +
		"\u063C\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063F\x03\x02" +
		"\x02\x02\u063F\u0680\x07\u03C7\x02\x02\u0640\u0642\x07\u0165\x02\x02\u0641" +
		"\u0643\x07\u03B0\x02\x02\u0642\u0641\x03\x02\x02\x02\u0642\u0643\x03\x02" +
		"\x02\x02\u0643\u0644\x03\x02\x02\x02\u0644\u0680\t\x18\x02\x02\u0645\u0647" +
		"\x07\u016F\x02\x02\u0646\u0648\x07\u03B0\x02\x02\u0647\u0646\x03\x02\x02" +
		"\x02\u0647\u0648\x03\x02\x02\x02\u0648\u0649\x03\x02\x02\x02\u0649\u0680" +
		"\x05\u0202\u0102\x02\u064A\u064C\x07\u0190\x02\x02\u064B\u064D\x07\u03B0" +
		"\x02\x02\u064C\u064B\x03\x02\x02\x02\u064C\u064D\x03\x02\x02\x02\u064D" +
		"\u064E\x03\x02\x02\x02\u064E\u0680\x05\u0200\u0101\x02\u064F\u0651\x07" +
		"\u0198\x02\x02\u0650\u0652\x07\u03B0\x02\x02\u0651\u0650\x03\x02\x02\x02" +
		"\u0651\u0652\x03\x02\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0680\x05" +
		"\u0200\u0101\x02\u0654\u0656\x07\u01B0\x02\x02\u0655\u0657\x07\u03B0\x02" +
		"\x02\u0656\u0655\x03\x02\x02\x02\u0656\u0657\x03\x02\x02\x02\u0657\u0658" +
		"\x03\x02\x02\x02\u0658\u0680\t\x19\x02\x02\u0659\u065B\x07\u01B6\x02\x02" +
		"\u065A\u065C\x07\u03B0\x02\x02\u065B\u065A\x03\x02\x02\x02\u065B\u065C" +
		"\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\u0680\x07\u03C7\x02" +
		"\x02\u065E\u0660\x07\u01E1\x02\x02\u065F\u0661\x07\u03B0\x02\x02\u0660" +
		"\u065F\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0662\x03\x02" +
		"\x02\x02\u0662\u0680\t\x1A\x02\x02\u0663\u0665\x07\u01FC\x02\x02\u0664" +
		"\u0666\x07\u03B0\x02\x02\u0665\u0664\x03\x02\x02\x02\u0665\u0666\x03\x02" +
		"\x02\x02\u0666\u0667\x03\x02\x02\x02\u0667\u0680\t\x19\x02\x02\u0668\u066A" +
		"\x07\u01FD\x02\x02\u0669\u066B\x07\u03B0\x02\x02\u066A\u0669\x03\x02\x02" +
		"\x02\u066A\u066B\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C\u0680" +
		"\t\x19\x02\x02\u066D\u066F\x07\u01FE\x02\x02\u066E\u0670\x07\u03B0\x02" +
		"\x02\u066F\u066E\x03\x02\x02\x02\u066F\u0670\x03\x02\x02\x02\u0670\u0671" +
		"\x03\x02\x02\x02\u0671\u0680\x05\u0200\u0101\x02\u0672\u0673\x07\u020A" +
		"\x02\x02\u0673\u0675\x05\u01FA\xFE\x02\u0674\u0676\x05Z.\x02\u0675\u0674" +
		"\x03\x02\x02\x02\u0675\u0676\x03\x02\x02\x02\u0676\u0680\x03\x02\x02\x02" +
		"\u0677\u0679\x07\x9E\x02\x02\u0678\u067A\x07\u03B0\x02\x02\u0679\u0678" +
		"\x03\x02\x02\x02\u0679\u067A\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02" +
		"\u067B\u067C\x07\u03B9\x02\x02\u067C\u067D\x05\u021A\u010E\x02\u067D\u067E" +
		"\x07\u03BA\x02\x02\u067E\u0680\x03\x02\x02\x02\u067F\u05F3\x03\x02\x02" +
		"\x02\u067F\u05F8\x03\x02\x02\x02\u067F\u05FD\x03\x02\x02\x02\u067F\u0603" +
		"\x03\x02\x02\x02\u067F\u060E\x03\x02\x02\x02\u067F\u0614\x03\x02\x02\x02" +
		"\u067F\u061B\x03\x02\x02\x02\u067F\u0620\x03\x02\x02\x02\u067F\u0625\x03" +
		"\x02\x02\x02\u067F\u062A\x03\x02\x02\x02\u067F\u0630\x03\x02\x02\x02\u067F" +
		"\u0635\x03\x02\x02\x02\u067F\u063A\x03\x02\x02\x02\u067F\u0640\x03\x02" +
		"\x02\x02\u067F\u0645\x03\x02\x02\x02\u067F\u064A\x03\x02\x02\x02\u067F" +
		"\u064F\x03\x02\x02\x02\u067F\u0654\x03\x02\x02\x02\u067F\u0659\x03\x02" +
		"\x02\x02\u067F\u065E\x03\x02\x02\x02\u067F\u0663\x03\x02\x02\x02\u067F" +
		"\u0668\x03\x02\x02\x02\u067F\u066D\x03\x02\x02\x02\u067F\u0672\x03\x02" +
		"\x02\x02\u067F\u0677\x03\x02\x02\x02\u0680Y\x03\x02\x02\x02\u0681\u0682" +
		"\x07\u0201\x02\x02\u0682\u0683\t\x12\x02\x02\u0683[\x03\x02\x02\x02\u0684" +
		"\u0685\x07r\x02\x02\u0685\u0686\x07\x13\x02\x02\u0686\u0689\x05^0\x02" +
		"\u0687\u0688\x07\u01B5\x02\x02\u0688\u068A\x05\u0200\u0101\x02\u0689\u0687" +
		"\x03\x02\x02\x02\u0689\u068A\x03\x02\x02\x02\u068A\u0692\x03\x02\x02\x02" +
		"\u068B\u068C\x07\u0205\x02\x02\u068C\u068D\x07\x13\x02\x02\u068D\u0690" +
		"\x05`1\x02\u068E\u068F\x07\u0206\x02\x02\u068F\u0691\x05\u0200\u0101\x02" +
		"\u0690\u068E\x03\x02\x02\x02\u0690\u0691\x03\x02\x02\x02\u0691\u0693\x03" +
		"\x02\x02\x02\u0692\u068B\x03\x02\x02\x02\u0692\u0693\x03\x02\x02\x02\u0693" +
		"\u069F\x03\x02\x02\x02\u0694\u0695\x07\u03B9\x02\x02\u0695\u069A\x05b" +
		"2\x02\u0696\u0697\x07\u03BB\x02\x02\u0697\u0699\x05b2\x02\u0698\u0696" +
		"\x03\x02\x02\x02\u0699\u069C\x03\x02\x02\x02\u069A\u0698\x03\x02\x02\x02" +
		"\u069A\u069B\x03\x02\x02\x02\u069B\u069D\x03\x02\x02\x02\u069C\u069A\x03" +
		"\x02\x02\x02\u069D\u069E\x07\u03BA\x02\x02\u069E\u06A0\x03\x02\x02\x02" +
		"\u069F\u0694\x03\x02\x02\x02\u069F\u06A0\x03\x02\x02\x02\u06A0]\x03\x02" +
		"\x02\x02\u06A1\u06A3\x07Z\x02\x02\u06A2\u06A1\x03\x02\x02\x02\u06A2\u06A3" +
		"\x03\x02\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\u06A5\x07\u015B\x02" +
		"\x02\u06A5\u06A6\x07\u03B9\x02\x02\u06A6\u06A7\x05\u0246\u0124";
	private static readonly _serializedATNSegment5: string =
		"\x02\u06A7\u06A8\x07\u03BA\x02\x02\u06A8\u06CF\x03\x02\x02\x02\u06A9\u06AB" +
		"\x07Z\x02\x02\u06AA\u06A9\x03\x02\x02\x02\u06AA\u06AB\x03\x02\x02\x02" +
		"\u06AB\u06AC\x03\x02\x02\x02\u06AC\u06B0\x07R\x02\x02\u06AD\u06AE\x07" +
		"\xFE\x02\x02\u06AE\u06AF\x07\u03B0\x02\x02\u06AF\u06B1\t\x1B\x02\x02\u06B0" +
		"\u06AD\x03\x02\x02\x02\u06B0\u06B1\x03\x02\x02\x02\u06B1\u06B2\x03\x02" +
		"\x02\x02\u06B2\u06B3\x07\u03B9\x02\x02\u06B3\u06B4\x05\u0218\u010D\x02" +
		"\u06B4\u06B5\x07\u03BA\x02\x02\u06B5\u06CF\x03\x02\x02\x02\u06B6\u06C0" +
		"\x07v\x02\x02\u06B7\u06B8\x07\u03B9\x02\x02\u06B8\u06B9\x05\u0246\u0124" +
		"\x02\u06B9\u06BA\x07\u03BA\x02\x02\u06BA\u06C1\x03\x02\x02\x02\u06BB\u06BC" +
		"\x07\u0118\x02\x02\u06BC\u06BD\x07\u03B9\x02\x02\u06BD\u06BE\x05\u0218" +
		"\u010D\x02\u06BE\u06BF\x07\u03BA\x02\x02\u06BF\u06C1\x03\x02\x02\x02\u06C0" +
		"\u06B7\x03\x02\x02\x02\u06C0\u06BB\x03\x02\x02\x02\u06C1\u06CF\x03\x02" +
		"\x02\x02\u06C2\u06CC\x07\u0175\x02\x02\u06C3\u06C4\x07\u03B9\x02\x02\u06C4" +
		"\u06C5\x05\u0246\u0124\x02\u06C5\u06C6\x07\u03BA\x02\x02\u06C6\u06CD\x03" +
		"\x02\x02\x02\u06C7\u06C8\x07\u0118\x02\x02\u06C8\u06C9\x07\u03B9\x02\x02" +
		"\u06C9\u06CA\x05\u0218\u010D\x02\u06CA\u06CB\x07\u03BA\x02\x02\u06CB\u06CD" +
		"\x03\x02\x02\x02\u06CC\u06C3\x03\x02\x02\x02\u06CC\u06C7\x03\x02\x02\x02" +
		"\u06CD\u06CF\x03\x02\x02\x02\u06CE\u06A2\x03\x02\x02\x02\u06CE\u06AA\x03" +
		"\x02\x02\x02\u06CE\u06B6\x03\x02\x02\x02\u06CE\u06C2\x03\x02\x02\x02\u06CF" +
		"_\x03\x02\x02\x02\u06D0\u06D2\x07Z\x02\x02\u06D1\u06D0\x03\x02\x02\x02" +
		"\u06D1\u06D2\x03\x02\x02\x02\u06D2\u06D3\x03\x02\x02\x02\u06D3\u06D4\x07" +
		"\u015B\x02\x02\u06D4\u06D5\x07\u03B9\x02\x02\u06D5\u06D6\x05\u0246\u0124" +
		"\x02\u06D6\u06D7\x07\u03BA\x02\x02\u06D7\u06E6\x03\x02\x02\x02\u06D8\u06DA" +
		"\x07Z\x02\x02\u06D9\u06D8\x03\x02\x02\x02\u06D9\u06DA\x03\x02\x02\x02" +
		"\u06DA\u06DB\x03\x02\x02\x02\u06DB\u06DF\x07R\x02\x02\u06DC\u06DD\x07" +
		"\xFE\x02\x02\u06DD\u06DE\x07\u03B0\x02\x02\u06DE\u06E0\t\x1B\x02\x02\u06DF" +
		"\u06DC\x03\x02\x02\x02\u06DF\u06E0\x03\x02\x02\x02\u06E0\u06E1\x03\x02" +
		"\x02\x02\u06E1\u06E2\x07\u03B9\x02\x02\u06E2\u06E3\x05\u0218\u010D\x02" +
		"\u06E3\u06E4\x07\u03BA\x02\x02\u06E4\u06E6\x03\x02\x02\x02\u06E5\u06D1" +
		"\x03\x02\x02\x02\u06E5\u06D9\x03\x02\x02\x02\u06E6a\x03\x02\x02\x02\u06E7" +
		"\u06E8\x07r\x02\x02\u06E8\u06E9\x05\u01FA\xFE\x02\u06E9\u06EA\x07\xA6" +
		"\x02\x02\u06EA\u06EB\x07\u0173\x02\x02\u06EB\u06EC\x07\u020D\x02\x02\u06EC" +
		"\u06ED\x07\u03B9\x02\x02\u06ED\u06F2\x05d3\x02\u06EE\u06EF\x07\u03BB\x02" +
		"\x02\u06EF\u06F1\x05d3\x02\u06F0\u06EE\x03\x02\x02\x02\u06F1\u06F4\x03" +
		"\x02\x02\x02\u06F2\u06F0\x03\x02\x02\x02\u06F2\u06F3\x03\x02\x02\x02\u06F3" +
		"\u06F5\x03\x02\x02\x02\u06F4\u06F2\x03\x02\x02\x02\u06F5\u06F9\x07\u03BA" +
		"\x02\x02\u06F6\u06F8\x05j6\x02\u06F7\u06F6\x03\x02\x02\x02\u06F8\u06FB" +
		"\x03\x02\x02\x02\u06F9\u06F7\x03\x02\x02\x02\u06F9\u06FA\x03\x02\x02\x02" +
		"\u06FA\u0704\x03\x02\x02\x02\u06FB\u06F9\x03\x02\x02\x02\u06FC\u0701\x05" +
		"h5\x02\u06FD\u06FE\x07\u03BB\x02\x02\u06FE\u0700\x05h5\x02\u06FF\u06FD" +
		"\x03\x02\x02\x02\u0700\u0703\x03\x02\x02\x02\u0701\u06FF\x03\x02\x02\x02" +
		"\u0701\u0702\x03\x02\x02\x02\u0702\u0705\x03\x02\x02\x02\u0703\u0701\x03" +
		"\x02\x02\x02\u0704\u06FC\x03\x02\x02\x02\u0704\u0705\x03\x02\x02\x02\u0705" +
		"\u0755\x03\x02\x02\x02\u0706\u0707\x07r\x02\x02\u0707\u0708\x05\u01FA" +
		"\xFE\x02\u0708\u0709\x07\xA6\x02\x02\u0709\u070A\x07G\x02\x02\u070A\u070B" +
		"\x07\u03B9\x02\x02\u070B\u0710\x05d3\x02\u070C\u070D\x07\u03BB\x02\x02" +
		"\u070D\u070F\x05d3\x02\u070E\u070C\x03\x02\x02\x02\u070F\u0712\x03\x02" +
		"\x02\x02\u0710\u070E\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02\u0711" +
		"\u0713\x03\x02\x02\x02\u0712\u0710\x03\x02\x02\x02\u0713\u0717\x07\u03BA" +
		"\x02\x02\u0714\u0716\x05j6\x02\u0715\u0714\x03\x02\x02\x02\u0716\u0719" +
		"\x03\x02\x02\x02\u0717\u0715\x03\x02\x02\x02\u0717\u0718\x03\x02\x02\x02" +
		"\u0718\u0722\x03\x02\x02\x02\u0719\u0717\x03\x02\x02\x02\u071A\u071F\x05" +
		"h5\x02\u071B\u071C\x07\u03BB\x02\x02\u071C\u071E\x05h5\x02\u071D\u071B" +
		"\x03\x02\x02\x02\u071E\u0721\x03\x02\x02\x02\u071F\u071D\x03\x02\x02\x02" +
		"\u071F\u0720\x03\x02\x02\x02\u0720\u0723\x03\x02\x02\x02\u0721\u071F\x03" +
		"\x02\x02\x02\u0722\u071A\x03\x02\x02\x02\u0722\u0723\x03\x02\x02\x02\u0723" +
		"\u0755\x03\x02\x02\x02\u0724\u0725\x07r\x02\x02\u0725\u0726\x05\u01FA" +
		"\xFE\x02\u0726\u0727\x07\xA6\x02\x02\u0727\u0728\x07G\x02\x02\u0728\u0729" +
		"\x07\u03B9\x02\x02\u0729\u072E\x05f4\x02\u072A\u072B\x07\u03BB\x02\x02" +
		"\u072B\u072D\x05f4\x02\u072C\u072A\x03\x02\x02\x02\u072D\u0730\x03\x02" +
		"\x02\x02\u072E\u072C\x03\x02\x02\x02\u072E\u072F\x03\x02\x02\x02\u072F" +
		"\u0731\x03\x02\x02\x02\u0730\u072E\x03\x02\x02\x02\u0731\u0735\x07\u03BA" +
		"\x02\x02\u0732\u0734\x05j6\x02\u0733\u0732\x03\x02\x02\x02\u0734\u0737" +
		"\x03\x02\x02\x02\u0735\u0733\x03\x02\x02\x02\u0735\u0736\x03\x02\x02\x02" +
		"\u0736\u0740\x03\x02\x02\x02\u0737\u0735\x03\x02\x02\x02\u0738\u073D\x05" +
		"h5\x02\u0739\u073A\x07\u03BB\x02\x02\u073A\u073C\x05h5\x02\u073B\u0739" +
		"\x03\x02\x02\x02\u073C\u073F\x03\x02\x02\x02\u073D\u073B\x03\x02\x02\x02" +
		"\u073D\u073E\x03\x02\x02\x02\u073E\u0741\x03\x02\x02\x02\u073F\u073D\x03" +
		"\x02\x02\x02\u0740\u0738\x03\x02\x02\x02\u0740\u0741\x03\x02\x02\x02\u0741" +
		"\u0755\x03\x02\x02\x02\u0742\u0743\x07r\x02\x02\u0743\u0747\x05\u01FA" +
		"\xFE\x02\u0744\u0746\x05j6\x02\u0745\u0744\x03\x02\x02\x02\u0746\u0749" +
		"\x03\x02\x02\x02\u0747\u0745\x03\x02\x02\x02\u0747\u0748\x03\x02\x02\x02" +
		"\u0748\u0752\x03\x02\x02\x02\u0749\u0747\x03\x02\x02\x02\u074A\u074F\x05" +
		"h5\x02\u074B\u074C\x07\u03BB\x02\x02\u074C\u074E\x05h5\x02\u074D\u074B" +
		"\x03\x02\x02\x02\u074E\u0751\x03\x02\x02\x02\u074F\u074D\x03\x02\x02\x02" +
		"\u074F\u0750\x03\x02\x02\x02\u0750\u0753\x03\x02\x02\x02\u0751\u074F\x03" +
		"\x02\x02\x02\u0752\u074A\x03\x02\x02\x02\u0752\u0753\x03\x02\x02\x02\u0753" +
		"\u0755\x03\x02\x02\x02\u0754\u06E7\x03\x02\x02\x02\u0754\u0706\x03\x02" +
		"\x02\x02\u0754\u0724\x03\x02\x02\x02\u0754\u0742\x03\x02\x02\x02\u0755" +
		"c\x03\x02\x02\x02\u0756\u075A\x05\u020C\u0107\x02\u0757\u075A\x07c\x02" +
		"\x02\u0758\u075A\x05\u0246\u0124\x02\u0759\u0756\x03\x02\x02\x02\u0759" +
		"\u0757\x03\x02\x02\x02\u0759\u0758\x03\x02\x02\x02\u075Ae\x03\x02\x02" +
		"\x02\u075B\u075C\x07\u03B9\x02\x02\u075C\u075F\x05d3\x02\u075D\u075E\x07" +
		"\u03BB\x02\x02\u075E\u0760\x05d3\x02\u075F\u075D\x03\x02\x02\x02\u0760" +
		"\u0761\x03\x02\x02\x02\u0761\u075F\x03\x02\x02\x02\u0761\u0762\x03\x02" +
		"\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763\u0764\x07\u03BA\x02\x02\u0764" +
		"g\x03\x02\x02\x02\u0765\u0766\x07\u0205\x02\x02\u0766\u076A\x05\u01FA" +
		"\xFE\x02\u0767\u0769\x05j6\x02\u0768\u0767\x03\x02\x02\x02\u0769\u076C" +
		"\x03\x02\x02\x02\u076A\u0768\x03\x02\x02\x02\u076A\u076B\x03\x02\x02\x02" +
		"\u076Bi\x03\x02\x02\x02\u076C\u076A\x03\x02\x02\x02\u076D\u076F\x07\u0201" +
		"\x02\x02\u076E\u076D\x03\x02\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F" +
		"\u0770\x03\x02\x02\x02\u0770\u0772\x07\u013B\x02\x02\u0771\u0773\x07\u03B0" +
		"\x02\x02\u0772\u0771\x03\x02\x02\x02\u0772\u0773\x03\x02\x02\x02\u0773" +
		"\u0774\x03\x02\x02\x02\u0774\u079B\x05\u01F0\xF9\x02\u0775\u0777\x07\u011A" +
		"\x02\x02\u0776\u0778\x07\u03B0\x02\x02\u0777\u0776\x03\x02\x02\x02\u0777" +
		"\u0778\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02\u0779\u079B\x07\u03C7" +
		"\x02\x02\u077A\u077B\x07\u0128\x02\x02\u077B\u077D\x07\u012F\x02\x02\u077C" +
		"\u077E\x07\u03B0\x02\x02\u077D\u077C\x03\x02\x02\x02\u077D\u077E\x03\x02" +
		"\x02\x02\u077E\u077F\x03\x02\x02\x02\u077F\u079B\x07\u03C7\x02\x02\u0780" +
		"\u0781\x07H\x02\x02\u0781\u0783\x07\u012F\x02\x02\u0782\u0784\x07\u03B0" +
		"\x02\x02\u0783\u0782\x03\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784" +
		"\u0785\x03\x02\x02\x02\u0785\u079B\x07\u03C7\x02\x02\u0786\u0788\x07\u0190" +
		"\x02\x02\u0787\u0789\x07\u03B0\x02\x02\u0788\u0787\x03\x02\x02\x02\u0788" +
		"\u0789\x03\x02\x02\x02\u0789\u078A\x03\x02\x02\x02\u078A\u079B\x05\u0200" +
		"\u0101\x02\u078B\u078D\x07\u0198\x02\x02\u078C\u078E\x07\u03B0\x02\x02" +
		"\u078D\u078C\x03\x02\x02\x02\u078D\u078E\x03\x02\x02\x02\u078E\u078F\x03" +
		"\x02\x02\x02\u078F\u079B\x05\u0200\u0101\x02\u0790\u0792\x07\u020A\x02" +
		"\x02\u0791\u0793\x07\u03B0\x02\x02\u0792\u0791\x03\x02\x02\x02\u0792\u0793" +
		"\x03\x02\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u079B\x05\u01FA\xFE" +
		"\x02\u0795\u0797\x07\u01A3\x02\x02\u0796\u0798\x07\u03B0\x02\x02\u0797" +
		"\u0796\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798\u0799\x03\x02" +
		"\x02\x02\u0799\u079B\x05\u01FA\xFE\x02\u079A\u076E\x03\x02\x02\x02\u079A" +
		"\u0775\x03\x02\x02\x02\u079A\u077A\x03\x02\x02\x02\u079A\u0780\x03\x02" +
		"\x02\x02\u079A\u0786\x03\x02\x02\x02\u079A\u078B\x03\x02\x02\x02\u079A" +
		"\u0790\x03\x02\x02\x02\u079A\u0795\x03\x02\x02\x02\u079Bk\x03\x02\x02" +
		"\x02\u079C\u079D\x07\n\x02\x02\u079D\u079F\t\x02\x02\x02\u079E\u07A0\x05" +
		"\u01FA\xFE\x02\u079F\u079E\x03\x02\x02\x02\u079F\u07A0\x03\x02\x02\x02" +
		"\u07A0\u07A2\x03\x02\x02\x02\u07A1\u07A3\x05,\x17\x02\u07A2\u07A1\x03" +
		"\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A2\x03\x02\x02\x02\u07A4" +
		"\u07A5\x03\x02\x02\x02\u07A5\u07AF\x03\x02\x02\x02\u07A6\u07A7\x07\n\x02" +
		"\x02\u07A7\u07A8\t\x02\x02\x02\u07A8\u07A9\x05\u01FA\xFE\x02\u07A9\u07AA" +
		"\x07\u0218\x02\x02\u07AA\u07AB\x07\u0128\x02\x02\u07AB\u07AC\x07\u012F" +
		"\x02\x02\u07AC\u07AD\x07\u019D\x02\x02\u07AD\u07AF\x03\x02\x02\x02\u07AE" +
		"\u079C\x03\x02\x02\x02\u07AE\u07A6\x03\x02\x02\x02\u07AFm\x03\x02\x02" +
		"\x02\u07B0\u07B2\x07\n\x02\x02\u07B1\u07B3\x05.\x18\x02\u07B2\u07B1\x03" +
		"\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B4\x03\x02\x02\x02\u07B4" +
		"\u07B5\x07\u0141\x02\x02\u07B5\u07B9\x05\u01E0\xF1\x02\u07B6\u07B7\x07" +
		"i\x02\x02\u07B7\u07B8\x07\u01E3\x02\x02\u07B8\u07BA\x050\x19\x02\u07B9" +
		"\u07B6\x03\x02\x02\x02\u07B9\u07BA\x03\x02\x02\x02\u07BA\u07C1\x03\x02" +
		"\x02\x02\u07BB\u07BC\x07i\x02\x02\u07BC\u07BE\x07\u011D\x02\x02\u07BD" +
		"\u07BF\x07f\x02\x02\u07BE\u07BD\x03\x02\x02\x02\u07BE\u07BF\x03\x02\x02" +
		"\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07C2\x07\u01BE\x02\x02\u07C1\u07BB" +
		"\x03\x02\x02\x02\u07C1\u07C2\x03\x02\x02\x02\u07C2\u07C6\x03\x02\x02\x02" +
		"\u07C3\u07C4\x07|\x02\x02\u07C4\u07C5\x07\x99\x02\x02\u07C5\u07C7\x05" +
		"\u01E0\xF1\x02\u07C6\u07C3\x03\x02\x02\x02\u07C6\u07C7\x03\x02\x02\x02" +
		"\u07C7\u07C9\x03\x02\x02\x02\u07C8\u07CA\x058\x1D\x02\u07C9\u07C8\x03" +
		"\x02\x02\x02\u07C9\u07CA\x03\x02\x02\x02\u07CA\u07CD\x03\x02\x02\x02\u07CB" +
		"\u07CC\x07\u011A\x02\x02\u07CC\u07CE\x07\u03C7\x02\x02\u07CD\u07CB\x03" +
		"\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE\u07D1\x03\x02\x02\x02\u07CF" +
		"\u07D0\x07\u0133\x02\x02\u07D0\u07D2\x05\u0152\xAA\x02\u07D1\u07CF\x03" +
		"\x02\x02\x02\u07D1\u07D2\x03\x02\x02\x02\u07D2o\x03\x02\x02\x02\u07D3" +
		"\u07D4\x07\n\x02\x02\u07D4\u07D5\x07\u0155\x02\x02\u07D5\u07D9\x05\u01E0" +
		"\xF1\x02\u07D6\u07D8\x05B\"\x02\u07D7\u07D6\x03\x02\x02\x02\u07D8\u07DB" +
		"\x03\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02" +
		"\u07DAq\x03\x02\x02\x02\u07DB\u07D9\x03\x02\x02\x02\u07DC\u07DD\x07\n" +
		"\x02\x02\u07DD\u07DE\x07\u0167\x02\x02\u07DE\u07DF\x07\u01DE\x02\x02\u07DF" +
		"\u07E0\x07\u026B\x02\x02\u07E0\u07E1\x07\u0179\x02\x02\u07E1\u07E2\x07" +
		"R\x02\x02\u07E2s\x03\x02\x02\x02\u07E3\u07E4\x07\n\x02\x02\u07E4\u07E5" +
		"\x07\u0177\x02\x02\u07E5\u07E6\x07B\x02\x02\u07E6\u07E7\x05\u01FA\xFE" +
		"\x02\u07E7\u07E8\x07\b\x02\x02\u07E8\u07E9\x07\u0213\x02\x02\u07E9\u07EF" +
		"\x07\u03C7\x02\x02\u07EA\u07EC\x07\u0163\x02\x02\u07EB\u07ED\x07\u03B0" +
		"\x02\x02\u07EC\u07EB\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED" +
		"\u07EE\x03\x02\x02\x02\u07EE\u07F0\x05\u0202\u0102\x02\u07EF\u07EA\x03" +
		"\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07F2\x03\x02\x02\x02\u07F1" +
		"\u07F3\x07\u0221\x02\x02\u07F2\u07F1\x03\x02\x02\x02\u07F2\u07F3\x03\x02" +
		"\x02\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4\u07F6\x07\u013B\x02\x02\u07F5" +
		"\u07F7\x07\u03B0\x02\x02\u07F6\u07F5\x03\x02\x02\x02\u07F6\u07F7\x03\x02" +
		"\x02\x02\u07F7\u07F8\x03\x02\x02\x02\u07F8\u07F9\x05\u01F0\xF9\x02\u07F9" +
		"u\x03\x02\x02\x02\u07FA\u07FB\x07\n\x02\x02\u07FB\u07FC\x07t\x02\x02\u07FC" +
		"\u0800\x05\u01E0\xF1\x02\u07FD\u07FF\x05B\"\x02\u07FE\u07FD\x03\x02\x02" +
		"\x02\u07FF\u0802\x03\x02\x02\x02\u0800\u07FE\x03\x02\x02\x02\u0800\u0801" +
		"\x03\x02\x02\x02\u0801w\x03\x02\x02\x02\u0802\u0800\x03\x02\x02\x02\u0803" +
		"\u0804\x07\n\x02\x02\u0804\u0805\x07\u01E5\x02\x02\u0805\u0806\x05\u01FA" +
		"\xFE\x02\u0806\u0807\x07\u01AE\x02\x02\u0807\u0808\x07\u03B9\x02\x02\u0808" +
		"\u080D\x05D#\x02\u0809\u080A\x07\u03BB\x02\x02\u080A\u080C\x05D#\x02\u080B" +
		"\u0809\x03\x02\x02\x02\u080C\u080F\x03\x02\x02\x02\u080D\u080B\x03\x02" +
		"\x02\x02\u080D\u080E\x03\x02\x02\x02\u080E\u0810\x03\x02\x02\x02\u080F" +
		"\u080D\x03\x02\x02\x02\u0810\u0811\x07\u03BA\x02\x02\u0811y\x03\x02\x02" +
		"\x02\u0812\u0814\x07\n\x02\x02\u0813\u0815\t\x03\x02\x02\u0814\u0813\x03" +
		"\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0817\x03\x02\x02\x02\u0816" +
		"\u0818\x07F\x02\x02\u0817\u0816\x03\x02\x02\x02\u0817\u0818\x03\x02\x02" +
		"\x02\u0818\u0819\x03\x02\x02\x02\u0819\u081A\x07\x96\x02\x02\u081A\u081B" +
		"\x05\u01E2\xF2\x02\u081B\u0820\x05\x80A\x02\u081C\u081D\x07\u03BB\x02" +
		"\x02\u081D\u081F\x05\x80A\x02\u081E\u081C\x03\x02\x02\x02\u081F\u0822" +
		"\x03\x02\x02\x02\u0820\u081E\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02" +
		"\u0821\u0824\x03\x02\x02\x02\u0822\u0820\x03\x02\x02\x02\u0823\u0825\x05" +
		"\\/\x02\u0824\u0823\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825" +
		"{\x03\x02\x02\x02\u0826\u0827\x07\n\x02\x02\u0827\u0828\x07\u020A\x02" +
		"\x02\u0828\u0829\x05\u01FA\xFE\x02\u0829\u082A\t\x1C\x02\x02\u082A\u082B" +
		"\x07\u0129\x02\x02\u082B\u082F\x07\u03C7\x02\x02\u082C\u082D\x07\u0163" +
		"\x02\x02\u082D\u082E\x07\u03B0\x02\x02\u082E\u0830\x05\u0202\u0102\x02" +
		"\u082F\u082C\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830\u0832\x03" +
		"\x02\x02\x02\u0831\u0833\x07\u0221\x02\x02\u0832\u0831\x03\x02\x02\x02" +
		"\u0832\u0833\x03\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0836\x07" +
		"\u013B\x02\x02\u0835\u0837\x07\u03B0\x02\x02\u0836\u0835\x03\x02\x02\x02" +
		"\u0836\u0837\x03\x02\x02\x02\u0837\u0838\x03\x02\x02\x02\u0838\u0839\x05" +
		"\u01F0\xF9\x02\u0839}\x03\x02\x02\x02\u083A\u083E\x07\n\x02\x02\u083B" +
		"\u083C\x07\xFE\x02\x02\u083C\u083D\x07\u03B0\x02\x02\u083D\u083F\t\f\x02" +
		"\x02\u083E\u083B\x03\x02\x02\x02\u083E\u083F\x03\x02\x02\x02\u083F\u0841" +
		"\x03\x02\x02\x02\u0840\u0842\x05.\x18\x02\u0841\u0840\x03\x02\x02\x02" +
		"\u0841\u0842\x03\x02\x02\x02\u0842\u0846\x03\x02\x02\x02\u0843\u0844\x07" +
		"\x8C\x02\x02\u0844\u0845\x07\u01E4\x02\x02\u0845\u0847\t\r\x02\x02\u0846" +
		"\u0843\x03\x02\x02\x02\u0846\u0847\x03\x02\x02\x02\u0847\u0848\x03\x02" +
		"\x02\x02\u0848\u0849\x07\u021F\x02\x02\u0849\u084E\x05\u01E0\xF1\x02\u084A" +
		"\u084B\x07\u03B9\x02\x02\u084B\u084C\x05\u0218\u010D\x02\u084C\u084D\x07" +
		"\u03BA\x02\x02\u084D\u084F\x03\x02\x02\x02\u084E\u084A\x03\x02\x02\x02" +
		"\u084E\u084F\x03\x02\x02\x02\u084F\u0850\x03\x02\x02\x02\u0850\u0851\x07" +
		"\x0E\x02\x02\u0851\u0858\x05\xAEX\x02\u0852\u0854\x07\xAA\x02\x02\u0853" +
		"\u0855\t\x0E\x02\x02\u0854\u0853\x03\x02\x02\x02\u0854\u0855\x03\x02\x02" +
		"\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0857\x07\x1A\x02\x02\u0857\u0859" +
		"\x07k\x02\x02\u0858\u0852\x03\x02\x02\x02\u0858\u0859\x03\x02\x02\x02" +
		"\u0859\x7F\x03\x02\x02\x02\u085A\u0861\x05X-\x02\u085B\u085D\x07\u03BB" +
		"\x02\x02\u085C\u085B\x03\x02\x02\x02\u085C\u085D\x03\x02\x02\x02\u085D" +
		"\u085E\x03\x02\x02\x02\u085E\u0860\x05X-\x02\u085F\u085C\x03\x02\x02\x02" +
		"\u0860\u0863\x03\x02\x02\x02\u0861\u085F\x03\x02\x02\x02\u0861\u0862\x03" +
		"\x02\x02\x02\u0862\u09B5\x03\x02\x02\x02\u0863\u0861\x03\x02\x02\x02\u0864" +
		"\u0866\x07\b\x02\x02\u0865\u0867\x07\x1C\x02\x02\u0866\u0865\x03\x02\x02" +
		"\x02\u0866\u0867\x03\x02\x02\x02\u0867\u0868\x03\x02\x02\x02\u0868\u0869" +
		"\x05\u01FA\xFE\x02\u0869\u086D\x05J&\x02\u086A\u086E\x07\u014F\x02\x02" +
		"\u086B\u086C\x07\xFC\x02\x02\u086C\u086E\x05\u01FA\xFE\x02\u086D\u086A" +
		"\x03\x02\x02\x02\u086D\u086B\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02" +
		"\u086E\u09B5\x03\x02\x02\x02\u086F\u0871\x07\b\x02\x02\u0870\u0872\x07" +
		"\x1C\x02\x02\u0871\u0870\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872" +
		"\u0873\x03\x02\x02\x02\u0873\u0874\x07\u03B9\x02\x02\u0874\u0875\x05\u01FA" +
		"\xFE\x02\u0875\u087C\x05J&\x02\u0876\u0877\x07\u03BB\x02\x02\u0877\u0878" +
		"\x05\u01FA\xFE\x02\u0878\u0879\x05J&\x02\u0879\u087B\x03\x02\x02\x02\u087A" +
		"\u0876\x03\x02\x02\x02\u087B\u087E\x03\x02\x02\x02\u087C\u087A\x03\x02" +
		"\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D\u087F\x03\x02\x02\x02\u087E" +
		"\u087C\x03\x02\x02\x02\u087F\u0880\x07\u03BA\x02\x02\u0880\u09B5\x03\x02" +
		"\x02\x02\u0881\u0882\x07\b\x02\x02\u0882\u0884\t\x14\x02\x02\u0883\u0885" +
		"\x05\u01FA\xFE\x02\u0884\u0883\x03\x02\x02\x02\u0884\u0885\x03\x02\x02" +
		"\x02\u0885\u0887\x03\x02\x02\x02\u0886\u0888\x05:\x1E\x02\u0887\u0886" +
		"\x03\x02\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u0889\x03\x02\x02\x02" +
		"\u0889\u088D\x05\u021C\u010F\x02\u088A\u088C\x05<\x1F\x02\u088B\u088A" +
		"\x03\x02\x02\x02\u088C\u088F\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02" +
		"\u088D\u088E\x03\x02\x02\x02\u088E\u09B5\x03\x02\x02\x02\u088F\u088D\x03" +
		"\x02\x02\x02\u0890\u0895\x07\b\x02\x02\u0891\u0893\x07\x1E\x02\x02\u0892" +
		"\u0894\x05\u01FA\xFE\x02\u0893\u0892\x03\x02\x02\x02\u0893\u0894\x03\x02" +
		"\x02\x02\u0894\u0896\x03\x02\x02\x02\u0895\u0891\x03\x02\x02\x02\u0895" +
		"\u0896\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u0898\x07s\x02" +
		"\x02\u0898\u089A\x07R\x02\x02\u0899\u089B\x05:\x1E\x02\u089A\u0899\x03" +
		"\x02\x02\x02\u089A\u089B\x03\x02\x02\x02\u089B\u089C\x03\x02\x02\x02\u089C" +
		"\u08A0\x05\u021C\u010F\x02\u089D\u089F\x05<\x1F\x02\u089E\u089D\x03\x02" +
		"\x02\x02\u089F\u08A2\x03\x02\x02\x02\u08A0\u089E\x03\x02\x02\x02\u08A0" +
		"\u08A1\x03\x02\x02\x02\u08A1\u09B5\x03\x02\x02\x02\u08A2\u08A0\x03\x02" +
		"\x02\x02\u08A3\u08A8\x07\b\x02\x02\u08A4\u08A6\x07\x1E\x02\x02\u08A5\u08A7" +
		"\x05\u01FA\xFE\x02\u08A6\u08A5\x03\x02\x02\x02\u08A6\u08A7\x03\x02\x02" +
		"\x02\u08A7\u08A9\x03\x02\x02\x02\u08A8\u08A4\x03\x02\x02\x02\u08A8\u08A9" +
		"\x03\x02\x02\x02\u08A9\u08AA\x03\x02\x02\x02\u08AA\u08AC\x07\x9F\x02\x02" +
		"\u08AB\u08AD\t\x14\x02\x02\u08AC\u08AB\x03\x02\x02\x02\u08AC\u08AD\x03" +
		"\x02\x02\x02\u08AD\u08AF\x03\x02\x02\x02\u08AE\u08B0\x05\u01FA\xFE\x02" +
		"\u08AF\u08AE\x03\x02\x02\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0\u08B2\x03" +
		"\x02\x02\x02\u08B1\u08B3\x05:\x1E\x02\u08B2\u08B1\x03\x02\x02\x02\u08B2" +
		"\u08B3\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02\x02\u08B4\u08B8\x05\u021C" +
		"\u010F\x02\u08B5\u08B7\x05<\x1F\x02\u08B6\u08B5\x03\x02\x02\x02\u08B7" +
		"\u08BA\x03\x02\x02\x02\u08B8\u08B6\x03\x02\x02\x02\u08B8\u08B9\x03\x02" +
		"\x02\x02\u08B9\u09B5\x03\x02\x02\x02\u08BA\u08B8\x03\x02\x02\x02\u08BB" +
		"\u08BC\x07\b\x02\x02\u08BC\u08BE\t\x16\x02\x02\u08BD\u08BF\t\x14\x02\x02" +
		"\u08BE\u08BD\x03\x02\x02\x02\u08BE\u08BF\x03\x02\x02\x02\u08BF\u08C1\x03" +
		"\x02\x02\x02\u08C0\u08C2\x05\u01FA\xFE\x02\u08C1\u08C0\x03\x02\x02\x02" +
		"\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C3\x03\x02\x02\x02\u08C3\u08C7\x05" +
		"\u021C\u010F\x02\u08C4\u08C6\x05<\x1F\x02\u08C5\u08C4\x03\x02\x02\x02" +
		"\u08C6\u08C9\x03\x02\x02\x02\u08C7\u08C5\x03\x02\x02\x02\u08C7\u08C8\x03" +
		"\x02\x02\x02\u08C8\u09B5\x03\x02\x02\x02\u08C9\u08C7\x03\x02\x02\x02\u08CA" +
		"\u08CF\x07\b\x02\x02\u08CB\u08CD\x07\x1E\x02\x02\u08CC\u08CE\x05\u01FA" +
		"\xFE\x02\u08CD\u08CC\x03\x02\x02\x02\u08CD\u08CE\x03\x02\x02\x02\u08CE" +
		"\u08D0\x03\x02\x02\x02\u08CF\u08CB\x03\x02\x02\x02\u08CF\u08D0\x03\x02" +
		"\x02\x02\u08D0\u08D1\x03\x02\x02\x02\u08D1\u08D2\x07=\x02\x02\u08D2\u08D4" +
		"\x07R\x02\x02\u08D3\u08D5\x05\u01FA\xFE\x02\u08D4\u08D3\x03\x02\x02\x02" +
		"\u08D4\u08D5\x03\x02\x02\x02\u08D5\u08D6\x03\x02\x02\x02\u08D6\u08D7\x05" +
		"\u021C\u010F\x02\u08D7\u08D8\x05P)\x02\u08D8\u09B5\x03\x02\x02\x02\u08D9" +
		"\u08DE\x07\b\x02\x02\u08DA\u08DC\x07\x1E\x02\x02\u08DB\u08DD\x05\u01FA" +
		"\xFE\x02\u08DC\u08DB\x03\x02\x02\x02\u08DC\u08DD\x03\x02\x02\x02\u08DD" +
		"\u08DF\x03\x02\x02\x02\u08DE\u08DA\x03\x02\x02\x02\u08DE\u08DF\x03\x02" +
		"\x02\x02\u08DF\u08E0\x03\x02\x02\x02\u08E0\u08E1\x07\x1A\x02\x02\u08E1" +
		"\u08E2\x07\u03B9\x02\x02\u08E2\u08E3\x05\u0246\u0124\x02\u08E3\u08E4\x07" +
		"\u03BA\x02\x02\u08E4\u09B5\x03\x02\x02\x02\u08E5\u08E7\x07\xFE\x02\x02" +
		"\u08E6\u08E8\x07\u03B0\x02\x02\u08E7\u08E6\x03\x02\x02\x02\u08E7\u08E8" +
		"\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u09B5\t\x05\x02\x02" +
		"\u08EA\u08EC\x07\n\x02\x02\u08EB\u08ED\x07\x1C\x02\x02\u08EC\u08EB\x03" +
		"\x02\x02\x02\u08EC\u08ED\x03\x02\x02\x02\u08ED\u08EE\x03\x02\x02\x02\u08EE" +
		"\u08F4\x05\u01FA\xFE\x02\u08EF\u08F0\x07\x88\x02\x02\u08F0\u08F1\x07(" +
		"\x02\x02\u08F1\u08F5\x05\u0228\u0115\x02\u08F2\u08F3\x070\x02\x02\u08F3" +
		"\u08F5\x07(\x02\x02\u08F4\u08EF\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02" +
		"\x02\u08F5\u09B5\x03\x02\x02\x02\u08F6\u08F8\x07\x18\x02\x02\u08F7\u08F9" +
		"\x07\x1C\x02\x02\u08F8\u08F7\x03\x02\x02\x02\u08F8\u08F9\x03\x02\x02\x02" +
		"\u08F9\u08FA\x03\x02\x02\x02\u08FA\u08FB\x05\u01FA\xFE\x02\u08FB\u08FC" +
		"\x05\u01FA\xFE\x02\u08FC\u0900\x05J&\x02\u08FD\u0901\x07\u014F\x02\x02" +
		"\u08FE\u08FF\x07\xFC\x02\x02\u08FF\u0901\x05\u01FA\xFE\x02\u0900\u08FD" +
		"\x03\x02\x02\x02\u0900\u08FE\x03\x02\x02\x02\u0900\u0901\x03\x02\x02\x02" +
		"\u0901\u09B5\x03\x02\x02\x02\u0902\u0903\x07|\x02\x02\u0903\u0904\x07" +
		"\x1C\x02\x02\u0904\u0905\x05\u01FA\xFE\x02\u0905\u0906\x07\x99\x02\x02" +
		"\u0906\u0907\x05\u01FA\xFE\x02\u0907\u09B5\x03\x02\x02\x02\u0908\u090A" +
		"\x07]\x02\x02\u0909\u090B\x07\u03B0\x02\x02\u090A\u0909\x03\x02\x02\x02" +
		"\u090A\u090B\x03\x02\x02\x02\u090B\u090C\x03\x02\x02\x02\u090C\u09B5\t" +
		"\x06\x02\x02\u090D\u090F\x07\u019A\x02\x02\u090E\u0910\x07\x1C\x02\x02" +
		"\u090F\u090E\x03\x02\x02\x02\u090F\u0910\x03\x02\x02\x02\u0910\u0911\x03" +
		"\x02\x02\x02\u0911\u0912\x05\u01FA\xFE\x02\u0912\u0916\x05J&\x02\u0913" +
		"\u0917\x07\u014F\x02\x02\u0914\u0915\x07\xFC\x02\x02\u0915\u0917\x05\u01FA" +
		"\xFE\x02\u0916\u0913\x03\x02\x02\x02\u0916\u0914\x03\x02\x02\x02\u0916" +
		"\u0917\x03\x02\x02\x02\u0917\u09B5\x03\x02\x02\x02\u0918\u091A\x070\x02" +
		"\x02\u0919\u091B\x07\x1C\x02\x02\u091A\u0919\x03\x02\x02\x02\u091A\u091B" +
		"\x03\x02\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u09B5\x05\u01FA\xFE" +
		"\x02\u091D\u091E\x070\x02\x02\u091E\u091F\x07s\x02\x02\u091F\u09B5\x07" +
		"R\x02\x02\u0920\u0921\x070\x02\x02\u0921\u0922\t\x14\x02\x02\u0922\u09B5" +
		"\x05\u01FA\xFE\x02\u0923\u0924\x070\x02\x02\u0924\u0925\x07=\x02\x02\u0925" +
		"\u0926\x07R\x02\x02\u0926\u09B5\x05\u01FA\xFE\x02\u0927\u0928\x07\u0130" +
		"\x02\x02\u0928\u09B5\x07S\x02\x02\u0929\u092A\x07\u0137\x02\x02\u092A" +
		"\u09B5\x07S\x02\x02\u092B\u092D\x07|\x02\x02\u092C\u092E\t\x1D\x02\x02" +
		"\u092D\u092C\x03\x02\x02\x02\u092D\u092E\x03\x02\x02\x02\u092E\u0931\x03" +
		"\x02\x02\x02\u092F\u0932\x05\u01FA\xFE\x02\u0930\u0932\x05\u01E0\xF1\x02" +
		"\u0931\u092F\x03\x02\x02\x02\u0931\u0930\x03\x02\x02\x02\u0932\u09B5\x03" +
		"\x02\x02\x02\u0933\u0934\x07n\x02\x02\u0934\u0935\x07\x13\x02\x02\u0935" +
		"\u09B5\x05\u0218\u010D\x02\u0936\u0937\x07 \x02\x02\u0937\u0938\x07\x99" +
		"\x02\x02\u0938\u0939\x07\x19\x02\x02\u0939\u093A\x07\x88\x02\x02\u093A" +
		"\u093D\x05\u01EC\xF7\x02\u093B\u093C\x07\x1B\x02\x02\u093C\u093E\x05\u01EE" +
		"\xF8\x02\u093D\u093B\x03\x02\x02\x02\u093D\u093E\x03\x02\x02\x02\u093E" +
		"\u09B5\x03\x02\x02\x02\u093F\u0941\x07(\x02\x02\u0940\u093F\x03\x02\x02" +
		"\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0942\x03\x02\x02\x02\u0942\u0943" +
		"\x07\x19\x02\x02\u0943\u0944\x07\x88\x02\x02\u0944\u0945\x07\u03B0\x02" +
		"\x02\u0945\u0949\x05\u01EC\xF7\x02\u0946\u0947\x07\x1B\x02\x02\u0947\u0948" +
		"\x07\u03B0\x02\x02\u0948\u094A\x05\u01EE\xF8\x02\u0949\u0946\x03\x02\x02" +
		"\x02\u0949\u094A\x03\x02\x02\x02\u094A\u09B5\x03\x02\x02\x02\u094B\u094C" +
		"\x07\u0131\x02\x02\u094C\u09B5\x07\u020A\x02\x02\u094D\u094E\x07\u0161" +
		"\x02\x02\u094E\u09B5\x07\u020A\x02\x02\u094F\u09B5\x07<\x02\x02\u0950" +
		"\u0951\t\x1E\x02\x02\u0951\u09B5\x07\u021C\x02\x02\u0952\u0953\x07\b\x02" +
		"\x02\u0953\u0954\x07r\x02\x02\u0954\u0955\x07\u03B9\x02\x02\u0955\u095A" +
		"\x05b2\x02\u0956\u0957\x07\u03BB\x02\x02\u0957\u0959\x05b2\x02\u0958\u0956" +
		"\x03\x02\x02\x02\u0959\u095C\x03\x02\x02\x02\u095A\u0958\x03\x02\x02\x02" +
		"\u095A\u095B\x03\x02\x02\x02\u095B\u095D\x03\x02\x02\x02\u095C\u095A\x03" +
		"\x02\x02\x02\u095D\u095E\x07\u03BA\x02\x02\u095E\u09B5\x03\x02\x02\x02" +
		"\u095F\u0960\x070\x02\x02\u0960\u0961\x07r\x02\x02\u0961\u09B5\x05\u0218" +
		"\u010D\x02\u0962\u0963\x07\u0131\x02\x02\u0963\u0966\x07r\x02\x02\u0964" +
		"\u0967\x05\u0218\u010D\x02\u0965\u0967\x07\t\x02\x02\u0966\u0964\x03\x02" +
		"\x02\x02\u0966\u0965\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02\u0968" +
		"\u09B5\x07\u020A\x02\x02\u0969\u096A\x07\u0161\x02\x02\u096A";
	private static readonly _serializedATNSegment6: string =
		"\u096D\x07r\x02\x02\u096B\u096E\x05\u0218\u010D\x02\u096C\u096E\x07\t" +
		"\x02\x02\u096D\u096B\x03\x02\x02\x02\u096D\u096C\x03\x02\x02\x02\u096E" +
		"\u096F\x03\x02\x02\x02\u096F\u09B5\x07\u020A\x02\x02\u0970\u0971\x07\u0211" +
		"\x02\x02\u0971\u0974\x07r\x02\x02\u0972\u0975\x05\u0218\u010D\x02\u0973" +
		"\u0975\x07\t\x02\x02\u0974\u0972\x03\x02\x02\x02\u0974\u0973\x03\x02\x02" +
		"\x02\u0975\u09B5\x03\x02\x02\x02\u0976\u0977\x07\u0116\x02\x02\u0977\u0978" +
		"\x07r\x02\x02\u0978\u09B5\x05\u0200\u0101\x02\u0979\u097A\x07\u01CF\x02" +
		"\x02\u097A\u097B\x07r\x02\x02\u097B\u097C\x05\u0218\u010D\x02\u097C\u097D" +
		"\x07N\x02\x02\u097D\u097E\x07\u03B9\x02\x02\u097E\u0983\x05b2\x02\u097F" +
		"\u0980\x07\u03BB\x02\x02\u0980\u0982\x05b2\x02\u0981\u097F\x03\x02\x02" +
		"\x02\u0982\u0985\x03\x02\x02\x02\u0983\u0981\x03\x02\x02\x02\u0983\u0984" +
		"\x03\x02\x02\x02\u0984\u0986\x03\x02\x02\x02\u0985\u0983\x03\x02\x02\x02" +
		"\u0986\u0987\x07\u03BA\x02\x02\u0987\u09B5\x03\x02\x02\x02\u0988\u0989" +
		"\x07\u0144\x02\x02\u0989\u098A\x07r\x02\x02\u098A\u098B\x05\u01FA\xFE" +
		"\x02\u098B\u098C\x07\xAA\x02\x02\u098C\u098D\x07\x96\x02\x02\u098D\u0990" +
		"\x05\u01E2\xF2\x02\u098E\u098F\t\x1E\x02\x02\u098F\u0991\x07\u021C\x02" +
		"\x02\u0990\u098E\x03\x02\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991\u09B5" +
		"\x03\x02\x02\x02\u0992\u0993\x07\f\x02\x02\u0993\u0996\x07r\x02\x02\u0994" +
		"\u0997\x05\u0218\u010D\x02\u0995\u0997\x07\t\x02\x02\u0996\u0994\x03\x02" +
		"\x02\x02\u0996\u0995\x03\x02\x02\x02\u0997\u09B5\x03\x02\x02\x02\u0998" +
		"\u0999\x07\x1A\x02\x02\u0999\u099C\x07r\x02\x02\u099A\u099D\x05\u0218" +
		"\u010D\x02\u099B\u099D\x07\t\x02\x02\u099C\u099A\x03\x02\x02\x02\u099C" +
		"\u099B\x03\x02\x02\x02\u099D\u09B5\x03\x02\x02\x02\u099E\u099F\x07j\x02" +
		"\x02\u099F\u09A2\x07r\x02\x02\u09A0\u09A3\x05\u0218\u010D\x02\u09A1\u09A3" +
		"\x07\t\x02\x02\u09A2\u09A0\x03\x02\x02\x02\u09A2\u09A1\x03\x02\x02\x02" +
		"\u09A3\u09B5\x03\x02\x02\x02\u09A4\u09A5\x07\u01C6\x02\x02\u09A5\u09A8" +
		"\x07r\x02\x02\u09A6\u09A9\x05\u0218\u010D\x02\u09A7\u09A9\x07\t\x02\x02" +
		"\u09A8\u09A6\x03\x02\x02\x02\u09A8\u09A7\x03\x02\x02\x02\u09A9\u09B5\x03" +
		"\x02\x02\x02\u09AA\u09AB\x07\u01D0\x02\x02\u09AB\u09AE\x07r\x02\x02\u09AC" +
		"\u09AF\x05\u0218\u010D\x02\u09AD\u09AF\x07\t\x02\x02\u09AE\u09AC\x03\x02" +
		"\x02\x02\u09AE\u09AD\x03\x02\x02\x02\u09AF\u09B5\x03\x02\x02\x02\u09B0" +
		"\u09B1\x07\u01CE\x02\x02\u09B1\u09B5\x07\u01B4\x02\x02\u09B2\u09B3\x07" +
		"\u0218\x02\x02\u09B3\u09B5\x07\u01B4\x02\x02\u09B4\u085A\x03\x02\x02\x02" +
		"\u09B4\u0864\x03\x02\x02\x02\u09B4\u086F\x03\x02\x02\x02\u09B4\u0881\x03" +
		"\x02\x02\x02\u09B4\u0890\x03\x02\x02\x02\u09B4\u08A3\x03\x02\x02\x02\u09B4" +
		"\u08BB\x03\x02\x02\x02\u09B4\u08CA\x03\x02\x02\x02\u09B4\u08D9\x03\x02" +
		"\x02\x02\u09B4\u08E5\x03\x02\x02\x02\u09B4\u08EA\x03\x02\x02\x02\u09B4" +
		"\u08F6\x03\x02\x02\x02\u09B4\u0902\x03\x02\x02\x02\u09B4\u0908\x03\x02" +
		"\x02\x02\u09B4\u090D\x03\x02\x02\x02\u09B4\u0918\x03\x02\x02\x02\u09B4" +
		"\u091D\x03\x02\x02\x02\u09B4\u0920\x03\x02\x02\x02\u09B4\u0923\x03\x02" +
		"\x02\x02\u09B4\u0927\x03\x02\x02\x02\u09B4\u0929\x03\x02\x02\x02\u09B4" +
		"\u092B\x03\x02\x02\x02\u09B4\u0933\x03\x02\x02\x02\u09B4\u0936\x03\x02" +
		"\x02\x02\u09B4\u0940\x03\x02\x02\x02\u09B4\u094B\x03\x02\x02\x02\u09B4" +
		"\u094D\x03\x02\x02\x02\u09B4\u094F\x03\x02\x02\x02\u09B4\u0950\x03\x02" +
		"\x02\x02\u09B4\u0952\x03\x02\x02\x02\u09B4\u095F\x03\x02\x02\x02\u09B4" +
		"\u0962\x03\x02\x02\x02\u09B4\u0969\x03\x02\x02\x02\u09B4\u0970\x03\x02" +
		"\x02\x02\u09B4\u0976\x03\x02\x02\x02\u09B4\u0979\x03\x02\x02\x02\u09B4" +
		"\u0988\x03\x02\x02\x02\u09B4\u0992\x03\x02\x02\x02\u09B4\u0998\x03\x02" +
		"\x02\x02\u09B4\u099E\x03\x02\x02\x02\u09B4\u09A4\x03\x02\x02\x02\u09B4" +
		"\u09AA\x03\x02\x02\x02\u09B4\u09B0\x03\x02\x02\x02\u09B4\u09B2\x03\x02" +
		"\x02\x02\u09B5\x81\x03\x02\x02\x02\u09B6\u09B7\x070\x02\x02\u09B7\u09B9" +
		"\t\x02\x02\x02\u09B8\u09BA\x05\u022E\u0118\x02\u09B9\u09B8\x03\x02\x02" +
		"\x02\u09B9\u09BA\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB\u09BC" +
		"\x05\u01FA\xFE\x02\u09BC\x83\x03\x02\x02\x02\u09BD\u09BE\x070\x02\x02" +
		"\u09BE\u09C0\x07\u0141\x02\x02\u09BF\u09C1\x05\u022E\u0118\x02\u09C0\u09BF" +
		"\x03\x02\x02\x02\u09C0\u09C1\x03\x02\x02\x02\u09C1\u09C2\x03\x02\x02\x02" +
		"\u09C2\u09C3\x05\u01E0\xF1\x02\u09C3\x85\x03\x02\x02\x02\u09C4\u09C5\x07" +
		"0\x02\x02\u09C5\u09C7\x07H\x02\x02\u09C6\u09C8\t\x03\x02\x02\u09C7\u09C6" +
		"\x03\x02\x02\x02\u09C7\u09C8\x03\x02\x02\x02\u09C8\u09C9\x03\x02\x02\x02" +
		"\u09C9\u09CA\x05\u01FA\xFE\x02\u09CA\u09CB\x07i\x02\x02\u09CB\u09D1\x05" +
		"\u01E2\xF2\x02\u09CC\u09CE\x07\xFE\x02\x02\u09CD\u09CF\x07\u03B0\x02\x02" +
		"\u09CE\u09CD\x03\x02\x02\x02\u09CE\u09CF\x03\x02\x02\x02\u09CF\u09D0\x03" +
		"\x02\x02\x02\u09D0\u09D2\t\x05\x02\x02\u09D1\u09CC\x03\x02\x02\x02\u09D1" +
		"\u09D2\x03\x02\x02\x02\u09D2\u09D8\x03\x02\x02\x02\u09D3\u09D5\x07]\x02" +
		"\x02\u09D4\u09D6\x07\u03B0\x02\x02\u09D5\u09D4\x03\x02\x02\x02\u09D5\u09D6" +
		"\x03\x02\x02\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7\u09D9\t\x06\x02\x02" +
		"\u09D8\u09D3\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02\x02\u09D9\x87\x03" +
		"\x02\x02\x02\u09DA\u09DB\x070\x02\x02\u09DB\u09DC\x07\u0177\x02\x02\u09DC" +
		"\u09DD\x07B\x02\x02\u09DD\u09DE\x05\u01FA\xFE\x02\u09DE\u09DF\x07\u013B" +
		"\x02\x02\u09DF\u09E0\x07\u03B0\x02\x02\u09E0\u09E1\x05\u01F0\xF9\x02\u09E1" +
		"\x89\x03\x02\x02\x02\u09E2\u09E3\x070\x02\x02\u09E3\u09E5\x07t\x02\x02" +
		"\u09E4\u09E6\x05\u022E\u0118\x02\u09E5\u09E4\x03\x02\x02\x02\u09E5\u09E6" +
		"\x03\x02\x02\x02\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09E8\x05\u01E0\xF1" +
		"\x02\u09E8\x8B\x03\x02\x02\x02\u09E9\u09EA\x070\x02\x02\u09EA\u09EC\x07" +
		"\u0155\x02\x02\u09EB\u09ED\x05\u022E\u0118\x02\u09EC\u09EB\x03\x02\x02" +
		"\x02\u09EC\u09ED\x03\x02\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09EF" +
		"\x05\u01E0\xF1\x02\u09EF\x8D\x03\x02\x02\x02\u09F0\u09F1\x070\x02\x02" +
		"\u09F1\u09F3\x07\u01E5\x02\x02\u09F2\u09F4\x05\u022E\u0118\x02\u09F3\u09F2" +
		"\x03\x02\x02\x02\u09F3\u09F4\x03\x02\x02\x02\u09F4\u09F5\x03\x02\x02\x02" +
		"\u09F5\u09F6\x05\u01FA\xFE\x02\u09F6\x8F\x03\x02\x02\x02\u09F7\u09F9\x07" +
		"0\x02\x02\u09F8\u09FA\x07\u020B\x02\x02\u09F9\u09F8\x03\x02\x02\x02\u09F9" +
		"\u09FA\x03\x02\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09FD\x07\x96" +
		"\x02\x02\u09FC\u09FE\x05\u022E\u0118\x02\u09FD\u09FC\x03\x02\x02\x02\u09FD" +
		"\u09FE\x03\x02\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF\u0A01\x05\u021A" +
		"\u010E\x02\u0A00\u0A02\t\x1F\x02\x02\u0A01\u0A00\x03\x02\x02\x02\u0A01" +
		"\u0A02\x03\x02\x02\x02\u0A02\x91\x03\x02\x02\x02\u0A03\u0A04\x070\x02" +
		"\x02\u0A04\u0A05\x07\u020A\x02\x02\u0A05\u0A0B\x05\u01FA\xFE\x02\u0A06" +
		"\u0A08\x07\u013B\x02\x02\u0A07\u0A09\x07\u03B0\x02\x02\u0A08\u0A07\x03" +
		"\x02\x02\x02\u0A08\u0A09\x03\x02\x02\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A" +
		"\u0A0C\x05\u01F0\xF9\x02\u0A0B\u0A06\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02" +
		"\x02\x02\u0A0C\x93\x03\x02\x02\x02\u0A0D\u0A0E\x070\x02\x02\u0A0E\u0A10" +
		"\x07\x9B\x02\x02\u0A0F\u0A11\x05\u022E\u0118\x02\u0A10\u0A0F\x03\x02\x02" +
		"\x02\u0A10\u0A11\x03\x02\x02\x02\u0A11\u0A12\x03\x02\x02\x02\u0A12\u0A13" +
		"\x05\u01E0\xF1\x02\u0A13\x95\x03\x02\x02\x02\u0A14\u0A15\x070\x02\x02" +
		"\u0A15\u0A17\x07\u021F\x02\x02\u0A16\u0A18\x05\u022E\u0118\x02\u0A17\u0A16" +
		"\x03\x02\x02\x02\u0A17\u0A18\x03\x02\x02\x02\u0A18\u0A19\x03\x02\x02\x02" +
		"\u0A19\u0A1E\x05\u01E0\xF1\x02\u0A1A\u0A1B\x07\u03BB\x02\x02\u0A1B\u0A1D" +
		"\x05\u01E0\xF1\x02\u0A1C\u0A1A\x03\x02\x02\x02\u0A1D\u0A20\x03\x02\x02" +
		"\x02\u0A1E\u0A1C\x03\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0A22" +
		"\x03\x02\x02\x02\u0A20\u0A1E\x03\x02\x02\x02\u0A21\u0A23\t\x1F\x02\x02" +
		"\u0A22\u0A21\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\x97\x03" +
		"\x02\x02\x02\u0A24\u0A25\x07|\x02\x02\u0A25\u0A26\x07\x96\x02\x02\u0A26" +
		"\u0A2B\x05\x9AN\x02\u0A27\u0A28\x07\u03BB\x02\x02\u0A28\u0A2A\x05\x9A" +
		"N\x02\u0A29\u0A27\x03\x02\x02\x02\u0A2A\u0A2D\x03\x02\x02\x02\u0A2B\u0A29" +
		"\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02\x02\u0A2C\x99\x03\x02\x02\x02" +
		"\u0A2D\u0A2B\x03\x02\x02\x02\u0A2E\u0A2F\x05\u01E2\xF2\x02\u0A2F\u0A30" +
		"\x07\x99\x02\x02\u0A30\u0A31\x05\u01E2\xF2\x02\u0A31\x9B\x03\x02\x02\x02" +
		"\u0A32\u0A34\x07\u0211\x02\x02\u0A33\u0A35\x07\x96\x02\x02\u0A34\u0A33" +
		"\x03\x02\x02\x02\u0A34\u0A35\x03\x02\x02\x02\u0A35\u0A36\x03\x02\x02\x02" +
		"\u0A36\u0A37\x05\u01E2\xF2\x02\u0A37\x9D\x03\x02\x02\x02\u0A38\u0A39\x07" +
		"\x14\x02\x02\u0A39\u0A40\x05\u01E0\xF1\x02\u0A3A\u0A3D\x07\u03B9\x02\x02" +
		"\u0A3B\u0A3E\x05\u0222\u0112\x02\u0A3C\u0A3E\x05\u021E\u0110\x02\u0A3D" +
		"\u0A3B\x03\x02\x02\x02\u0A3D\u0A3C\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02" +
		"\x02\x02\u0A3E\u0A3F\x03\x02\x02\x02\u0A3F\u0A41\x07\u03BA\x02\x02\u0A40" +
		"\u0A3A\x03\x02\x02\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41\x9F\x03\x02\x02" +
		"\x02\u0A42\u0A45\x05\xBA^\x02\u0A43\u0A45\x05\xBC_\x02\u0A44\u0A42\x03" +
		"\x02\x02\x02\u0A44\u0A43\x03\x02\x02\x02\u0A45\xA1\x03\x02\x02\x02\u0A46" +
		"\u0A47\x07\u0133\x02\x02\u0A47\u0A48\x05\u021E\u0110\x02\u0A48\xA3\x03" +
		"\x02\x02\x02\u0A49\u0A4E\x05\xBE`\x02\u0A4A\u0A4E\x05\xC0a\x02\u0A4B\u0A4E" +
		"\x05\xC2b\x02\u0A4C\u0A4E\x05\xC4c\x02\u0A4D\u0A49\x03\x02\x02\x02\u0A4D" +
		"\u0A4A\x03\x02\x02\x02\u0A4D\u0A4B\x03\x02\x02\x02\u0A4D\u0A4C\x03\x02" +
		"\x02\x02\u0A4E\xA5\x03\x02\x02\x02\u0A4F\u0A51\x07L\x02\x02\u0A50\u0A52" +
		"\t \x02\x02\u0A51\u0A50\x03\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52" +
		"\u0A54\x03\x02\x02\x02\u0A53\u0A55\x07F\x02\x02\u0A54\u0A53\x03\x02\x02" +
		"\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55\u0A57\x03\x02\x02\x02\u0A56\u0A58" +
		"\x07N\x02\x02\u0A57\u0A56\x03\x02\x02\x02\u0A57\u0A58\x03\x02\x02\x02" +
		"\u0A58\u0A59\x03\x02\x02\x02\u0A59\u0A5F\x05\u01E2\xF2\x02\u0A5A\u0A5B" +
		"\x07r\x02\x02\u0A5B\u0A5C\x07\u03B9\x02\x02\u0A5C\u0A5D\x05\u0218\u010D" +
		"\x02\u0A5D\u0A5E\x07\u03BA\x02\x02\u0A5E\u0A60\x03\x02\x02\x02\u0A5F\u0A5A" +
		"\x03\x02\x02\x02\u0A5F\u0A60\x03\x02\x02\x02\u0A60\u0A71\x03\x02\x02\x02" +
		"\u0A61\u0A62\x07\u03B9\x02\x02\u0A62\u0A63\x05\u0218\u010D\x02\u0A63\u0A64" +
		"\x07\u03BA\x02\x02\u0A64\u0A66\x03\x02\x02\x02\u0A65\u0A61\x03\x02\x02" +
		"\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A67\x03\x02\x02\x02\u0A67\u0A72" +
		"\x05\xB2Z\x02\u0A68\u0A69\x07\x88\x02\x02\u0A69\u0A6E\x05\xB4[\x02\u0A6A" +
		"\u0A6B\x07\u03BB\x02\x02\u0A6B\u0A6D\x05\xB4[\x02\u0A6C\u0A6A\x03\x02" +
		"\x02\x02\u0A6D\u0A70\x03\x02\x02\x02\u0A6E\u0A6C\x03\x02\x02\x02\u0A6E" +
		"\u0A6F\x03\x02\x02\x02\u0A6F\u0A72\x03\x02\x02\x02\u0A70\u0A6E\x03\x02" +
		"\x02\x02\u0A71\u0A65\x03\x02\x02\x02\u0A71\u0A68\x03\x02\x02\x02\u0A72" +
		"\u0A7F\x03\x02\x02\x02\u0A73\u0A74\x07i\x02\x02\u0A74\u0A75\x07\u0135" +
		"\x02\x02\u0A75\u0A76\x07R\x02\x02\u0A76\u0A77\x07\xA2\x02\x02\u0A77\u0A7C" +
		"\x05\xB4[\x02\u0A78\u0A79\x07\u03BB\x02\x02\u0A79\u0A7B\x05\xB4[\x02\u0A7A" +
		"\u0A78\x03\x02\x02\x02\u0A7B\u0A7E\x03\x02\x02\x02\u0A7C\u0A7A\x03\x02" +
		"\x02\x02\u0A7C\u0A7D\x03\x02\x02\x02\u0A7D\u0A80\x03\x02\x02\x02\u0A7E" +
		"\u0A7C\x03\x02\x02\x02\u0A7F\u0A73\x03\x02\x02\x02\u0A7F\u0A80\x03\x02" +
		"\x02\x02\u0A80\xA7\x03\x02\x02\x02\u0A81\u0A82\x07\\\x02\x02\u0A82\u0A84" +
		"\x07\u0128\x02\x02\u0A83\u0A85\t!\x02\x02\u0A84\u0A83\x03\x02\x02\x02" +
		"\u0A84\u0A85\x03\x02\x02\x02\u0A85\u0A87\x03\x02\x02\x02\u0A86\u0A88\x07" +
		"\u0176\x02\x02\u0A87\u0A86\x03\x02\x02\x02\u0A87\u0A88\x03\x02\x02\x02" +
		"\u0A88\u0A89\x03\x02\x02\x02\u0A89\u0A8A\x07I\x02\x02\u0A8A\u0A8C\x07" +
		"\u03C7\x02\x02\u0A8B\u0A8D\t\b\x02\x02\u0A8C\u0A8B\x03\x02\x02\x02\u0A8C" +
		"\u0A8D\x03\x02\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02\u0A8E\u0A8F\x07N\x02" +
		"\x02\u0A8F\u0A90\x07\x96\x02\x02\u0A90\u0A96\x05\u01E2\xF2\x02\u0A91\u0A92" +
		"\x07r\x02\x02\u0A92\u0A93\x07\u03B9\x02\x02\u0A93\u0A94\x05\u0218\u010D" +
		"\x02\u0A94\u0A95\x07\u03BA\x02\x02\u0A95\u0A97\x03\x02\x02\x02\u0A96\u0A91" +
		"\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97\u0A9B\x03\x02\x02\x02" +
		"\u0A98\u0A99\x07\x19\x02\x02\u0A99\u0A9A\x07\x88\x02\x02\u0A9A\u0A9C\x05" +
		"\u01EC\xF7\x02\u0A9B\u0A98\x03\x02\x02\x02\u0A9B\u0A9C\x03\x02\x02\x02" +
		"\u0A9C\u0AA3\x03\x02\x02\x02\u0A9D\u0A9F\t\"\x02\x02\u0A9E\u0AA0\x05\xEE" +
		"x\x02\u0A9F\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02\x02\x02\u0AA1\u0A9F" +
		"\x03\x02\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0AA4\x03\x02\x02\x02" +
		"\u0AA3\u0A9D\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AAB\x03" +
		"\x02\x02\x02\u0AA5\u0AA7\x07[\x02\x02\u0AA6\u0AA8\x05\xF0y\x02\u0AA7\u0AA6" +
		"\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9\u0AA7\x03\x02\x02\x02" +
		"\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AAC\x03\x02\x02\x02\u0AAB\u0AA5\x03" +
		"\x02\x02\x02\u0AAB\u0AAC\x03\x02\x02\x02\u0AAC\u0AB1\x03\x02\x02\x02\u0AAD" +
		"\u0AAE\x07F\x02\x02\u0AAE\u0AAF\x05\u0200\u0101\x02\u0AAF\u0AB0\t#\x02" +
		"\x02\u0AB0\u0AB2\x03\x02\x02\x02\u0AB1\u0AAD\x03\x02\x02\x02\u0AB1\u0AB2" +
		"\x03\x02\x02\x02\u0AB2\u0ABE\x03\x02\x02\x02\u0AB3\u0AB4\x07\u03B9\x02" +
		"\x02\u0AB4\u0AB9\x05\xB6\\\x02\u0AB5\u0AB6\x07\u03BB\x02\x02\u0AB6\u0AB8" +
		"\x05\xB6\\\x02\u0AB7\u0AB5\x03\x02\x02\x02\u0AB8\u0ABB\x03\x02\x02\x02" +
		"\u0AB9\u0AB7\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA\u0ABC\x03" +
		"\x02\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABC\u0ABD\x07\u03BA\x02\x02" +
		"\u0ABD\u0ABF\x03\x02\x02\x02\u0ABE\u0AB3\x03\x02\x02\x02\u0ABE\u0ABF\x03" +
		"\x02\x02\x02\u0ABF\u0AC9\x03\x02\x02\x02\u0AC0\u0AC1\x07\x88\x02\x02\u0AC1" +
		"\u0AC6\x05\xB4[\x02\u0AC2\u0AC3\x07\u03BB\x02\x02\u0AC3\u0AC5\x05\xB4" +
		"[\x02\u0AC4\u0AC2\x03\x02\x02\x02\u0AC5\u0AC8\x03\x02\x02\x02\u0AC6\u0AC4" +
		"\x03\x02\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02\u0AC7\u0ACA\x03\x02\x02\x02" +
		"\u0AC8\u0AC6\x03\x02\x02\x02\u0AC9\u0AC0\x03\x02\x02\x02\u0AC9\u0ACA\x03" +
		"\x02\x02\x02\u0ACA\xA9\x03\x02\x02\x02\u0ACB\u0ACC\x07\\\x02\x02\u0ACC" +
		"\u0ACE\x07\u0228\x02\x02\u0ACD\u0ACF\t!\x02\x02\u0ACE\u0ACD\x03\x02\x02" +
		"\x02\u0ACE\u0ACF\x03\x02\x02\x02\u0ACF\u0AD1\x03\x02\x02\x02\u0AD0\u0AD2" +
		"\x07\u0176\x02\x02\u0AD1\u0AD0\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02" +
		"\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD4\x07I\x02\x02\u0AD4\u0AD6" +
		"\x07\u03C7\x02\x02\u0AD5\u0AD7\t\b\x02\x02\u0AD6\u0AD5\x03\x02\x02\x02" +
		"\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7\u0AD8\x03\x02\x02\x02\u0AD8\u0AD9\x07" +
		"N\x02\x02\u0AD9\u0ADA\x07\x96\x02\x02\u0ADA\u0ADE\x05\u01E2\xF2\x02\u0ADB" +
		"\u0ADC\x07\x19\x02\x02\u0ADC\u0ADD\x07\x88\x02\x02\u0ADD\u0ADF\x05\u01EC" +
		"\xF7\x02\u0ADE\u0ADB\x03\x02\x02\x02\u0ADE\u0ADF\x03\x02\x02\x02\u0ADF" +
		"\u0AE6\x03\x02\x02\x02\u0AE0\u0AE1\x07\u01E0\x02\x02\u0AE1\u0AE2\x07\u015F" +
		"\x02\x02\u0AE2\u0AE3\x07\x13\x02\x02\u0AE3\u0AE4\x07\u03B2\x02\x02\u0AE4" +
		"\u0AE5\x07\u03C7\x02\x02\u0AE5\u0AE7\x07\u03B1\x02\x02\u0AE6\u0AE0\x03" +
		"\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02\u0AE7\u0AEC\x03\x02\x02\x02\u0AE8" +
		"\u0AE9\x07F\x02\x02\u0AE9\u0AEA\x05\u0200\u0101\x02\u0AEA\u0AEB\t#\x02" +
		"\x02\u0AEB\u0AED\x03\x02\x02\x02\u0AEC\u0AE8\x03\x02\x02\x02\u0AEC\u0AED" +
		"\x03\x02\x02\x02\u0AED\u0AF9\x03\x02\x02\x02\u0AEE\u0AEF\x07\u03B9\x02" +
		"\x02\u0AEF\u0AF4\x05\xB6\\\x02\u0AF0\u0AF1\x07\u03BB\x02\x02\u0AF1\u0AF3" +
		"\x05\xB6\\\x02\u0AF2\u0AF0\x03\x02\x02\x02\u0AF3\u0AF6\x03\x02\x02\x02" +
		"\u0AF4\u0AF2\x03\x02\x02\x02\u0AF4\u0AF5\x03\x02\x02\x02\u0AF5\u0AF7\x03" +
		"\x02\x02\x02\u0AF6\u0AF4\x03\x02\x02\x02\u0AF7\u0AF8\x07\u03BA\x02\x02" +
		"\u0AF8\u0AFA\x03\x02\x02\x02\u0AF9\u0AEE\x03\x02\x02\x02\u0AF9\u0AFA\x03" +
		"\x02\x02\x02\u0AFA\u0B04\x03\x02\x02\x02\u0AFB\u0AFC\x07\x88\x02\x02\u0AFC" +
		"\u0B01\x05\xB4[\x02\u0AFD\u0AFE\x07\u03BB\x02\x02\u0AFE\u0B00\x05\xB4" +
		"[\x02\u0AFF\u0AFD\x03\x02\x02\x02\u0B00\u0B03\x03\x02\x02\x02\u0B01\u0AFF" +
		"\x03\x02\x02\x02\u0B01\u0B02\x03\x02\x02\x02\u0B02\u0B05\x03\x02\x02\x02" +
		"\u0B03\u0B01\x03\x02\x02\x02\u0B04\u0AFB\x03\x02\x02\x02\u0B04\u0B05\x03" +
		"\x02\x02\x02\u0B05\xAB\x03\x02\x02\x02\u0B06\u0B08\x07~\x02\x02\u0B07" +
		"\u0B09\t$\x02\x02\u0B08\u0B07\x03\x02\x02\x02\u0B08\u0B09\x03\x02\x02" +
		"\x02\u0B09\u0B0B\x03\x02\x02\x02\u0B0A\u0B0C\x07N\x02\x02\u0B0B\u0B0A" +
		"\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B0D\x03\x02\x02\x02" +
		"\u0B0D\u0B13\x05\u01E2\xF2\x02\u0B0E\u0B0F\x07r\x02\x02\u0B0F\u0B10\x07" +
		"\u03B9\x02\x02\u0B10\u0B11\x05\u0218\u010D\x02\u0B11\u0B12\x07\u03BA\x02" +
		"\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13\u0B0E\x03\x02\x02\x02\u0B13\u0B14" +
		"\x03\x02\x02\x02\u0B14\u0B25\x03\x02\x02\x02\u0B15\u0B16\x07\u03B9\x02" +
		"\x02\u0B16\u0B17\x05\u0218\u010D\x02\u0B17\u0B18\x07\u03BA\x02\x02\u0B18" +
		"\u0B1A\x03\x02\x02\x02\u0B19\u0B15\x03\x02\x02\x02\u0B19\u0B1A\x03\x02" +
		"\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02\u0B1B\u0B26\x05\xB2Z\x02\u0B1C\u0B1D" +
		"\x07\x88\x02\x02\u0B1D\u0B22\x05\xB4[\x02\u0B1E\u0B1F\x07\u03BB\x02\x02" +
		"\u0B1F\u0B21\x05\xB4[\x02\u0B20\u0B1E\x03\x02\x02\x02\u0B21\u0B24\x03" +
		"\x02\x02\x02\u0B22\u0B20\x03\x02\x02\x02\u0B22\u0B23\x03\x02\x02\x02\u0B23" +
		"\u0B26\x03\x02\x02\x02\u0B24\u0B22\x03\x02\x02\x02\u0B25\u0B19\x03\x02" +
		"\x02\x02\u0B25\u0B1C\x03\x02\x02\x02\u0B26\xAD\x03\x02\x02\x02\u0B27\u0B29" +
		"\x05\xDEp\x02\u0B28\u0B2A\x05\xB8]\x02\u0B29\u0B28\x03\x02\x02\x02\u0B29" +
		"\u0B2A\x03\x02\x02\x02\u0B2A\u0B5F\x03\x02\x02\x02\u0B2B\u0B2D\x05\xDA" +
		"n\x02\u0B2C\u0B2E\x05\xB8]\x02\u0B2D\u0B2C\x03\x02\x02\x02\u0B2D\u0B2E" +
		"\x03\x02\x02\x02\u0B2E\u0B5F\x03\x02\x02\x02\u0B2F\u0B31\x05\xE0q\x02" +
		"\u0B30\u0B32\x05\xE4s\x02\u0B31\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03" +
		"\x02\x02\x02\u0B33\u0B31\x03\x02\x02\x02\u0B33\u0B34\x03\x02\x02\x02\u0B34" +
		"\u0B3D\x03\x02\x02\x02\u0B35\u0B37\x07\x9E\x02\x02\u0B36\u0B38\t%\x02" +
		"\x02\u0B37\u0B36\x03\x02\x02\x02\u0B37\u0B38\x03\x02\x02\x02\u0B38\u0B3B" +
		"\x03\x02\x02\x02\u0B39\u0B3C\x05\xDEp\x02\u0B3A\u0B3C\x05\xDAn\x02\u0B3B" +
		"\u0B39\x03\x02\x02\x02\u0B3B\u0B3A\x03\x02\x02\x02\u0B3C\u0B3E\x03\x02" +
		"\x02\x02\u0B3D\u0B35\x03\x02\x02\x02\u0B3D\u0B3E\x03\x02\x02\x02\u0B3E" +
		"\u0B40\x03\x02\x02\x02\u0B3F\u0B41\x05\xCAf\x02\u0B40\u0B3F\x03\x02\x02" +
		"\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B43\x03\x02\x02\x02\u0B42\u0B44" +
		"\x05\xF6|\x02\u0B43\u0B42\x03\x02\x02\x02\u0B43\u0B44\x03\x02\x02\x02" +
		"\u0B44\u0B46\x03\x02\x02\x02\u0B45\u0B47\x05\xB8]\x02\u0B46\u0B45\x03" +
		"\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B5F\x03\x02\x02\x02\u0B48" +
		"\u0B4A\x05\xDCo\x02\u0B49\u0B4B\x05\xE2r\x02\u0B4A\u0B49\x03\x02\x02\x02" +
		"\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02\u0B4C\u0B4D\x03" +
		"\x02\x02\x02\u0B4D\u0B53\x03\x02\x02\x02\u0B4E\u0B50\x07\x9E\x02\x02\u0B4F" +
		"\u0B51\t%\x02\x02\u0B50\u0B4F\x03\x02\x02\x02\u0B50\u0B51\x03\x02\x02" +
		"\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B54\x05\xDAn\x02\u0B53\u0B4E" +
		"\x03\x02\x02\x02\u0B53\u0B54\x03\x02\x02\x02\u0B54\u0B56\x03\x02\x02\x02" +
		"\u0B55\u0B57\x05\xCAf\x02\u0B56\u0B55\x03\x02\x02\x02\u0B56\u0B57\x03" +
		"\x02\x02\x02\u0B57\u0B59\x03\x02\x02\x02\u0B58\u0B5A\x05\xF6|\x02\u0B59" +
		"\u0B58\x03\x02\x02\x02\u0B59\u0B5A\x03\x02\x02\x02\u0B5A\u0B5C\x03\x02" +
		"\x02\x02\u0B5B\u0B5D\x05\xB8]\x02\u0B5C\u0B5B\x03\x02\x02\x02\u0B5C\u0B5D" +
		"\x03\x02\x02\x02\u0B5D\u0B5F\x03\x02\x02\x02\u0B5E\u0B27\x03\x02\x02\x02" +
		"\u0B5E\u0B2B\x03\x02\x02\x02\u0B5E\u0B2F\x03\x02\x02\x02\u0B5E\u0B48\x03" +
		"\x02\x02\x02\u0B5F\xAF\x03\x02\x02\x02\u0B60\u0B63\x05\xC6d\x02\u0B61" +
		"\u0B63\x05\xC8e\x02\u0B62\u0B60\x03\x02\x02\x02\u0B62\u0B61\x03\x02\x02" +
		"\x02\u0B63\xB1\x03\x02\x02\x02\u0B64\u0B74\x05\xAEX\x02\u0B65\u0B66\t" +
		"&\x02\x02\u0B66\u0B67\x07\u03B9\x02\x02\u0B67\u0B68\x05\u0220\u0111\x02" +
		"\u0B68\u0B70\x07\u03BA\x02\x02\u0B69\u0B6A\x07\u03BB\x02\x02\u0B6A\u0B6B" +
		"\x07\u03B9\x02\x02\u0B6B\u0B6C\x05\u0220\u0111\x02\u0B6C\u0B6D\x07\u03BA" +
		"\x02\x02\u0B6D\u0B6F\x03\x02\x02\x02\u0B6E\u0B69\x03\x02\x02\x02\u0B6F" +
		"\u0B72\x03\x02\x02\x02\u0B70\u0B6E\x03\x02\x02\x02\u0B70\u0B71\x03\x02" +
		"\x02\x02\u0B71\u0B74\x03\x02\x02\x02\u0B72\u0B70\x03\x02\x02\x02\u0B73" +
		"\u0B64\x03\x02\x02\x02\u0B73\u0B65\x03\x02\x02\x02\u0B74\xB3\x03\x02\x02" +
		"\x02\u0B75\u0B76\x05\u01E4\xF3\x02\u0B76\u0B79\x07\u03B0\x02\x02\u0B77" +
		"\u0B7A\x05\u0246\u0124\x02\u0B78\u0B7A\x07(\x02\x02\u0B79\u0B77\x03\x02" +
		"\x02\x02\u0B79\u0B78\x03\x02\x02\x02\u0B7A\xB5\x03\x02\x02\x02\u0B7B\u0B7E" +
		"\x05\u01FA\xFE\x02\u0B7C\u0B7E\x07\u03D2\x02\x02\u0B7D\u0B7B\x03\x02\x02" +
		"\x02\u0B7D\u0B7C\x03\x02\x02\x02\u0B7E\xB7\x03\x02\x02\x02\u0B7F\u0B80" +
		"\x07;\x02\x02\u0B80\u0B86\x07\xA2\x02\x02\u0B81\u0B82\x07]\x02\x02\u0B82" +
		"\u0B83\x07G\x02\x02\u0B83\u0B84\x07\u01E7\x02\x02\u0B84\u0B86\x07\u0199" +
		"\x02\x02\u0B85\u0B7F\x03\x02\x02\x02\u0B85\u0B81\x03\x02\x02\x02\u0B86" +
		"\xB9\x03\x02\x02\x02\u0B87\u0B89\x07*\x02\x02\u0B88\u0B8A\x07_\x02\x02" +
		"\u0B89\u0B88\x03\x02\x02\x02\u0B89\u0B8A\x03\x02\x02\x02\u0B8A\u0B8C\x03" +
		"\x02\x02\x02\u0B8B\u0B8D\x07\u01C5\x02\x02\u0B8C\u0B8B\x03\x02\x02\x02" +
		"\u0B8C\u0B8D\x03\x02\x02\x02\u0B8D\u0B8F\x03\x02\x02\x02\u0B8E\u0B90\x07" +
		"F\x02\x02\u0B8F\u0B8E\x03\x02\x02\x02\u0B8F\u0B90\x03\x02\x02\x02\u0B90" +
		"\u0B91\x03\x02\x02\x02\u0B91\u0B92\x07>\x02\x02\u0B92\u0B98\x05\u01E2" +
		"\xF2\x02\u0B93\u0B94\x07r\x02\x02\u0B94\u0B95\x07\u03B9\x02\x02\u0B95" +
		"\u0B96\x05\u0218\u010D\x02\u0B96\u0B97\x07\u03BA\x02\x02\u0B97\u0B99\x03" +
		"\x02\x02\x02\u0B98\u0B93\x03\x02\x02\x02\u0B98\u0B99\x03\x02\x02\x02\u0B99" +
		"\u0B9C\x03\x02\x02\x02\u0B9A\u0B9B\x07\xA8\x02\x02\u0B9B\u0B9D\x05\u0246" +
		"\u0124\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9D\x03\x02\x02\x02\u0B9D" +
		"\u0B9F\x03\x02\x02\x02\u0B9E\u0BA0\x05\xCAf\x02\u0B9F\u0B9E\x03\x02\x02" +
		"\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA3\x03\x02\x02\x02\u0BA1\u0BA2" +
		"\x07Y\x02\x02\u0BA2\u0BA4\x05\u0200\u0101\x02\u0BA3\u0BA1\x03\x02\x02" +
		"\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4\xBB\x03\x02\x02\x02\u0BA5\u0BA7" +
		"\x07*\x02\x02\u0BA6\u0BA8\x07_\x02\x02\u0BA7\u0BA6\x03\x02\x02\x02\u0BA7" +
		"\u0BA8\x03\x02\x02\x02\u0BA8\u0BAA\x03\x02\x02\x02\u0BA9\u0BAB\x07\u01C5" +
		"\x02\x02\u0BAA\u0BA9\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB" +
		"\u0BAD\x03\x02\x02\x02\u0BAC\u0BAE\x07F\x02\x02\u0BAD\u0BAC\x03\x02\x02" +
		"\x02\u0BAD\u0BAE\x03\x02\x02\x02\u0BAE\u0BD6\x03\x02\x02\x02\u0BAF\u0BB2" +
		"\x05\u01E2\xF2\x02\u0BB0\u0BB1\x07\u03B8\x02\x02\u0BB1\u0BB3\x07\u03A8" +
		"\x02\x02\u0BB2\u0BB0\x03\x02\x02\x02\u0BB2\u0BB3\x03\x02\x02\x02\u0BB3" +
		"\u0BBC\x03\x02\x02\x02\u0BB4\u0BB5\x07\u03BB\x02\x02\u0BB5\u0BB8\x05\u01E2" +
		"\xF2\x02\u0BB6\u0BB7\x07\u03B8\x02\x02\u0BB7\u0BB9\x07\u03A8\x02\x02\u0BB8" +
		"\u0BB6\x03\x02\x02\x02\u0BB8\u0BB9\x03\x02\x02\x02\u0BB9\u0BBB\x03\x02" +
		"\x02\x02\u0BBA\u0BB4\x03\x02\x02\x02\u0BBB\u0BBE\x03\x02\x02\x02\u0BBC" +
		"\u0BBA\x03\x02\x02\x02\u0BBC\u0BBD\x03\x02\x02\x02\u0BBD\u0BBF\x03\x02" +
		"\x02\x02\u0BBE\u0BBC\x03\x02\x02\x02\u0BBF\u0BC0\x07>\x02\x02\u0BC0\u0BC1" +
		"\x05\xCEh\x02\u0BC1\u0BD7\x03\x02\x02\x02\u0BC2\u0BC3\x07>\x02\x02\u0BC3" +
		"\u0BC6\x05\u01E2\xF2\x02\u0BC4\u0BC5\x07\u03B8\x02\x02\u0BC5\u0BC7\x07" +
		"\u03A8\x02\x02\u0BC6\u0BC4\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02" +
		"\u0BC7\u0BD0\x03\x02\x02\x02\u0BC8\u0BC9\x07\u03BB\x02\x02\u0BC9\u0BCC" +
		"\x05\u01E2\xF2\x02\u0BCA\u0BCB\x07\u03B8\x02\x02\u0BCB\u0BCD\x07\u03A8" +
		"\x02\x02\u0BCC\u0BCA\x03\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD" +
		"\u0BCF\x03\x02\x02\x02\u0BCE\u0BC8\x03\x02\x02\x02\u0BCF\u0BD2\x03\x02" +
		"\x02\x02\u0BD0\u0BCE\x03\x02\x02\x02\u0BD0\u0BD1\x03\x02\x02\x02\u0BD1" +
		"\u0BD3\x03\x02\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD3\u0BD4\x07\xA5" +
		"\x02\x02\u0BD4\u0BD5\x05\xCEh\x02\u0BD5\u0BD7\x03\x02\x02\x02\u0BD6\u0BAF" +
		"\x03\x02\x02\x02\u0BD6\u0BC2\x03\x02\x02\x02\u0BD7\u0BDA\x03\x02\x02\x02" +
		"\u0BD8\u0BD9\x07\xA8\x02\x02\u0BD9\u0BDB\x05\u0246\u0124\x02\u0BDA\u0BD8" +
		"\x03\x02\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\xBD\x03\x02\x02\x02" +
		"\u0BDC\u0BDD\x07\u015A\x02\x02\u0BDD\u0BDE\x05\u01E2\xF2\x02\u0BDE\u0BE3" +
		"\x07\u01AC\x02\x02\u0BDF\u0BE1\x07\x0E\x02\x02\u0BE0\u0BDF\x03\x02\x02" +
		"\x02\u0BE0\u0BE1\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BE4" +
		"\x05\u01FA\xFE\x02\u0BE3\u0BE0\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02\x02" +
		"\x02\u0BE4\xBF\x03\x02\x02\x02\u0BE5\u0BE6\x07\u015A\x02\x02\u0BE6\u0BE7" +
		"\x05\u01E2\xF2\x02\u0BE7\u0BE8\x07w\x02\x02\u0BE8\u0BEF\x05\u01FA\xFE" +
		"\x02\u0BE9\u0BEA\x05\u024E\u0128\x02\u0BEA\u0BEB\x07\u03B9\x02\x02\u0BEB" +
		"\u0BEC\x05\u0222\u0112\x02\u0BEC\u0BED\x07\u03BA\x02\x02\u0BED\u0BF0\x03" +
		"\x02\x02\x02\u0BEE\u0BF0\t\'\x02\x02\u0BEF\u0BE9\x03\x02\x02\x02\u0BEF" +
		"\u0BEE\x03\x02\x02\x02\u0BF0\u0BF3\x03\x02\x02\x02\u0BF1\u0BF2\x07\xA8" +
		"\x02\x02\u0BF2\u0BF4\x05\u0246\u0124\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF3" +
		"\u0BF4\x03\x02\x02\x02\u0BF4\u0BF7\x03\x02\x02\x02\u0BF5\u0BF6\x07Y\x02" +
		"\x02\u0BF6\u0BF8\x05\u0200\u0101\x02\u0BF7\u0BF5\x03\x02\x02\x02\u0BF7" +
		"\u0BF8\x03\x02\x02\x02\u0BF8\xC1\x03\x02\x02\x02\u0BF9\u0BFA\x07\u015A" +
		"\x02\x02\u0BFA\u0BFB\x05\u01E2\xF2\x02\u0BFB\u0BFC\x07w\x02\x02\u0BFC" +
		"\u0BFF\t(\x02\x02\u0BFD\u0BFE\x07\xA8\x02\x02\u0BFE\u0C00\x05\u0246\u0124" +
		"\x02\u0BFF\u0BFD\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02\u0C00\u0C03" +
		"\x03\x02\x02\x02\u0C01\u0C02\x07Y\x02\x02\u0C02\u0C04\x05\u0200\u0101" +
		"\x02\u0C03\u0C01\x03\x02\x02\x02\u0C03\u0C04\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u0C04\xC3\x03\x02\x02\x02\u0C05\u0C06\x07\u015A\x02\x02\u0C06" +
		"\u0C07\x05\u01E2\xF2\x02\u0C07\u0C08\x07\u0115\x02\x02\u0C08\xC5\x03\x02" +
		"\x02\x02\u0C09\u0C0B\x07\xA2\x02\x02\u0C0A\u0C0C\x07_\x02\x02\u0C0B\u0C0A" +
		"\x03\x02\x02\x02\u0C0B\u0C0C\x03\x02\x02\x02\u0C0C\u0C0E\x03\x02\x02\x02" +
		"\u0C0D\u0C0F\x07F\x02\x02\u0C0E\u0C0D\x03\x02\x02\x02\u0C0E\u0C0F\x03" +
		"\x02\x02\x02\u0C0F\u0C10\x03\x02\x02\x02\u0C10\u0C15\x05\u01E2\xF2\x02" +
		"\u0C11\u0C13\x07\x0E\x02\x02\u0C12\u0C11\x03\x02\x02\x02\u0C12\u0C13\x03" +
		"\x02\x02\x02\u0C13\u0C14\x03\x02\x02\x02\u0C14\u0C16\x05\u01FA\xFE\x02" +
		"\u0C15\u0C12\x03\x02\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16\u0C17\x03" +
		"\x02\x02\x02\u0C17\u0C18\x07\x88\x02\x02\u0C18\u0C1D\x05\xB4[\x02\u0C19" +
		"\u0C1A\x07\u03BB\x02\x02\u0C1A\u0C1C\x05\xB4[\x02\u0C1B\u0C19\x03\x02" +
		"\x02\x02\u0C1C\u0C1F\x03\x02\x02\x02\u0C1D\u0C1B\x03\x02\x02\x02\u0C1D" +
		"\u0C1E\x03\x02\x02\x02\u0C1E\u0C22\x03\x02\x02\x02\u0C1F\u0C1D\x03\x02" +
		"\x02\x02\u0C20\u0C21\x07\xA8\x02\x02\u0C21\u0C23\x05\u0246\u0124\x02\u0C22" +
		"\u0C20\x03\x02\x02\x02\u0C22\u0C23\x03\x02\x02\x02\u0C23\u0C25\x03\x02" +
		"\x02\x02\u0C24\u0C26\x05\xCAf\x02\u0C25\u0C24\x03\x02\x02\x02\u0C25\u0C26" +
		"\x03\x02\x02\x02\u0C26\u0C28\x03\x02\x02\x02\u0C27\u0C29\x05\xF6|\x02" +
		"\u0C28\u0C27\x03\x02\x02\x02\u0C28\u0C29\x03\x02\x02\x02\u0C29\xC7\x03" +
		"\x02\x02\x02\u0C2A\u0C2C\x07\xA2\x02\x02\u0C2B\u0C2D\x07_\x02\x02\u0C2C" +
		"\u0C2B\x03\x02\x02\x02\u0C2C\u0C2D\x03\x02\x02\x02\u0C2D\u0C2F\x03\x02" +
		"\x02\x02\u0C2E\u0C30\x07F\x02\x02\u0C2F\u0C2E\x03\x02\x02\x02\u0C2F\u0C30" +
		"\x03\x02\x02\x02\u0C30\u0C31\x03\x02\x02\x02\u0C31\u0C32\x05\xCEh\x02" +
		"\u0C32\u0C33\x07\x88\x02\x02\u0C33\u0C38\x05\xB4[\x02\u0C34\u0C35\x07" +
		"\u03BB\x02\x02\u0C35\u0C37\x05\xB4[\x02\u0C36\u0C34\x03\x02\x02\x02\u0C37" +
		"\u0C3A\x03\x02\x02\x02\u0C38\u0C36\x03\x02\x02\x02\u0C38\u0C39\x03\x02" +
		"\x02\x02\u0C39\u0C3D\x03\x02\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3B" +
		"\u0C3C\x07\xA8\x02\x02\u0C3C\u0C3E\x05\u0246\u0124\x02\u0C3D\u0C3B\x03" +
		"\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02\u0C3E\xC9\x03\x02\x02\x02\u0C3F" +
		"\u0C40\x07n\x02\x02\u0C40\u0C41\x07\x13\x02\x02\u0C41\u0C46\x05\xCCg\x02" +
		"\u0C42\u0C43\x07\u03BB\x02\x02\u0C43\u0C45\x05\xCCg\x02\u0C44\u0C42\x03" +
		"\x02\x02\x02\u0C45\u0C48\x03\x02\x02\x02\u0C46\u0C44\x03\x02\x02\x02\u0C46" +
		"\u0C47\x03\x02\x02\x02\u0C47\xCB\x03\x02\x02\x02\u0C48\u0C46\x03\x02\x02" +
		"\x02\u0C49\u0C4B\x05\u0246\u0124\x02\u0C4A\u0C4C\t)\x02\x02\u0C4B\u0C4A" +
		"\x03\x02\x02\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\xCD\x03\x02\x02\x02" +
		"\u0C4D\u0C52\x05\xD0i\x02\u0C4E\u0C4F\x07\u03BB\x02\x02\u0C4F\u0C51\x05" +
		"\xD0i\x02\u0C50\u0C4E\x03\x02\x02\x02\u0C51\u0C54\x03\x02\x02\x02\u0C52" +
		"\u0C50\x03\x02\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\xCF\x03\x02\x02" +
		"\x02\u0C54\u0C52\x03\x02\x02\x02\u0C55\u0C59\x05\xD2j\x02\u0C56\u0C58" +
		"\x05\xD8m\x02\u0C57\u0C56\x03\x02\x02\x02\u0C58\u0C5B\x03\x02\x02\x02" +
		"\u0C59\u0C57\x03\x02\x02\x02\u0C59\u0C5A\x03\x02\x02\x02\u0C5A\u0C67\x03" +
		"\x02\x02\x02\u0C5B\u0C59\x03\x02\x02\x02\u0C5C\u0C5D\x07\u03B9\x02\x02" +
		"\u0C5D\u0C61\x05\xD2j\x02\u0C5E\u0C60\x05\xD8m\x02\u0C5F\u0C5E\x03\x02" +
		"\x02\x02\u0C60\u0C63\x03\x02\x02\x02\u0C61\u0C5F\x03\x02\x02\x02\u0C61" +
		"\u0C62\x03\x02\x02\x02\u0C62\u0C64\x03\x02\x02\x02\u0C63\u0C61\x03\x02" +
		"\x02\x02\u0C64\u0C65\x07\u03BA\x02\x02\u0C65\u0C67\x03\x02\x02\x02\u0C66" +
		"\u0C55\x03\x02\x02\x02\u0C66\u0C5C\x03\x02\x02\x02\u0C67\xD1\x03\x02\x02" +
		"\x02\u0C68\u0C6E\x05\u01E2\xF2\x02\u0C69\u0C6A\x07r\x02\x02\u0C6A\u0C6B" +
		"\x07\u03B9\x02\x02\u0C6B\u0C6C\x05\u0218\u010D\x02\u0C6C\u0C6D\x07\u03BA" +
		"\x02\x02\u0C6D\u0C6F\x03\x02\x02\x02\u0C6E\u0C69\x03\x02\x02\x02\u0C6E" +
		"\u0C6F\x03\x02\x02\x02\u0C6F\u0C74\x03\x02\x02\x02\u0C70\u0C72\x07\x0E" +
		"\x02\x02\u0C71\u0C70\x03\x02\x02\x02\u0C71\u0C72\x03\x02\x02\x02\u0C72" +
		"\u0C73\x03\x02\x02\x02\u0C73\u0C75\x05\u01FA\xFE\x02\u0C74\u0C71\x03\x02" +
		"\x02\x02\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C7E\x03\x02\x02\x02\u0C76" +
		"\u0C7B\x05\xD4k\x02\u0C77\u0C78\x07\u03BB\x02\x02\u0C78\u0C7A\x05\xD4" +
		"k\x02\u0C79\u0C77\x03\x02\x02\x02\u0C7A\u0C7D\x03\x02\x02\x02\u0C7B\u0C79" +
		"\x03\x02\x02\x02\u0C7B\u0C7C\x03\x02\x02\x02\u0C7C\u0C7F\x03\x02\x02\x02" +
		"\u0C7D\u0C7B\x03\x02\x02\x02\u0C7E\u0C76\x03\x02\x02\x02\u0C7E\u0C7F\x03" +
		"\x02\x02\x02\u0C7F\u0C91\x03\x02\x02\x02\u0C80\u0C86\x05\xAEX\x02\u0C81" +
		"\u0C82\x07\u03B9\x02\x02\u0C82\u0C83\x05\xAEX\x02\u0C83\u0C84\x07\u03BA" +
		"\x02\x02\u0C84\u0C86\x03\x02\x02\x02\u0C85\u0C80\x03\x02\x02\x02\u0C85" +
		"\u0C81\x03\x02\x02\x02\u0C86\u0C88\x03\x02\x02\x02\u0C87\u0C89\x07\x0E" +
		"\x02\x02\u0C88\u0C87\x03\x02\x02\x02\u0C88\u0C89\x03\x02\x02\x02\u0C89" +
		"\u0C8A\x03\x02\x02\x02\u0C8A\u0C8B\x05\u01FA\xFE\x02\u0C8B\u0C91\x03\x02" +
		"\x02\x02\u0C8C\u0C8D\x07\u03B9\x02\x02\u0C8D\u0C8E\x05\xCEh\x02\u0C8E" +
		"\u0C8F\x07\u03BA\x02\x02\u0C8F\u0C91\x03\x02\x02\x02\u0C90\u0C68\x03\x02" +
		"\x02\x02\u0C90\u0C85\x03\x02\x02\x02\u0C90\u0C8C\x03\x02\x02\x02\u0C91" +
		"\xD3\x03\x02\x02\x02\u0C92\u0C93\t*\x02\x02\u0C93\u0C96\t\x14\x02\x02" +
		"\u0C94\u0C95\x07;\x02\x02\u0C95\u0C97\x05\xD6l\x02\u0C96\u0C94\x03\x02" +
		"\x02\x02\u0C96\u0C97\x03\x02\x02\x02\u0C97\u0C98\x03\x02\x02\x02\u0C98" +
		"\u0C99\x07\u03B9\x02\x02\u0C99\u0C9A\x05\u0218\u010D\x02\u0C9A\u0C9B\x07" +
		"\u03BA\x02\x02\u0C9B\xD5\x03\x02\x02\x02\u0C9C\u0CA2\x07Q\x02\x02\u0C9D" +
		"\u0C9E\x07n\x02\x02\u0C9E\u0CA2\x07\x13\x02\x02\u0C9F\u0CA0\x07B\x02\x02" +
		"\u0CA0\u0CA2\x07\x13\x02\x02\u0CA1\u0C9C\x03\x02\x02\x02\u0CA1\u0C9D\x03" +
		"\x02\x02\x02\u0CA1\u0C9F\x03\x02\x02\x02\u0CA2\xD7\x03\x02\x02\x02\u0CA3" +
		"\u0CA5\t+\x02\x02\u0CA4\u0CA3\x03\x02\x02\x02\u0CA4\u0CA5\x03\x02\x02" +
		"\x02\u0CA5\u0CA6\x03\x02\x02\x02\u0CA6\u0CA7\x07Q\x02\x02\u0CA7\u0CAF" +
		"\x05\xD2j\x02\u0CA8\u0CA9\x07i\x02\x02\u0CA9\u0CB0\x05\u0246\u0124\x02" +
		"\u0CAA\u0CAB\x07\xA5\x02\x02\u0CAB\u0CAC\x07\u03B9\x02\x02\u0CAC\u0CAD" +
		"\x05\u0218\u010D\x02\u0CAD\u0CAE\x07\u03BA\x02\x02\u0CAE\u0CB0\x03\x02" +
		"\x02\x02\u0CAF\u0CA8\x03\x02\x02\x02\u0CAF\u0CAA\x03\x02\x02\x02\u0CAF" +
		"\u0CB0\x03\x02\x02\x02\u0CB0\u0CD0\x03\x02\x02\x02\u0CB1\u0CB2\x07\x95" +
		"\x02\x02\u0CB2\u0CB5\x05\xD2j\x02\u0CB3\u0CB4\x07i\x02\x02\u0CB4\u0CB6" +
		"\x05\u0246\u0124\x02\u0CB5\u0CB3\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02" +
		"\x02\u0CB6\u0CD0\x03\x02\x02\x02\u0CB7\u0CB9\t,\x02\x02\u0CB8\u0CBA\x07" +
		"p\x02\x02\u0CB9\u0CB8\x03\x02\x02\x02\u0CB9\u0CBA\x03\x02\x02\x02\u0CBA" +
		"\u0CBB\x03\x02\x02\x02\u0CBB\u0CBC\x07Q\x02\x02\u0CBC\u0CC4\x05\xD2j\x02" +
		"\u0CBD\u0CBE\x07i\x02\x02\u0CBE\u0CC5\x05\u0246\u0124\x02\u0CBF\u0CC0" +
		"\x07\xA5\x02\x02\u0CC0\u0CC1\x07\u03B9\x02\x02\u0CC1\u0CC2\x05\u0218\u010D" +
		"\x02\u0CC2\u0CC3\x07\u03BA\x02\x02\u0CC3\u0CC5\x03\x02\x02\x02\u0CC4\u0CBD" +
		"\x03\x02\x02\x02\u0CC4\u0CBF\x03\x02\x02\x02\u0CC5\u0CD0\x03\x02\x02\x02" +
		"\u0CC6\u0CCB\x07e\x02\x02\u0CC7\u0CC9\t,\x02\x02\u0CC8\u0CCA\x07p\x02" +
		"\x02\u0CC9\u0CC8\x03\x02\x02\x02\u0CC9\u0CCA\x03\x02\x02\x02\u0CCA\u0CCC" +
		"\x03\x02\x02\x02\u0CCB\u0CC7\x03\x02\x02\x02\u0CCB\u0CCC\x03\x02\x02\x02" +
		"\u0CCC\u0CCD\x03\x02\x02\x02\u0CCD\u0CCE\x07Q\x02\x02\u0CCE\u0CD0\x05" +
		"\xD2j\x02\u0CCF\u0CA4\x03\x02\x02\x02\u0CCF\u0CB1\x03\x02\x02\x02\u0CCF" +
		"\u0CB7\x03\x02\x02\x02\u0CCF\u0CC6\x03\x02\x02\x02\u0CD0\xD9\x03\x02\x02" +
		"\x02\u0CD1\u0CD2\x07\u03B9\x02\x02\u0CD2\u0CD3\x05\xDEp\x02\u0CD3\u0CD4" +
		"\x07\u03BA\x02\x02\u0CD4\u0CDA\x03\x02\x02\x02\u0CD5\u0CD6\x07\u03B9\x02" +
		"\x02\u0CD6\u0CD7\x05\xDAn\x02\u0CD7\u0CD8\x07\u03BA\x02\x02\u0CD8\u0CDA" +
		"\x03\x02\x02\x02\u0CD9\u0CD1\x03\x02\x02\x02\u0CD9\u0CD5\x03\x02\x02\x02" +
		"\u0CDA\xDB\x03\x02\x02\x02\u0CDB\u0CDC\x07\u03B9\x02\x02\u0CDC\u0CDD\x05" +
		"\xE0q\x02\u0CDD\u0CDE\x07\u03BA\x02\x02\u0CDE\u0CE4\x03\x02\x02\x02\u0CDF" +
		"\u0CE0\x07\u03B9\x02\x02\u0CE0\u0CE1\x05\xDCo\x02\u0CE1\u0CE2\x07\u03BA" +
		"\x02\x02\u0CE2\u0CE4\x03\x02\x02\x02\u0CE3\u0CDB\x03\x02\x02\x02\u0CE3" +
		"\u0CDF\x03\x02\x02\x02\u0CE4\xDD\x03\x02\x02\x02\u0CE5\u0CE9\x07\x87\x02" +
		"\x02\u0CE6\u0CE8\x05\xE6t\x02\u0CE7\u0CE6\x03\x02\x02\x02\u0CE8\u0CEB" +
		"\x03\x02\x02\x02\u0CE9\u0CE7\x03\x02\x02\x02\u0CE9\u0CEA\x03\x02\x02\x02" +
		"\u0CEA\u0CEC\x03\x02\x02\x02\u0CEB\u0CE9\x03\x02\x02\x02\u0CEC\u0CEE\x05" +
		"\xE8u\x02\u0CED\u0CEF\x05\xECw\x02\u0CEE\u0CED\x03\x02\x02\x02\u0CEE\u0CEF" +
		"\x03\x02\x02\x02\u0CEF\u0CF1\x03\x02\x02\x02\u0CF0\u0CF2\x05\xF2z\x02" +
		"\u0CF1\u0CF0\x03\x02\x02\x02\u0CF1\u0CF2\x03\x02\x02\x02\u0CF2\u0CF4\x03" +
		"\x02\x02\x02\u0CF3\u0CF5\x05\xCAf\x02\u0CF4\u0CF3\x03\x02\x02\x02\u0CF4" +
		"\u0CF5\x03\x02\x02\x02\u0CF5\u0CF7\x03\x02\x02\x02\u0CF6\u0CF8\x05\xF6" +
		"|\x02\u0CF7\u0CF6\x03\x02\x02\x02\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0D0E" +
		"\x03\x02\x02\x02\u0CF9\u0CFD\x07\x87\x02\x02\u0CFA\u0CFC\x05\xE6t\x02" +
		"\u0CFB\u0CFA\x03\x02\x02\x02\u0CFC\u0CFF\x03\x02\x02\x02\u0CFD\u0CFB\x03" +
		"\x02\x02\x02\u0CFD\u0CFE\x03\x02\x02\x02\u0CFE\u0D00\x03\x02\x02\x02\u0CFF" +
		"\u0CFD\x03\x02\x02\x02\u0D00\u0D02\x05\xE8u\x02\u0D01\u0D03\x05\xF2z\x02" +
		"\u0D02\u0D01\x03\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03\u0D05\x03" +
		"\x02\x02\x02\u0D04\u0D06\x05\xCAf\x02\u0D05\u0D04\x03\x02\x02\x02\u0D05" +
		"\u0D06\x03\x02\x02\x02\u0D06\u0D08\x03\x02\x02\x02\u0D07\u0D09\x05\xF6" +
		"|\x02\u0D08\u0D07\x03\x02\x02\x02\u0D08\u0D09\x03\x02\x02\x02\u0D09\u0D0B" +
		"\x03\x02\x02\x02\u0D0A\u0D0C\x05\xECw\x02\u0D0B\u0D0A\x03\x02\x02\x02" +
		"\u0D0B\u0D0C\x03\x02\x02\x02\u0D0C\u0D0E\x03\x02\x02\x02\u0D0D\u0CE5\x03" +
		"\x02\x02\x02\u0D0D\u0CF9\x03\x02\x02\x02\u0D0E\xDF\x03\x02\x02\x02\u0D0F" +
		"\u0D13\x07\x87\x02\x02\u0D10\u0D12\x05\xE6t\x02\u0D11\u0D10\x03\x02\x02" +
		"\x02\u0D12\u0D15\x03\x02\x02\x02\u0D13\u0D11\x03\x02\x02\x02\u0D13\u0D14" +
		"\x03\x02\x02\x02\u0D14\u0D16\x03\x02\x02\x02\u0D15\u0D13\x03\x02\x02\x02" +
		"\u0D16\u0D18\x05\xE8u\x02\u0D17\u0D19\x05\xF2z\x02\u0D18\u0D17\x03\x02" +
		"\x02\x02\u0D18\u0D19\x03\x02\x02\x02\u0D19\u0D1B\x03\x02\x02\x02\u0D1A" +
		"\u0D1C\x05\xCAf\x02\u0D1B\u0D1A\x03\x02\x02\x02\u0D1B\u0D1C\x03\x02\x02" +
		"\x02\u0D1C\u0D1E\x03\x02\x02\x02\u0D1D\u0D1F\x05\xF6|\x02\u0D1E\u0D1D" +
		"\x03\x02\x02\x02\u0D1E\u0D1F\x03\x02\x02\x02\u0D1F\xE1\x03\x02\x02\x02" +
		"\u0D20\u0D22\x07\x9E\x02\x02\u0D21\u0D23\t%\x02\x02\u0D22\u0D21\x03\x02" +
		"\x02\x02\u0D22\u0D23\x03\x02\x02\x02\u0D23\u0D24\x03\x02\x02\x02\u0D24" +
		"\u0D25\x05\xDCo\x02\u0D25\xE3\x03\x02\x02\x02\u0D26\u0D28\x07\x9E\x02" +
		"\x02\u0D27\u0D29\t%\x02\x02\u0D28\u0D27\x03\x02\x02\x02\u0D28\u0D29\x03" +
		"\x02\x02\x02\u0D29\u0D2C\x03\x02\x02\x02\u0D2A\u0D2D\x05\xE0q\x02\u0D2B" +
		"\u0D2D\x05\xDCo\x02\u0D2C\u0D2A\x03\x02\x02\x02\u0D2C\u0D2B\x03\x02\x02" +
		"\x02\u0D2D\xE5\x03\x02\x02\x02\u0D2E\u0D37\t-\x02\x02\u0D2F\u0D37\x07" +
		"D\x02\x02\u0D30\u0D37\x07\x95\x02\x02\u0D31\u0D37\x07\x92\x02\x02\u0D32" +
		"\u0D37\x07\x90\x02\x02\u0D33\u0D37\x07\u01F6\x02\x02\u0D34\u0D37\t.\x02" +
		"\x02\u0D35\u0D37\x07\x91\x02\x02\u0D36\u0D2E\x03\x02\x02\x02\u0D36\u0D2F" +
		"\x03\x02\x02\x02\u0D36\u0D30\x03\x02\x02\x02\u0D36\u0D31\x03\x02\x02\x02" +
		"\u0D36\u0D32\x03\x02\x02\x02\u0D36\u0D33\x03\x02\x02\x02\u0D36\u0D34\x03" +
		"\x02\x02\x02\u0D36\u0D35\x03\x02\x02\x02\u0D37\xE7\x03\x02\x02\x02\u0D38" +
		"\u0D3B\x07\u03A8\x02\x02\u0D39\u0D3B\x05\xEAv\x02\u0D3A\u0D38\x03\x02" +
		"\x02\x02\u0D3A\u0D39\x03\x02\x02\x02\u0D3B\u0D40\x03\x02\x02\x02\u0D3C" +
		"\u0D3D\x07\u03BB\x02\x02\u0D3D\u0D3F\x05\xEAv\x02\u0D3E\u0D3C\x03\x02" +
		"\x02\x02\u0D3F\u0D42\x03\x02\x02\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D40" +
		"\u0D41\x03\x02\x02\x02\u0D41\xE9\x03\x02\x02\x02\u0D42\u0D40\x03\x02\x02" +
		"\x02\u0D43\u0D44\x05\u01E0\xF1\x02\u0D44\u0D45\x07\u03B8\x02\x02\u0D45" +
		"\u0D46\x07\u03A8\x02\x02\u0D46\u0D61\x03\x02\x02\x02\u0D47\u0D4C\x05\u01E4" +
		"\xF3\x02\u0D48\u0D4A\x07\x0E\x02\x02\u0D49\u0D48\x03\x02\x02\x02\u0D49" +
		"\u0D4A\x03\x02\x02\x02\u0D4A\u0D4B\x03\x02\x02\x02\u0D4B\u0D4D\x05\u01FA" +
		"\xFE\x02\u0D4C\u0D49\x03\x02\x02\x02\u0D4C\u0D4D\x03\x02\x02\x02\u0D4D" +
		"\u0D61\x03\x02\x02\x02\u0D4E\u0D53\x05\u0232\u011A\x02\u0D4F\u0D51\x07" +
		"\x0E\x02\x02\u0D50\u0D4F\x03\x02\x02\x02\u0D50\u0D51\x03\x02\x02\x02\u0D51" +
		"\u0D52\x03\x02\x02\x02\u0D52\u0D54\x05\u01FA\xFE\x02\u0D53\u0D50\x03\x02" +
		"\x02\x02\u0D53\u0D54\x03\x02\x02\x02\u0D54\u0D61\x03\x02\x02\x02\u0D55" +
		"\u0D56\x07\u03D2\x02\x02\u0D56\u0D58\x07\u039F\x02\x02\u0D57\u0D55\x03" +
		"\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02\u0D58\u0D59\x03\x02\x02\x02\u0D59" +
		"\u0D5E\x05\u0246\u0124\x02\u0D5A\u0D5C\x07\x0E\x02\x02\u0D5B\u0D5A\x03" +
		"\x02\x02\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D" +
		"\u0D5F\x05\u01FA\xFE\x02\u0D5E\u0D5B\x03\x02\x02\x02\u0D5E\u0D5F\x03\x02" +
		"\x02\x02\u0D5F\u0D61\x03\x02\x02\x02\u0D60\u0D43\x03\x02\x02\x02\u0D60" +
		"\u0D47\x03\x02\x02\x02\u0D60\u0D4E\x03\x02\x02\x02\u0D60\u0D57\x03\x02" +
		"\x02\x02\u0D61\xEB\x03\x02\x02\x02\u0D62\u0D63\x07N\x02\x02\u0D63\u0D68" +
		"\x05\xB6\\\x02\u0D64\u0D65\x07\u03BB\x02\x02\u0D65\u0D67\x05\xB6\\\x02" +
		"\u0D66\u0D64\x03\x02\x02\x02\u0D67\u0D6A\x03\x02\x02\x02\u0D68\u0D66\x03" +
		"\x02\x02\x02\u0D68\u0D69\x03\x02\x02\x02\u0D69\u0D87\x03\x02\x02\x02\u0D6A" +
		"\u0D68\x03\x02\x02\x02\u0D6B\u0D6C\x07N\x02\x02\u0D6C\u0D6D\x07\u0134" +
		"\x02\x02\u0D6D\u0D87\x07\u03C7\x02\x02\u0D6E\u0D6F\x07N\x02\x02\u0D6F" +
		"\u0D70\x07q\x02\x02\u0D70\u0D74\x07\u03C7\x02\x02\u0D71\u0D72\x07\x19" +
		"\x02\x02\u0D72\u0D73\x07\x88\x02\x02\u0D73\u0D75\x05\u01EC\xF7\x02\u0D74" +
		"\u0D71\x03\x02\x02\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75\u0D7C\x03\x02" +
		"\x02\x02\u0D76\u0D78\t\"\x02\x02\u0D77\u0D79\x05\xEEx\x02\u0D78\u0D77" +
		"\x03\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D78\x03\x02\x02\x02" +
		"\u0D7A\u0D7B\x03\x02\x02\x02\u0D7B\u0D7D\x03\x02\x02\x02\u0D7C\u0D76\x03" +
		"\x02\x02\x02\u0D7C\u0D7D\x03\x02\x02\x02\u0D7D\u0D84\x03\x02\x02\x02\u0D7E" +
		"\u0D80\x07[\x02\x02\u0D7F\u0D81\x05\xF0y\x02\u0D80\u0D7F\x03\x02\x02\x02" +
		"\u0D81\u0D82\x03\x02\x02\x02\u0D82\u0D80\x03\x02\x02\x02\u0D82\u0D83\x03" +
		"\x02\x02\x02\u0D83\u0D85\x03\x02\x02\x02\u0D84\u0D7E\x03\x02\x02\x02\u0D84" +
		"\u0D85\x03\x02\x02\x02\u0D85\u0D87\x03\x02\x02\x02\u0D86\u0D62\x03\x02" +
		"\x02\x02\u0D86\u0D6B\x03\x02\x02\x02\u0D86\u0D6E\x03\x02\x02\x02\u0D87" +
		"\xED\x03\x02\x02\x02\u0D88\u0D89\x07\x97\x02\x02\u0D89\u0D8A\x07\x13\x02" +
		"\x02\u0D8A\u0D95\x07\u03C7\x02\x02\u0D8B\u0D8D\x07l\x02\x02\u0D8C\u0D8B" +
		"\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\u0D8E\x03\x02\x02\x02" +
		"\u0D8E\u0D8F\x074\x02\x02\u0D8F\u0D90\x07\x13\x02\x02\u0D90\u0D95\x07" +
		"\u03C7\x02\x02\u0D91\u0D92\x075\x02\x02\u0D92\u0D93\x07\x13\x02\x02\u0D93" +
		"\u0D95\x07\u03C7\x02\x02\u0D94\u0D88\x03\x02\x02\x02\u0D94\u0D8C\x03\x02" +
		"\x02\x02\u0D94\u0D91\x03\x02\x02\x02\u0D95\xEF\x03\x02\x02\x02\u0D96\u0D97" +
		"\x07\x94\x02\x02\u0D97\u0D98\x07\x13\x02\x02\u0D98\u0D9D\x07\u03C7\x02" +
		"\x02\u0D99\u0D9A\x07\x97\x02\x02\u0D9A\u0D9B\x07\x13\x02\x02\u0D9B\u0D9D" +
		"\x07\u03C7\x02\x02\u0D9C\u0D96\x03\x02\x02\x02\u0D9C\u0D99\x03\x02\x02" +
		"\x02\u0D9D\xF1\x03\x02\x02\x02\u0D9E\u0D9F\x07>\x02\x02\u0D9F\u0DA2\x05" +
		"\xCEh\x02\u0DA0\u0DA1\x07\xA8\x02\x02\u0DA1\u0DA3\x05\u0246\u0124\x02" +
		"\u0DA2\u0DA0\x03\x02\x02\x02\u0DA2\u0DA3\x03\x02\x02\x02\u0DA3\u0DB2\x03" +
		"\x02\x02\x02\u0DA4\u0DA5\x07B\x02\x02\u0DA5\u0DA6\x07\x13\x02\x02\u0DA6" +
		"\u0DAB\x05\xF4{\x02\u0DA7\u0DA8\x07\u03BB\x02\x02\u0DA8\u0DAA\x05\xF4" +
		"{\x02\u0DA9\u0DA7\x03\x02\x02\x02\u0DAA\u0DAD\x03\x02\x02\x02\u0DAB\u0DA9" +
		"\x03\x02\x02\x02\u0DAB\u0DAC\x03\x02\x02\x02\u0DAC\u0DB0\x03\x02\x02\x02" +
		"\u0DAD\u0DAB\x03\x02\x02\x02\u0DAE\u0DAF\x07\xAA\x02\x02\u0DAF\u0DB1\x07" +
		"\u01DD\x02\x02\u0DB0\u0DAE\x03\x02\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02" +
		"\u0DB1\u0DB3\x03\x02\x02\x02\u0DB2\u0DA4\x03\x02\x02\x02\u0DB2\u0DB3\x03" +
		"\x02\x02\x02\u0DB3\u0DB6\x03\x02\x02\x02\u0DB4\u0DB5\x07C\x02\x02\u0DB5" +
		"\u0DB7\x05\u0246\u0124\x02\u0DB6\u0DB4\x03\x02\x02\x02\u0DB6\u0DB7\x03" +
		"\x02\x02\x02\u0DB7\xF3\x03\x02\x02\x02\u0DB8\u0DBA\x05\u0246\u0124\x02" +
		"\u0DB9\u0DBB\t)\x02\x02\u0DBA\u0DB9\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02" +
		"\x02\x02\u0DBB\xF5\x03\x02\x02\x02\u0DBC\u0DC7\x07Y\x02\x02\u0DBD\u0DBE" +
		"\x05\u0200\u0101\x02\u0DBE\u0DBF\x07\u03BB\x02\x02\u0DBF\u0DC1\x03\x02" +
		"\x02\x02\u0DC0\u0DBD\x03\x02\x02\x02\u0DC0\u0DC1\x03\x02\x02\x02\u0DC1" +
		"\u0DC2\x03\x02\x02\x02\u0DC2\u0DC8\x05\u0200\u0101\x02\u0DC3\u0DC4\x05" +
		"\u0200\u0101\x02\u0DC4\u0DC5\x07\u01A6\x02\x02\u0DC5\u0DC6\x05\u0200\u0101" +
		"\x02\u0DC6\u0DC8\x03\x02\x02\x02\u0DC7\u0DC0\x03\x02\x02\x02\u0DC7\u0DC3" +
		"\x03\x02\x02\x02\u0DC8\xF7\x03\x02\x02\x02\u0DC9\u0DCA\x07\u01FA\x02\x02" +
		"\u0DCA\u0DD3\x07\u020F\x02\x02\u0DCB\u0DD0\x05\u010E\x88\x02\u0DCC\u0DCD" +
		"\x07\u03BB\x02\x02\u0DCD\u0DCF\x05\u010E\x88\x02\u0DCE\u0DCC\x03\x02\x02" +
		"\x02\u0DCF\u0DD2\x03\x02\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02\u0DD0\u0DD1" +
		"\x03\x02\x02\x02\u0DD1\u0DD4\x03\x02\x02\x02\u0DD2\u0DD0\x03\x02\x02\x02" +
		"\u0DD3\u0DCB\x03\x02\x02\x02\u0DD3\u0DD4\x03\x02\x02\x02\u0DD4\xF9\x03" +
		"\x02\x02\x02\u0DD5\u0DD7\x07\u0106\x02\x02\u0DD6\u0DD8\x07\u0224\x02\x02" +
		"\u0DD7\u0DD6\x03\x02\x02\x02\u0DD7\u0DD8\x03\x02\x02\x02\u0DD8\xFB\x03" +
		"\x02\x02\x02\u0DD9\u0DDB\x07\u011B\x02\x02\u0DDA\u0DDC\x07\u0224\x02\x02" +
		"\u0DDB\u0DDA\x03\x02\x02\x02\u0DDB\u0DDC\x03\x02\x02\x02\u0DDC\u0DE2\x03" +
		"\x02\x02\x02\u0DDD\u0DDF\x07\r\x02\x02\u0DDE\u0DE0\x07\u01A2\x02\x02\u0DDF" +
		"\u0DDE\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE1\x03\x02" +
		"\x02\x02\u0DE1\u0DE3\x07\u010F\x02\x02\u0DE2\u0DDD\x03\x02\x02\x02\u0DE2" +
		"\u0DE3\x03\x02\x02\x02\u0DE3\u0DE8\x03\x02\x02\x02\u0DE4\u0DE6\x07\u01A2" +
		"\x02\x02\u0DE5\u0DE4\x03\x02\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02\u0DE6" +
		"\u0DE7\x03\x02\x02\x02\u0DE7\u0DE9\x07{\x02\x02\u0DE8\u0DE5\x03\x02\x02" +
		"\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9\xFD\x03\x02\x02\x02\u0DEA\u0DEC" +
		"\x07\u01DC\x02\x02\u0DEB\u0DED\x07\u0224\x02\x02\u0DEC\u0DEB\x03\x02\x02" +
		"\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u0DF3\x03\x02\x02\x02\u0DEE\u0DF0" +
		"\x07\r\x02\x02\u0DEF\u0DF1\x07\u01A2\x02\x02\u0DF0\u0DEF\x03\x02\x02\x02" +
		"\u0DF0\u0DF1\x03\x02\x02\x02\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2\u0DF4\x07" +
		"\u010F\x02\x02\u0DF3\u0DEE\x03\x02\x02\x02\u0DF3\u0DF4\x03\x02\x02\x02" +
		"\u0DF4\u0DF9\x03\x02\x02\x02\u0DF5\u0DF7\x07\u01A2\x02\x02\u0DF6\u0DF5" +
		"\x03\x02\x02\x02\u0DF6\u0DF7\x03\x02\x02\x02\u0DF7\u0DF8\x03\x02\x02\x02" +
		"\u0DF8\u0DFA\x07{\x02\x02\u0DF9\u0DF6\x03\x02\x02\x02\u0DF9\u0DFA\x03" +
		"\x02\x02\x02\u0DFA\xFF\x03\x02\x02\x02\u0DFB\u0DFC\x07\u01E2\x02\x02\u0DFC" +
		"\u0DFD\x05\u01FA\xFE\x02\u0DFD\u0101\x03\x02\x02\x02\u0DFE\u0E00\x07\u01DC" +
		"\x02\x02\u0DFF\u0E01\x07\u0224\x02\x02\u0E00\u0DFF\x03\x02\x02\x02\u0E00" +
		"\u0E01\x03\x02\x02\x02\u0E01\u0E02\x03\x02\x02\x02\u0E02\u0E04\x07\x99" +
		"\x02\x02\u0E03\u0E05\x07\u01E2\x02\x02\u0E04\u0E03\x03\x02\x02\x02\u0E04" +
		"\u0E05\x03\x02\x02\x02\u0E05\u0E06\x03\x02\x02\x02\u0E06\u0E07\x05\u01FA" +
		"\xFE\x02\u0E07\u0103\x03\x02\x02\x02\u0E08\u0E09\x07{\x02\x02\u0E09\u0E0A" +
		"\x07\u01E2\x02\x02\u0E0A\u0E0B\x05\u01FA\xFE\x02\u0E0B\u0105\x03\x02\x02" +
		"\x02\u0E0C\u0E0D\x07]\x02\x02\u0E0D\u0E0E\x07\u0236\x02\x02\u0E0E\u0E13" +
		"\x05\u0110\x89\x02\u0E0F\u0E10\x07\u03BB\x02\x02\u0E10\u0E12\x05\u0110" +
		"\x89\x02\u0E11\u0E0F\x03\x02\x02\x02\u0E12\u0E15\x03\x02\x02\x02\u0E13" +
		"\u0E11\x03\x02\x02\x02\u0E13\u0E14\x03\x02\x02\x02\u0E14\u0107\x03\x02" +
		"\x02\x02\u0E15\u0E13\x03\x02\x02\x02\u0E16\u0E17\x07\xA0\x02\x02\u0E17" +
		"\u0E18\x07\u0236\x02\x02\u0E18\u0109\x03\x02\x02\x02\u0E19\u0E1A\x07\x88" +
		"\x02\x02\u0E1A\u0E1B\x07\u0102\x02\x02\u0E1B\u0E1C\x07\u03B0\x02\x02\u0E1C" +
		"\u0E1D\t\x17\x02\x02\u0E1D\u010B\x03\x02\x02\x02\u0E1E\u0E20\x07\x88\x02" +
		"\x02\u0E1F\u0E21\t/\x02\x02\u0E20\u0E1F\x03\x02\x02\x02\u0E20\u0E21\x03" +
		"\x02\x02\x02\u0E21\u0E22\x03\x02\x02\x02\u0E22\u0E23\x07\u020F\x02\x02" +
		"\u0E23\u0E28\x05\u0114\x8B\x02\u0E24\u0E25\x07\u03BB\x02\x02\u0E25\u0E27" +
		"\x05\u0114\x8B\x02\u0E26\u0E24\x03\x02\x02\x02\u0E27\u0E2A\x03\x02\x02" +
		"\x02\u0E28\u0E26\x03\x02\x02\x02\u0E28\u0E29\x03\x02\x02\x02\u0E29\u010D" +
		"\x03\x02\x02\x02\u0E2A\u0E28\x03\x02\x02\x02\u0E2B\u0E2C\x07\xAA\x02\x02" +
		"\u0E2C\u0E2D\x07\u0122\x02\x02\u0E2D\u0E33\x07\u01ED\x02\x02\u0E2E\u0E2F" +
		"\x07w\x02\x02\u0E2F\u0E33\x07\xAB\x02\x02\u0E30\u0E31\x07w\x02\x02\u0E31" +
		"\u0E33\x07\u01AB\x02\x02\u0E32\u0E2B\x03\x02\x02\x02\u0E32\u0E2E\x03\x02" +
		"\x02\x02\u0E32\u0E30\x03\x02\x02\x02\u0E33\u010F\x03\x02\x02\x02\u0E34" +
		"\u0E39\x05\u01E2\xF2\x02\u0E35\u0E37\x07\x0E\x02\x02\u0E36\u0E35\x03\x02" +
		"\x02\x02\u0E36\u0E37\x03\x02\x02\x02\u0E37\u0E38\x03\x02\x02\x02\u0E38" +
		"\u0E3A\x05\u01FA\xFE\x02\u0E39\u0E36\x03\x02\x02\x02\u0E39\u0E3A\x03\x02" +
		"\x02\x02\u0E3A\u0E3B\x03\x02\x02\x02\u0E3B\u0E3C\x05\u0112\x8A\x02\u0E3C" +
		"\u0111\x03\x02\x02\x02\u0E3D\u0E3F\x07w\x02\x02\u0E3E\u0E40\x07\u0176" +
		"\x02\x02\u0E3F\u0E3E\x03\x02\x02\x02\u0E3F\u0E40\x03\x02\x02\x02\u0E40" +
		"\u0E46\x03\x02\x02\x02\u0E41\u0E43\x07_\x02\x02\u0E42\u0E41\x03\x02\x02" +
		"\x02\u0E42\u0E43\x03\x02\x02\x02\u0E43\u0E44\x03\x02\x02\x02\u0E44\u0E46" +
		"\x07\xAB\x02\x02\u0E45\u0E3D\x03\x02\x02\x02\u0E45\u0E42\x03\x02\x02\x02" +
		"\u0E46\u0113\x03\x02\x02\x02\u0E47\u0E48\x07\u016C\x02\x02\u0E48\u0E49" +
		"\x07\u0174\x02\x02\u0E49\u0E4F\x05\u0116\x8C\x02\u0E4A\u0E4B\x07w\x02" +
		"\x02\u0E4B\u0E4F\x07\xAB\x02\x02\u0E4C\u0E4D\x07w\x02\x02\u0E4D\u0E4F" +
		"\x07\u01AB\x02\x02\u0E4E\u0E47\x03\x02\x02\x02\u0E4E\u0E4A\x03\x02\x02" +
		"\x02\u0E4E\u0E4C\x03\x02\x02\x02\u0E4F\u0115\x03\x02\x02\x02\u0E50\u0E51" +
		"\x07\u0272\x02\x02\u0E51\u0E58\x07w\x02\x02\u0E52\u0E53\x07w\x02\x02\u0E53" +
		"\u0E58\x07\u0273\x02\x02\u0E54\u0E55\x07w\x02\x02\u0E55\u0E58\x07\u0274" +
		"\x02\x02\u0E56\u0E58\x07\u0275\x02\x02\u0E57\u0E50\x03\x02\x02\x02\u0E57" +
		"\u0E52\x03\x02\x02\x02\u0E57\u0E54\x03\x02\x02\x02\u0E57\u0E56\x03\x02" +
		"\x02\x02\u0E58\u0117\x03\x02\x02\x02\u0E59\u0E5A\x07\x18\x02\x02\u0E5A" +
		"\u0E5B\x07\u0179\x02\x02\u0E5B\u0E5C\x07\x99\x02\x02\u0E5C\u0E61\x05\u012A" +
		"\x96\x02\u0E5D\u0E5E\x07\u03BB\x02\x02\u0E5E\u0E60\x05\u012A\x96\x02\u0E5F" +
		"\u0E5D\x03\x02\x02\x02\u0E60\u0E63\x03\x02\x02\x02\u0E61\u0E5F\x03\x02" +
		"\x02\x02\u0E61\u0E62\x03\x02\x02\x02\u0E62\u0E65\x03\x02\x02\x02\u0E63" +
		"\u0E61\x03\x02\x02\x02\u0E64\u0E66\x05\u0132\x9A\x02\u0E65\u0E64\x03\x02" +
		"\x02\x02\u0E65\u0E66\x03\x02\x02\x02\u0E66\u0119\x03\x02\x02\x02\u0E67" +
		"\u0E68\x07\x18\x02\x02\u0E68\u0E69\x07\u01D8\x02\x02\u0E69\u0E6A\x07\u014E" +
		"\x02\x02\u0E6A\u0E6F\x05\u0134\x9B\x02\u0E6B\u0E6C\x07\u03BB\x02\x02\u0E6C" +
		"\u0E6E\x05\u0134\x9B\x02\u0E6D\u0E6B\x03\x02\x02\x02\u0E6E\u0E71\x03\x02" +
		"\x02\x02\u0E6F\u0E6D\x03\x02\x02\x02\u0E6F\u0E70\x03\x02\x02\x02\u0E70" +
		"\u011B\x03\x02\x02\x02\u0E71\u0E6F\x03\x02\x02\x02\u0E72\u0E73\x07u\x02" +
		"\x02\u0E73\u0E74\t0\x02\x02\u0E74\u0E79\x07\u0178\x02\x02\u0E75\u0E76" +
		"\x07\x99\x02\x02\u0E76\u0E7A\x07\u03C7\x02\x02\u0E77\u0E78\x07\x10\x02" +
		"\x02\u0E78\u0E7A\x07\u03C7\x02\x02\u0E79\u0E75\x03\x02\x02\x02\u0E79\u0E77" +
		"\x03\x02\x02\x02\u0E7A\u011D\x03\x02\x02\x02\u0E7B\u0E7C\x07\u01D9\x02" +
		"\x02\u0E7C\u0E7D\x07\u0179\x02\x02\u0E7D\u011F\x03\x02\x02\x02\u0E7E\u0E7F" +
		"\x07\u01D9\x02\x02\u0E7F\u0E81\x07\u01EB\x02\x02\u0E80\u0E82\x07\t\x02" +
		"\x02\u0E81\u0E80\x03\x02\x02\x02\u0E81\u0E82\x03\x02\x02\x02\u0E82\u0E84" +
		"\x03\x02\x02\x02\u0E83\u0E85\x05\u0132\x9A\x02\u0E84\u0E83\x03\x02\x02" +
		"\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0121\x03\x02\x02\x02\u0E86\u0E87" +
		"\x07\u01FA\x02\x02\u0E87\u0E90\x07\u01EB\x02\x02\u0E88\u0E8D\x05\u0138" +
		"\x9D\x02\u0E89\u0E8A\x07\u03BB\x02\x02\u0E8A\u0E8C\x05\u0138\x9D\x02\u0E8B" +
		"\u0E89\x03\x02\x02\x02\u0E8C\u0E8F\x03\x02\x02\x02\u0E8D\u0E8B\x03\x02" +
		"\x02\x02\u0E8D\u0E8E\x03\x02\x02\x02\u0E8E\u0E91\x03\x02\x02\x02\u0E8F" +
		"\u0E8D\x03\x02\x02\x02\u0E90\u0E88\x03\x02\x02\x02\u0E90\u0E91\x03\x02" +
		"\x02\x02\u0E91\u0E94\x03\x02\x02\x02\u0E92\u0E93\x07\u0217\x02\x02\u0E93" +
		"\u0E95\x05\u013A\x9E\x02\u0E94\u0E92\x03\x02\x02\x02\u0E94\u0E95\x03\x02" +
		"\x02\x02\u0E95\u0E99\x03\x02\x02\x02\u0E96\u0E98\x05\u013C\x9F\x02\u0E97" +
		"\u0E96\x03\x02\x02\x02\u0E98\u0E9B\x03\x02\x02\x02\u0E99\u0E97\x03\x02" +
		"\x02\x02\u0E99\u0E9A\x03\x02\x02\x02\u0E9A\u0E9D\x03\x02\x02\x02\u0E9B" +
		"\u0E99\x03\x02\x02\x02\u0E9C\u0E9E\x05\u0132\x9A\x02\u0E9D\u0E9C\x03\x02" +
		"\x02\x02\u0E9D\u0E9E\x03\x02\x02\x02\u0E9E\u0123\x03\x02\x02\x02\u0E9F" +
		"\u0EA0\x07\u0200\x02\x02\u0EA0\u0EA9\x07\u01EB\x02\x02\u0EA1\u0EA6\x05" +
		"\u0138\x9D\x02\u0EA2\u0EA3\x07\u03BB\x02\x02\u0EA3\u0EA5\x05\u0138\x9D" +
		"\x02\u0EA4\u0EA2\x03\x02\x02\x02\u0EA5\u0EA8\x03\x02\x02\x02\u0EA6\u0EA4" +
		"\x03\x02\x02\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7\u0EAA\x03\x02\x02\x02" +
		"\u0EA8\u0EA6\x03\x02\x02\x02\u0EA9\u0EA1\x03\x02\x02\x02\u0EA9\u0EAA\x03" +
		"\x02\x02\x02\u0EAA\u0125\x03\x02\x02\x02\u0EAB\u0EAC\x07\u01FA\x02\x02" +
		"\u0EAC\u0EAD\x07\u0159\x02\x02\u0EAD\u0127\x03\x02\x02\x02\u0EAE\u0EAF" +
		"\x07\u0200\x02\x02\u0EAF\u0EB0\x07\u0159\x02\x02\u0EB0\u0129\x03\x02\x02" +
		"\x02\u0EB1\u0EB2\x05\u012C\x97\x02\u0EB2\u0EB3\x07\u03B0\x02\x02\u0EB3" +
		"\u0EB4\x07\u03C7\x02\x02\u0EB4\u0ECF\x03\x02\x02\x02\u0EB5\u0EB6\x05\u012E" +
		"\x98";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0EB6\u0EB7\x07\u03B0\x02\x02\u0EB7\u0EB8\x05\u0200\u0101\x02\u0EB8" +
		"\u0ECF\x03\x02\x02\x02\u0EB9\u0EBA\x05\u0130\x99\x02\u0EBA\u0EBB\x07\u03B0" +
		"\x02\x02\u0EBB\u0EBC\t\x17\x02\x02\u0EBC\u0ECF\x03\x02\x02\x02\u0EBD\u0EBE" +
		"\x07\u017D\x02\x02\u0EBE\u0EBF\x07\u03B0\x02\x02\u0EBF\u0ECF\x07\u03CA" +
		"\x02\x02\u0EC0\u0EC1\x07\u0160\x02\x02\u0EC1\u0EC2\x07\u03B0\x02\x02\u0EC2" +
		"\u0ECB\x07\u03B9\x02\x02\u0EC3\u0EC8\x05\u01FA\xFE\x02\u0EC4\u0EC5\x07" +
		"\u03BB\x02\x02\u0EC5\u0EC7\x05\u01FA\xFE\x02\u0EC6\u0EC4\x03\x02\x02\x02" +
		"\u0EC7\u0ECA\x03\x02\x02\x02\u0EC8\u0EC6\x03\x02\x02\x02\u0EC8\u0EC9\x03" +
		"\x02\x02\x02\u0EC9\u0ECC\x03\x02\x02\x02\u0ECA\u0EC8\x03\x02\x02\x02\u0ECB" +
		"\u0EC3\x03\x02\x02\x02\u0ECB\u0ECC\x03\x02\x02\x02\u0ECC\u0ECD\x03\x02" +
		"\x02\x02\u0ECD\u0ECF\x07\u03BA\x02\x02\u0ECE\u0EB1\x03\x02\x02\x02\u0ECE" +
		"\u0EB5\x03\x02\x02\x02\u0ECE\u0EB9\x03\x02\x02\x02\u0ECE\u0EBD\x03\x02" +
		"\x02\x02\u0ECE\u0EC0\x03\x02\x02\x02\u0ECF\u012B\x03\x02\x02\x02\u0ED0" +
		"\u0ED1\t1\x02\x02\u0ED1\u012D\x03\x02\x02\x02\u0ED2\u0ED3\t2\x02\x02\u0ED3" +
		"\u012F\x03\x02\x02\x02\u0ED4\u0ED5\t3\x02\x02\u0ED5\u0131\x03\x02\x02" +
		"\x02\u0ED6\u0ED7\x07;\x02\x02\u0ED7\u0ED8\x07\u0111\x02\x02\u0ED8\u0ED9" +
		"\x07\u03C7\x02\x02\u0ED9\u0133\x03\x02\x02\x02\u0EDA\u0EDB\x07\u01D1\x02" +
		"\x02\u0EDB\u0EDC\x07\u03B0\x02\x02\u0EDC\u0EDD\x07\u03B9\x02\x02\u0EDD" +
		"\u0EDE\x05\u0218\u010D\x02\u0EDE\u0EDF\x07\u03BA\x02\x02\u0EDF\u0F0C\x03" +
		"\x02\x02\x02\u0EE0\u0EE1\x07\u01D3\x02\x02\u0EE1\u0EE2\x07\u03B0\x02\x02" +
		"\u0EE2\u0EE3\x07\u03B9\x02\x02\u0EE3\u0EE4\x05\u0218\u010D\x02\u0EE4\u0EE5" +
		"\x07\u03BA\x02\x02\u0EE5\u0F0C\x03\x02\x02\x02\u0EE6\u0EE7\x07\u01D2\x02" +
		"\x02\u0EE7\u0EE8\x07\u03B0\x02\x02\u0EE8\u0EE9\x07\u03B9\x02\x02\u0EE9" +
		"\u0EEA\x05\u021A\u010E\x02\u0EEA\u0EEB\x07\u03BA\x02\x02\u0EEB\u0F0C\x03" +
		"\x02\x02\x02\u0EEC\u0EED\x07\u01D4\x02\x02\u0EED\u0EEE\x07\u03B0\x02\x02" +
		"\u0EEE\u0EEF\x07\u03B9\x02\x02\u0EEF\u0EF0\x05\u021A\u010E\x02\u0EF0\u0EF1" +
		"\x07\u03BA\x02\x02\u0EF1\u0F0C\x03\x02\x02\x02\u0EF2\u0EF3\x07\u01D6\x02" +
		"\x02\u0EF3\u0EF4\x07\u03B0\x02\x02\u0EF4\u0EF5\x07\u03B9\x02\x02\u0EF5" +
		"\u0EF6\x05\u0224\u0113\x02\u0EF6\u0EF7\x07\u03BA\x02\x02\u0EF7\u0F0C\x03" +
		"\x02\x02\x02\u0EF8\u0EF9\x07\u01D7\x02\x02\u0EF9\u0EFA\x07\u03B0\x02\x02" +
		"\u0EFA\u0EFB\x07\u03B9\x02\x02\u0EFB\u0EFC\x05\u0224\u0113\x02\u0EFC\u0EFD" +
		"\x07\u03BA\x02\x02\u0EFD\u0F0C\x03\x02\x02\x02\u0EFE\u0EFF\x07\u01D5\x02" +
		"\x02\u0EFF\u0F00\x07\u03B0\x02\x02\u0F00\u0F01\x07\u03B9\x02\x02\u0F01" +
		"\u0F06\x05\u0136\x9C\x02\u0F02\u0F03\x07\u03BB\x02\x02\u0F03\u0F05\x05" +
		"\u0136\x9C\x02\u0F04\u0F02\x03\x02\x02\x02\u0F05\u0F08\x03\x02\x02\x02" +
		"\u0F06\u0F04\x03\x02\x02\x02\u0F06\u0F07\x03\x02\x02\x02\u0F07\u0F09\x03" +
		"\x02\x02\x02\u0F08\u0F06\x03\x02\x02\x02\u0F09\u0F0A\x07\u03BA\x02\x02" +
		"\u0F0A\u0F0C\x03\x02\x02\x02\u0F0B\u0EDA\x03\x02\x02\x02\u0F0B\u0EE0\x03" +
		"\x02\x02\x02\u0F0B\u0EE6\x03\x02\x02\x02\u0F0B\u0EEC\x03\x02\x02\x02\u0F0B" +
		"\u0EF2\x03\x02\x02\x02\u0F0B\u0EF8\x03\x02\x02\x02\u0F0B\u0EFE\x03\x02" +
		"\x02\x02\u0F0C\u0135\x03\x02\x02\x02\u0F0D\u0F0E\x07\u03B9\x02\x02\u0F0E" +
		"\u0F0F\x05\u01E2\xF2\x02\u0F0F\u0F10\x07\u03BB\x02\x02\u0F10\u0F11\x05" +
		"\u01E2\xF2\x02\u0F11\u0F12\x07\u03BA\x02\x02\u0F12\u0137\x03\x02\x02\x02" +
		"\u0F13\u0F14\t4\x02\x02\u0F14\u0139\x03\x02\x02\x02\u0F15\u0F16\t5\x02" +
		"\x02\u0F16\u0F17\x07\u03B0\x02\x02\u0F17\u0F28\x05\u013E\xA0\x02\u0F18" +
		"\u0F19\x07\u017F\x02\x02\u0F19\u0F1A\x07\u03B0\x02\x02\u0F1A\u0F1B\x07" +
		"\u03C7\x02\x02\u0F1B\u0F1C\x07\u03BB\x02\x02\u0F1C\u0F1D\x07\u0180\x02" +
		"\x02\u0F1D\u0F1E\x07\u03B0\x02\x02\u0F1E\u0F28\x05\u0200\u0101\x02\u0F1F" +
		"\u0F20\x07\u01CB\x02\x02\u0F20\u0F21\x07\u03B0\x02\x02\u0F21\u0F22\x07" +
		"\u03C7\x02\x02\u0F22\u0F23\x07\u03BB\x02\x02\u0F23\u0F24\x07\u01CC\x02" +
		"\x02\u0F24\u0F25\x07\u03B0\x02\x02\u0F25\u0F28\x05\u0200\u0101\x02\u0F26" +
		"\u0F28\x07\u01F4\x02\x02\u0F27\u0F15\x03\x02\x02\x02\u0F27\u0F18\x03\x02" +
		"\x02\x02\u0F27\u0F1F\x03\x02\x02\x02\u0F27\u0F26\x03\x02\x02\x02\u0F28" +
		"\u013B\x03\x02\x02\x02\u0F29\u0F2A\x07\u0219\x02\x02\u0F2A\u0F2B\x07\u03B0" +
		"\x02\x02\u0F2B\u0F36\x07\u03C7\x02\x02\u0F2C\u0F2D\x07\u01B6\x02\x02\u0F2D" +
		"\u0F2E\x07\u03B0\x02\x02\u0F2E\u0F36\x07\u03C7\x02\x02\u0F2F\u0F30\x07" +
		"\u012B\x02\x02\u0F30\u0F31\x07\u03B0\x02\x02\u0F31\u0F36\x07\u03C7\x02" +
		"\x02\u0F32\u0F33\x07\u01B9\x02\x02\u0F33\u0F34\x07\u03B0\x02\x02\u0F34" +
		"\u0F36\x07\u03C7\x02\x02\u0F35\u0F29\x03\x02\x02\x02\u0F35\u0F2C\x03\x02" +
		"\x02\x02\u0F35\u0F2F\x03\x02\x02\x02\u0F35\u0F32\x03\x02\x02\x02\u0F36" +
		"\u013D\x03\x02\x02\x02\u0F37\u0F3C\x05\u01F2\xFA\x02\u0F38\u0F39\x07\u03BB" +
		"\x02\x02\u0F39\u0F3B\x05\u01F2\xFA\x02\u0F3A\u0F38\x03\x02\x02\x02\u0F3B" +
		"\u0F3E\x03\x02\x02\x02\u0F3C\u0F3A\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02" +
		"\x02\x02\u0F3D\u0F41\x03\x02\x02\x02\u0F3E\u0F3C\x03\x02\x02\x02\u0F3F" +
		"\u0F41\x07\u03C7\x02\x02\u0F40\u0F37\x03\x02\x02\x02\u0F40\u0F3F\x03\x02" +
		"\x02\x02\u0F41\u013F\x03\x02\x02\x02\u0F42\u0F43\x07\u0227\x02\x02\u0F43" +
		"\u0F44\t6\x02\x02\u0F44\u0F46\x05\u01F4\xFB\x02\u0F45\u0F47\t7\x02\x02" +
		"\u0F46\u0F45\x03\x02\x02\x02\u0F46\u0F47\x03\x02\x02\x02\u0F47\u0141\x03" +
		"\x02\x02\x02\u0F48\u0F49\x07\u0227\x02\x02\u0F49\u0F4A\x07\u0139\x02\x02" +
		"\u0F4A\u0F50\x05\u01F4\xFB\x02\u0F4B\u0F4E\x07\u0207\x02\x02\u0F4C\u0F4D" +
		"\x07;\x02\x02\u0F4D\u0F4F\x07\u0197\x02\x02\u0F4E\u0F4C\x03\x02\x02\x02" +
		"\u0F4E\u0F4F\x03\x02\x02\x02\u0F4F\u0F51\x03\x02\x02\x02\u0F50\u0F4B\x03" +
		"\x02\x02\x02\u0F50\u0F51\x03\x02\x02\x02\u0F51\u0143\x03\x02\x02\x02\u0F52" +
		"\u0F53\x07\u0227\x02\x02\u0F53\u0F54\x07\u01BD\x02\x02\u0F54\u0F55\x05" +
		"\u01F4\xFB\x02\u0F55\u0145\x03\x02\x02\x02\u0F56\u0F57\x07\u0227\x02\x02" +
		"\u0F57\u0F58\x07\u011B\x02\x02\u0F58\u0F5B\x05\u01F4\xFB\x02\u0F59\u0F5A" +
		"\x07\u01A9\x02\x02\u0F5A\u0F5C\x07\u01B7\x02\x02\u0F5B\u0F59\x03\x02\x02" +
		"\x02\u0F5B\u0F5C\x03\x02\x02\x02\u0F5C\u0147\x03\x02\x02\x02\u0F5D\u0F5E" +
		"\x07\u0227\x02\x02\u0F5E\u0F5F\x07\u01DC\x02\x02\u0F5F\u0F60\x05\u01F4" +
		"\xFB\x02\u0F60\u0149\x03\x02\x02\x02\u0F61\u0F62\x07\u0227\x02\x02\u0F62" +
		"\u0F65\x07\u01C7\x02\x02\u0F63\u0F64\x07 \x02\x02\u0F64\u0F66\x05\u01F4" +
		"\xFB\x02\u0F65\u0F63\x03\x02\x02\x02\u0F65\u0F66\x03\x02\x02\x02\u0F66" +
		"\u014B\x03\x02\x02\x02\u0F67\u0F68\x07\u01BD\x02\x02\u0F68\u0F69\x05\u01FA" +
		"\xFE\x02\u0F69\u0F6C\x07>\x02\x02\u0F6A\u0F6D\x07\u03C7\x02\x02\u0F6B" +
		"\u0F6D\x07\u03D2\x02\x02\u0F6C\u0F6A\x03\x02\x02\x02\u0F6C\u0F6B\x03\x02" +
		"\x02\x02\u0F6D\u014D\x03\x02\x02\x02\u0F6E\u0F6F\x07\u0238\x02\x02\u0F6F" +
		"\u0F72\x05\u01FA\xFE\x02\u0F70\u0F71\x07\xA5\x02\x02\u0F71\u0F73\x05\u0226" +
		"\u0114\x02\u0F72\u0F70\x03\x02\x02\x02\u0F72\u0F73\x03\x02\x02\x02\u0F73" +
		"\u014F\x03\x02\x02\x02\u0F74\u0F75\t8\x02\x02\u0F75\u0F76\x07\u01BD\x02" +
		"\x02\u0F76\u0F77\x05\u01FA\xFE\x02\u0F77\u0151\x03\x02\x02\x02\u0F78\u0F7B" +
		"\x05\u0154\xAB\x02\u0F79\u0F7B\x05\x02\x02\x02\u0F7A\u0F78\x03\x02\x02" +
		"\x02\u0F7A\u0F79\x03\x02\x02\x02\u0F7B\u0153\x03\x02\x02\x02\u0F7C\u0F7D" +
		"\x05\u01FA\xFE\x02\u0F7D\u0F7E\x07\u03C3\x02\x02\u0F7E\u0F80\x03\x02\x02" +
		"\x02\u0F7F\u0F7C\x03\x02\x02\x02\u0F7F\u0F80\x03\x02\x02\x02\u0F80\u0F81" +
		"\x03\x02\x02\x02\u0F81\u0F9F\x07\u0106\x02\x02\u0F82\u0F84\x05\u0168\xB5" +
		"\x02\u0F83\u0F82\x03\x02\x02\x02\u0F84\u0F87\x03\x02\x02\x02\u0F85\u0F83" +
		"\x03\x02\x02\x02\u0F85\u0F86\x03\x02\x02\x02\u0F86\u0F8B\x03\x02\x02\x02" +
		"\u0F87\u0F85\x03\x02\x02\x02\u0F88\u0F8A\x05\u016A\xB6\x02\u0F89\u0F88" +
		"\x03\x02\x02\x02\u0F8A\u0F8D\x03\x02\x02\x02\u0F8B\u0F89\x03\x02\x02\x02" +
		"\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F91\x03\x02\x02\x02\u0F8D\u0F8B\x03" +
		"\x02\x02\x02\u0F8E\u0F90\x05\u016C\xB7\x02\u0F8F\u0F8E\x03\x02\x02\x02" +
		"\u0F90\u0F93\x03\x02\x02\x02\u0F91\u0F8F\x03\x02\x02\x02\u0F91\u0F92\x03" +
		"\x02\x02\x02\u0F92\u0F97\x03\x02\x02\x02\u0F93\u0F91\x03\x02\x02\x02\u0F94" +
		"\u0F96\x05\u016E\xB8\x02\u0F95\u0F94\x03\x02\x02\x02\u0F96\u0F99\x03\x02" +
		"\x02\x02\u0F97\u0F95\x03\x02\x02\x02\u0F97\u0F98\x03\x02\x02\x02\u0F98" +
		"\u0F9B\x03\x02\x02\x02\u0F99\u0F97\x03\x02\x02\x02\u0F9A\u0F9C\x05\u0172" +
		"\xBA\x02\u0F9B\u0F9A\x03\x02\x02\x02\u0F9C\u0F9D\x03\x02\x02\x02\u0F9D" +
		"\u0F9B\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E\u0FA0\x03\x02" +
		"\x02\x02\u0F9F\u0F85\x03\x02\x02\x02\u0F9F\u0FA0\x03\x02\x02\x02\u0FA0" +
		"\u0FA1\x03\x02\x02\x02\u0FA1\u0FA3\x07\u0139\x02\x02\u0FA2\u0FA4\x05\u01FA" +
		"\xFE\x02\u0FA3\u0FA2\x03\x02\x02\x02\u0FA3\u0FA4\x03\x02\x02\x02\u0FA4" +
		"\u0155\x03\x02\x02\x02\u0FA5\u0FA8\x07\x16\x02\x02\u0FA6\u0FA9\x05\u01FA" +
		"\xFE\x02\u0FA7\u0FA9\x05\u0246\u0124\x02\u0FA8\u0FA6\x03\x02\x02\x02\u0FA8" +
		"\u0FA7\x03\x02\x02\x02\u0FA8\u0FA9\x03\x02\x02\x02\u0FA9\u0FAB\x03\x02" +
		"\x02\x02\u0FAA\u0FAC\x05\u0174\xBB\x02\u0FAB\u0FAA\x03\x02\x02\x02\u0FAC" +
		"\u0FAD\x03\x02\x02\x02\u0FAD\u0FAB\x03\x02\x02\x02\u0FAD\u0FAE\x03\x02" +
		"\x02\x02\u0FAE\u0FB5\x03\x02\x02\x02\u0FAF\u0FB1\x072\x02\x02\u0FB0\u0FB2" +
		"\x05\u0172\xBA\x02\u0FB1\u0FB0\x03\x02\x02\x02\u0FB2\u0FB3\x03\x02\x02" +
		"\x02\u0FB3\u0FB1\x03\x02\x02\x02\u0FB3\u0FB4\x03\x02\x02\x02\u0FB4\u0FB6" +
		"\x03\x02\x02\x02\u0FB5\u0FAF\x03\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02" +
		"\u0FB6\u0FB7\x03\x02\x02\x02\u0FB7\u0FB8\x07\u0139\x02\x02\u0FB8\u0FB9" +
		"\x07\x16\x02\x02\u0FB9\u0157\x03\x02\x02\x02\u0FBA\u0FBB\x07E\x02\x02" +
		"\u0FBB\u0FBC\x05\u0246\u0124\x02\u0FBC\u0FBE\x07\x98\x02\x02\u0FBD\u0FBF" +
		"\x05\u0172\xBA\x02\u0FBE\u0FBD\x03\x02\x02\x02\u0FBF\u0FC0\x03\x02\x02" +
		"\x02\u0FC0\u0FBE\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1\u0FC5" +
		"\x03\x02\x02\x02\u0FC2\u0FC4\x05\u0176\xBC\x02\u0FC3\u0FC2\x03\x02\x02" +
		"\x02\u0FC4\u0FC7\x03\x02\x02\x02\u0FC5\u0FC3\x03\x02\x02\x02\u0FC5\u0FC6" +
		"\x03\x02\x02\x02\u0FC6\u0FCE\x03\x02\x02\x02\u0FC7\u0FC5\x03\x02\x02\x02" +
		"\u0FC8\u0FCA\x072\x02\x02\u0FC9\u0FCB\x05\u0172\xBA\x02\u0FCA\u0FC9\x03" +
		"\x02\x02\x02\u0FCB\u0FCC\x03\x02\x02\x02\u0FCC\u0FCA\x03\x02\x02\x02\u0FCC" +
		"\u0FCD\x03\x02\x02\x02\u0FCD\u0FCF\x03\x02\x02\x02\u0FCE\u0FC8\x03\x02" +
		"\x02\x02\u0FCE\u0FCF\x03\x02\x02\x02\u0FCF\u0FD0\x03\x02\x02\x02\u0FD0" +
		"\u0FD1\x07\u0139\x02\x02\u0FD1\u0FD2\x07E\x02\x02\u0FD2\u0159\x03\x02" +
		"\x02\x02\u0FD3\u0FD4\x07P\x02\x02\u0FD4\u0FD5\x05\u01FA\xFE\x02\u0FD5" +
		"\u015B\x03\x02\x02\x02\u0FD6\u0FD7\x07V\x02\x02\u0FD7\u0FD8\x05\u01FA" +
		"\xFE\x02\u0FD8\u015D\x03\x02\x02\x02\u0FD9\u0FDA\x05\u01FA\xFE\x02\u0FDA" +
		"\u0FDB\x07\u03C3\x02\x02\u0FDB\u0FDD\x03\x02\x02\x02\u0FDC\u0FD9\x03\x02" +
		"\x02\x02\u0FDC\u0FDD\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02\x02\x02\u0FDE" +
		"\u0FE0\x07^\x02\x02\u0FDF\u0FE1\x05\u0172\xBA\x02\u0FE0\u0FDF\x03\x02" +
		"\x02\x02\u0FE1\u0FE2\x03\x02\x02\x02\u0FE2\u0FE0\x03\x02\x02\x02\u0FE2" +
		"\u0FE3\x03\x02\x02\x02\u0FE3\u0FE4\x03\x02\x02\x02\u0FE4\u0FE5\x07\u0139" +
		"\x02\x02\u0FE5\u0FE7\x07^\x02\x02\u0FE6\u0FE8\x05\u01FA\xFE\x02\u0FE7" +
		"\u0FE6\x03\x02\x02\x02\u0FE7\u0FE8\x03\x02\x02\x02\u0FE8\u015F\x03\x02" +
		"\x02\x02\u0FE9\u0FEA\x05\u01FA\xFE\x02\u0FEA\u0FEB\x07\u03C3\x02\x02\u0FEB" +
		"\u0FED\x03\x02\x02\x02\u0FEC\u0FE9\x03\x02\x02\x02\u0FEC\u0FED\x03\x02" +
		"\x02\x02\u0FED\u0FEE\x03\x02\x02\x02\u0FEE\u0FF0\x07}\x02\x02\u0FEF\u0FF1" +
		"\x05\u0172\xBA\x02\u0FF0\u0FEF\x03\x02\x02\x02\u0FF1\u0FF2\x03\x02\x02" +
		"\x02\u0FF2\u0FF0\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02\x02\x02\u0FF3\u0FF4" +
		"\x03\x02\x02\x02\u0FF4\u0FF5\x07\u0217\x02\x02\u0FF5\u0FF6\x05\u0246\u0124" +
		"\x02\u0FF6\u0FF7\x07\u0139\x02\x02\u0FF7\u0FF9\x07}\x02\x02\u0FF8\u0FFA" +
		"\x05\u01FA\xFE\x02\u0FF9\u0FF8\x03\x02\x02\x02\u0FF9\u0FFA\x03\x02\x02" +
		"\x02\u0FFA\u0161\x03\x02\x02\x02\u0FFB\u0FFC\x07\x81\x02\x02\u0FFC\u0FFD" +
		"\x05\u0246\u0124\x02\u0FFD\u0163\x03\x02\x02\x02\u0FFE\u0FFF\x05\u01FA" +
		"\xFE\x02\u0FFF\u1000\x07\u03C3\x02\x02\u1000\u1002\x03\x02\x02\x02\u1001" +
		"\u0FFE\x03\x02\x02\x02\u1001\u1002\x03\x02\x02\x02\u1002\u1003\x03\x02" +
		"\x02\x02\u1003\u1004\x07\xA9\x02\x02\u1004\u1005\x05\u0246\u0124\x02\u1005" +
		"\u1007\x07\u0133\x02\x02\u1006\u1008\x05\u0172\xBA\x02\u1007\u1006\x03" +
		"\x02\x02\x02\u1008\u1009\x03\x02\x02\x02\u1009\u1007\x03\x02\x02\x02\u1009" +
		"\u100A\x03\x02\x02\x02\u100A\u100B\x03\x02\x02\x02\u100B\u100C\x07\u0139" +
		"\x02\x02\u100C\u100E\x07\xA9\x02\x02\u100D\u100F\x05\u01FA\xFE\x02\u100E" +
		"\u100D\x03\x02\x02\x02\u100E\u100F\x03\x02\x02\x02\u100F\u0165\x03\x02" +
		"\x02\x02\u1010\u1011\x07\u0115\x02\x02\u1011\u1020\x05\u01FA\xFE\x02\u1012" +
		"\u1017\x07:\x02\x02\u1013\u1015\x07\u01A1\x02\x02\u1014\u1013\x03\x02" +
		"\x02\x02\u1014\u1015\x03\x02\x02\x02\u1015\u1016\x03\x02\x02\x02\u1016" +
		"\u1018\x07>\x02\x02\u1017\u1014\x03\x02\x02\x02\u1017\u1018\x03\x02\x02" +
		"\x02\u1018\u1019\x03\x02\x02\x02\u1019\u101A\x05\u01FA\xFE\x02\u101A\u101B" +
		"\x07N\x02\x02\u101B\u101C\x05\u0218\u010D\x02\u101C\u1020\x03\x02\x02" +
		"\x02\u101D\u101E\x07\u01AC\x02\x02\u101E\u1020\x05\u01FA\xFE\x02\u101F" +
		"\u1010\x03\x02\x02\x02\u101F\u1012\x03\x02\x02\x02\u101F\u101D\x03\x02" +
		"\x02\x02\u1020\u0167\x03\x02\x02\x02\u1021\u1022\x07\'\x02\x02\u1022\u1023" +
		"\x05\u0218\u010D\x02\u1023\u1026\x05\u020E\u0108\x02\u1024\u1025\x07(" +
		"\x02\x02\u1025\u1027\x05\u0228\u0115\x02\u1026\u1024\x03\x02\x02\x02\u1026" +
		"\u1027\x03\x02\x02\x02\u1027\u0169\x03\x02\x02\x02\u1028\u1029\x07\'\x02" +
		"\x02\u1029\u102A\x05\u01FA\xFE\x02\u102A\u102B\x07\x1D\x02\x02\u102B\u1032" +
		"\x07;\x02\x02\u102C\u1033\x05\u0200\u0101\x02\u102D\u102F\x07\x8E\x02" +
		"\x02\u102E\u1030\x07\u021D\x02\x02\u102F\u102E\x03\x02\x02\x02\u102F\u1030" +
		"\x03\x02\x02\x02\u1030\u1031\x03\x02\x02\x02\u1031\u1033\x07\u03C7\x02" +
		"\x02\u1032\u102C\x03\x02\x02\x02\u1032\u102D\x03\x02\x02\x02\u1033\u016B" +
		"\x03\x02\x02\x02\u1034\u1035\x07\'\x02\x02\u1035\u1036\x05\u01FA\xFE\x02" +
		"\u1036\u1037\x07$\x02\x02\u1037\u1038\x07;\x02\x02\u1038\u1039\x05\xAE" +
		"X\x02\u1039\u016D\x03\x02\x02\x02\u103A\u103B\x07\'\x02\x02\u103B\u103C" +
		"\t9\x02\x02\u103C\u103D\x07\u015A\x02\x02\u103D\u103E\x07;\x02\x02\u103E" +
		"\u1043\x05\u0170\xB9\x02\u103F\u1040\x07\u03BB\x02\x02\u1040\u1042\x05" +
		"\u0170\xB9\x02\u1041\u103F\x03\x02\x02\x02\u1042\u1045\x03\x02\x02\x02" +
		"\u1043\u1041\x03\x02\x02\x02\u1043\u1044\x03\x02\x02\x02\u1044\u1046\x03" +
		"\x02\x02\x02\u1045\u1043\x03\x02\x02\x02\u1046\u1047\x05\u0152\xAA\x02" +
		"\u1047\u016F\x03\x02\x02\x02\u1048\u1054\x05\u0200\u0101\x02\u1049\u104B" +
		"\x07\x8E\x02\x02\u104A\u104C\x07\u021D\x02\x02\u104B\u104A\x03\x02\x02" +
		"\x02\u104B\u104C\x03\x02\x02\x02\u104C\u104D\x03\x02\x02\x02\u104D\u1054" +
		"\x07\u03C7\x02\x02\u104E\u1054\x05\u01FA\xFE\x02\u104F\u1054\x07\x8F\x02" +
		"\x02\u1050\u1051\x07f\x02\x02\u1051\u1054\x07\u0153\x02\x02\u1052\u1054" +
		"\x07\x8D\x02\x02\u1053\u1048\x03\x02\x02\x02\u1053\u1049\x03\x02\x02\x02" +
		"\u1053\u104E\x03\x02\x02\x02\u1053\u104F\x03\x02\x02\x02\u1053\u1050\x03" +
		"\x02\x02\x02\u1053\u1052\x03\x02\x02\x02\u1054\u0171\x03\x02\x02\x02\u1055" +
		"\u1058\x05\x0E\b\x02\u1056\u1058\x05\x02\x02\x02\u1057\u1055\x03\x02\x02" +
		"\x02\u1057\u1056\x03\x02\x02\x02\u1058\u0173\x03\x02\x02\x02\u1059\u105C" +
		"\x07\xA7\x02\x02\u105A\u105D\x05\u020C\u0107\x02\u105B\u105D\x05\u0246" +
		"\u0124\x02\u105C\u105A\x03\x02\x02\x02\u105C\u105B\x03\x02\x02\x02\u105D" +
		"\u105E\x03\x02\x02\x02\u105E\u1060\x07\x98\x02\x02\u105F\u1061\x05\u0172" +
		"\xBA\x02\u1060\u105F\x03\x02\x02\x02\u1061\u1062\x03\x02\x02\x02\u1062" +
		"\u1060\x03\x02\x02\x02\u1062\u1063\x03\x02\x02\x02\u1063\u0175\x03\x02" +
		"\x02\x02\u1064\u1065\x073\x02\x02\u1065\u1066\x05\u0246\u0124\x02\u1066" +
		"\u1068\x07\x98\x02\x02\u1067\u1069\x05\u0172\xBA\x02\u1068\u1067\x03\x02" +
		"\x02\x02\u1069\u106A\x03\x02\x02\x02\u106A\u1068\x03\x02\x02\x02\u106A" +
		"\u106B\x03\x02\x02\x02\u106B\u0177\x03\x02\x02\x02\u106C\u106D\x07\n\x02" +
		"\x02\u106D\u106E\x07\u0219\x02\x02\u106E\u1073\x05\u018A\xC6\x02\u106F" +
		"\u1070\x07\u03BB\x02\x02\u1070\u1072\x05\u018A\xC6\x02\u1071\u106F\x03" +
		"\x02\x02\x02\u1072\u1075\x03\x02\x02\x02\u1073\u1071\x03\x02\x02\x02\u1073" +
		"\u1074\x03\x02\x02\x02\u1074\u10A3\x03\x02\x02\x02\u1075\u1073\x03\x02" +
		"\x02\x02\u1076\u1077\x07\n\x02\x02\u1077\u1079\x07\u0219\x02\x02\u1078" +
		"\u107A\x05\u022E\u0118\x02\u1079\u1078\x03\x02\x02\x02\u1079\u107A\x03" +
		"\x02\x02\x02\u107A\u107B\x03\x02\x02\x02\u107B\u1080\x05\u018C\xC7\x02" +
		"\u107C\u107D\x07\u03BB\x02\x02\u107D\u107F\x05\u018C\xC7\x02\u107E\u107C" +
		"\x03\x02\x02\x02\u107F\u1082\x03\x02\x02\x02\u1080\u107E\x03\x02\x02\x02" +
		"\u1080\u1081\x03\x02\x02\x02\u1081\u1091\x03\x02\x02\x02\u1082\u1080\x03" +
		"\x02\x02\x02\u1083\u108F\x07\x7F\x02\x02\u1084\u1090\x07\u01A4\x02\x02" +
		"\u1085\u108C\x05\u018E\xC8\x02\u1086\u1088\x07\r\x02\x02\u1087\u1086\x03" +
		"\x02\x02\x02\u1087\u1088\x03\x02\x02\x02\u1088\u1089\x03\x02\x02\x02\u1089" +
		"\u108B\x05\u018E\xC8\x02\u108A\u1087\x03\x02\x02\x02\u108B\u108E\x03\x02" +
		"\x02\x02\u108C\u108A\x03\x02\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D" +
		"\u1090\x03\x02\x02\x02\u108E\u108C\x03\x02\x02\x02\u108F\u1084\x03\x02" +
		"\x02\x02\u108F\u1085\x03\x02\x02\x02\u1090\u1092\x03\x02\x02\x02\u1091" +
		"\u1083\x03\x02\x02\x02\u1091\u1092\x03\x02\x02\x02\u1092\u1099\x03\x02" +
		"\x02\x02\u1093\u1095\x07\xAA\x02\x02\u1094\u1096\x05\u0190\xC9\x02\u1095" +
		"\u1094\x03\x02\x02\x02\u1096\u1097\x03\x02\x02\x02\u1097\u1095\x03\x02" +
		"\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098\u109A\x03\x02\x02\x02\u1099" +
		"\u1093\x03\x02\x02\x02\u1099\u109A\x03\x02\x02\x02\u109A\u109F\x03\x02" +
		"\x02\x02\u109B\u109E\x05\u0192\xCA\x02\u109C\u109E\x05\u0194\xCB\x02\u109D" +
		"\u109B\x03\x02\x02\x02\u109D\u109C\x03\x02\x02\x02\u109E\u10A1\x03\x02" +
		"\x02\x02\u109F\u109D\x03\x02\x02\x02\u109F\u10A0\x03\x02\x02\x02\u10A0" +
		"\u10A3\x03\x02\x02\x02\u10A1\u109F\x03\x02\x02\x02\u10A2\u106C\x03\x02" +
		"\x02\x02\u10A2\u1076\x03\x02\x02\x02\u10A3\u0179\x03\x02\x02\x02\u10A4" +
		"\u10A5\x07!\x02\x02\u10A5\u10A6\x07\u0219\x02\x02\u10A6\u10AB\x05\u018C" +
		"\xC7\x02\u10A7\u10A8\x07\u03BB\x02\x02\u10A8\u10AA\x05\u018C\xC7\x02\u10A9" +
		"\u10A7\x03\x02\x02\x02\u10AA\u10AD\x03\x02\x02\x02\u10AB\u10A9\x03\x02" +
		"\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u10DB\x03\x02\x02\x02\u10AD" +
		"\u10AB\x03\x02\x02\x02\u10AE\u10AF\x07!\x02\x02\u10AF\u10B1\x07\u0219" +
		"\x02\x02\u10B0\u10B2\x05\u0230\u0119\x02\u10B1\u10B0\x03\x02\x02\x02\u10B1" +
		"\u10B2\x03\x02\x02\x02\u10B2\u10B3\x03\x02\x02\x02\u10B3\u10B8\x05\u018C" +
		"\xC7\x02\u10B4\u10B5\x07\u03BB\x02\x02\u10B5\u10B7\x05\u018C\xC7\x02\u10B6" +
		"\u10B4\x03\x02\x02\x02\u10B7\u10BA\x03\x02\x02\x02\u10B8\u10B6\x03\x02" +
		"\x02\x02\u10B8\u10B9\x03\x02\x02\x02\u10B9\u10C9\x03\x02\x02\x02\u10BA" +
		"\u10B8\x03\x02\x02\x02\u10BB\u10C7\x07\x7F\x02\x02\u10BC\u10C8\x07\u01A4" +
		"\x02\x02\u10BD\u10C4\x05\u018E\xC8\x02\u10BE\u10C0\x07\r\x02\x02\u10BF" +
		"\u10BE\x03\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10C1\x03\x02" +
		"\x02\x02\u10C1\u10C3\x05\u018E\xC8\x02\u10C2\u10BF\x03\x02\x02\x02\u10C3" +
		"\u10C6\x03\x02\x02\x02\u10C4\u10C2\x03\x02\x02\x02\u10C4\u10C5\x03\x02" +
		"\x02\x02\u10C5\u10C8\x03\x02\x02\x02\u10C6\u10C4\x03\x02\x02\x02\u10C7" +
		"\u10BC\x03\x02\x02\x02\u10C7\u10BD\x03\x02\x02\x02\u10C8\u10CA\x03\x02" +
		"\x02\x02\u10C9\u10BB\x03\x02\x02\x02\u10C9\u10CA\x03\x02\x02\x02\u10CA" +
		"\u10D1\x03\x02\x02\x02\u10CB\u10CD\x07\xAA\x02\x02\u10CC\u10CE\x05\u0190" +
		"\xC9\x02\u10CD\u10CC\x03\x02\x02\x02\u10CE\u10CF\x03\x02\x02\x02\u10CF" +
		"\u10CD\x03\x02\x02\x02\u10CF\u10D0\x03\x02\x02\x02\u10D0\u10D2\x03\x02" +
		"\x02\x02\u10D1\u10CB\x03\x02\x02\x02\u10D1\u10D2\x03\x02\x02\x02\u10D2" +
		"\u10D7\x03\x02\x02\x02\u10D3\u10D6\x05\u0192\xCA\x02\u10D4\u10D6\x05\u0194" +
		"\xCB\x02\u10D5\u10D3\x03\x02\x02\x02\u10D5\u10D4\x03\x02\x02\x02\u10D6" +
		"\u10D9\x03\x02\x02\x02\u10D7\u10D5\x03\x02\x02\x02\u10D7\u10D8\x03\x02" +
		"\x02\x02\u10D8\u10DB\x03\x02\x02\x02\u10D9\u10D7\x03\x02\x02\x02\u10DA" +
		"\u10A4\x03\x02\x02\x02\u10DA\u10AE\x03\x02\x02\x02\u10DB\u017B\x03\x02" +
		"\x02\x02\u10DC\u10DD\x070\x02\x02\u10DD\u10DF\x07\u0219\x02\x02\u10DE" +
		"\u10E0\x05\u022E\u0118\x02\u10DF\u10DE\x03\x02\x02\x02\u10DF\u10E0\x03" +
		"\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E6\x05\u01E8\xF5\x02" +
		"\u10E2\u10E3\x07\u03BB\x02\x02\u10E3\u10E5\x05\u01E8\xF5\x02\u10E4\u10E2" +
		"\x03\x02\x02\x02\u10E5\u10E8\x03\x02\x02\x02\u10E6\u10E4\x03\x02\x02\x02" +
		"\u10E6\u10E7\x03\x02\x02\x02\u10E7\u017D\x03\x02\x02\x02\u10E8\u10E6\x03" +
		"\x02\x02\x02\u10E9\u10EA\x07A\x02\x02\u10EA\u10EF\x05\u0196\xCC\x02\u10EB" +
		"\u10EC\x07\u03BB\x02\x02\u10EC\u10EE\x05\u0196\xCC\x02\u10ED\u10EB\x03" +
		"\x02\x02\x02\u10EE\u10F1\x03\x02\x02\x02\u10EF\u10ED\x03\x02\x02\x02\u10EF" +
		"\u10F0\x03\x02\x02\x02\u10F0\u10F2\x03\x02\x02\x02\u10F1\u10EF\x03\x02" +
		"\x02\x02\u10F2\u10F4\x07i\x02\x02\u10F3\u10F5\t:\x02\x02\u10F4\u10F3\x03" +
		"\x02\x02\x02\u10F4\u10F5\x03\x02\x02\x02\u10F5\u10F6\x03\x02\x02\x02\u10F6" +
		"\u10F7\x05\u019A\xCE\x02\u10F7\u10F8\x07\x99\x02\x02\u10F8\u10FD\x05\u018C" +
		"\xC7\x02\u10F9\u10FA\x07\u03BB\x02\x02\u10FA\u10FC\x05\u018C\xC7\x02\u10FB" +
		"\u10F9\x03\x02\x02\x02\u10FC\u10FF\x03\x02\x02\x02\u10FD\u10FB\x03\x02" +
		"\x02\x02\u10FD\u10FE\x03\x02\x02\x02\u10FE\u110E\x03\x02\x02\x02\u10FF" +
		"\u10FD\x03\x02\x02\x02\u1100\u110C\x07\x7F\x02\x02\u1101\u110D\x07\u01A4" +
		"\x02\x02\u1102\u1109\x05\u018E\xC8\x02\u1103\u1105\x07\r\x02\x02\u1104" +
		"\u1103\x03\x02\x02\x02\u1104\u1105\x03\x02\x02\x02\u1105\u1106\x03\x02" +
		"\x02\x02\u1106\u1108\x05\u018E\xC8\x02\u1107\u1104\x03\x02\x02\x02\u1108" +
		"\u110B\x03\x02\x02\x02\u1109\u1107\x03\x02\x02\x02\u1109\u110A\x03\x02" +
		"\x02\x02\u110A\u110D\x03\x02\x02\x02\u110B\u1109\x03\x02\x02\x02\u110C" +
		"\u1101\x03\x02\x02\x02\u110C\u1102\x03\x02\x02\x02\u110D\u110F\x03\x02" +
		"\x02\x02\u110E\u1100\x03\x02\x02\x02\u110E\u110F\x03\x02\x02\x02\u110F" +
		"\u1119\x03\x02\x02\x02\u1110\u1116\x07\xAA\x02\x02\u1111\u1112\x07A\x02" +
		"\x02\u1112\u1115\x07k\x02\x02\u1113\u1115\x05\u0190\xC9\x02\u1114\u1111" +
		"\x03\x02\x02\x02\u1114\u1113\x03\x02\x02\x02\u1115\u1118\x03\x02\x02\x02" +
		"\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02\u1117\u111A\x03" +
		"\x02\x02\x02\u1118\u1116\x03\x02\x02\x02\u1119\u1110\x03\x02\x02\x02\u1119" +
		"\u111A\x03\x02\x02\x02\u111A\u017F\x03\x02\x02\x02\u111B\u111C\x07A\x02" +
		"\x02\u111C\u111D\x07\u01C3\x02\x02\u111D\u111E\x07i\x02\x02\u111E\u111F" +
		"\x05\u01E8\xF5\x02\u111F\u1120\x07\x99\x02\x02\u1120\u1125\x05\u01E8\xF5" +
		"\x02\u1121\u1122\x07\u03BB\x02\x02\u1122\u1124\x05\u01E8\xF5\x02\u1123" +
		"\u1121\x03\x02\x02\x02\u1124\u1127\x03\x02\x02\x02\u1125\u1123\x03\x02" +
		"\x02\x02\u1125\u1126\x03\x02\x02\x02\u1126\u112B\x03\x02\x02\x02\u1127" +
		"\u1125\x03\x02\x02\x02\u1128\u1129\x07\xAA\x02\x02\u1129\u112A\x07A\x02" +
		"\x02\u112A\u112C\x07k\x02\x02\u112B\u1128\x03\x02\x02\x02\u112B\u112C" +
		"\x03\x02\x02\x02\u112C\u0181\x03\x02\x02\x02\u112D\u112E\x07|\x02\x02" +
		"\u112E\u112F\x07\u0219\x02\x02\u112F\u1134\x05\u019C\xCF\x02\u1130\u1131" +
		"\x07\u03BB\x02\x02\u1131\u1133\x05\u019C\xCF\x02\u1132\u1130\x03\x02\x02" +
		"\x02\u1133\u1136\x03\x02\x02\x02\u1134\u1132\x03\x02\x02\x02\u1134\u1135" +
		"\x03\x02\x02\x02\u1135\u0183\x03\x02\x02\x02\u1136\u1134\x03\x02\x02\x02" +
		"\u1137\u1138\x07\x82\x02\x02\u1138\u113D\x05\u0196\xCC\x02\u1139\u113A" +
		"\x07\u03BB\x02\x02\u113A\u113C\x05\u0196\xCC\x02\u113B\u1139\x03\x02\x02" +
		"\x02\u113C\u113F\x03\x02\x02\x02\u113D\u113B\x03\x02\x02\x02\u113D\u113E" +
		"\x03\x02\x02\x02\u113E\u1140\x03\x02\x02\x02\u113F\u113D\x03\x02\x02\x02" +
		"\u1140\u1142\x07i\x02\x02\u1141\u1143\t:\x02\x02\u1142\u1141\x03\x02\x02" +
		"\x02\u1142\u1143\x03\x02\x02\x02\u1143\u1144\x03\x02\x02\x02\u1144\u1145" +
		"\x05\u019A\xCE\x02\u1145\u1146\x07>\x02\x02\u1146\u114B\x05\u01E8\xF5" +
		"\x02\u1147\u1148\x07\u03BB\x02\x02\u1148\u114A\x05\u01E8\xF5\x02\u1149" +
		"\u1147\x03\x02\x02\x02\u114A\u114D\x03\x02\x02\x02\u114B\u1149\x03\x02" +
		"\x02\x02\u114B\u114C\x03\x02\x02\x02\u114C\u1160\x03\x02\x02\x02\u114D" +
		"\u114B\x03\x02\x02\x02\u114E\u114F\x07\x82\x02\x02\u114F\u1151\x07\t\x02" +
		"\x02\u1150\u1152\x07\u023E\x02\x02\u1151\u1150\x03\x02\x02\x02\u1151\u1152" +
		"\x03\x02\x02\x02\u1152\u1153\x03\x02\x02\x02\u1153\u1154\x07\u03BB\x02" +
		"\x02\u1154\u1155\x07A\x02\x02\u1155\u1156\x07k\x02\x02\u1156\u1157\x07" +
		">\x02\x02\u1157\u115C\x05\u01E8\xF5\x02\u1158\u1159\x07\u03BB\x02\x02" +
		"\u1159\u115B\x05\u01E8\xF5\x02\u115A\u1158\x03\x02\x02\x02\u115B\u115E" +
		"\x03\x02\x02\x02\u115C\u115A\x03\x02\x02\x02\u115C\u115D\x03\x02\x02\x02" +
		"\u115D\u1160\x03\x02\x02\x02\u115E\u115C\x03\x02\x02\x02\u115F\u1137\x03" +
		"\x02\x02\x02\u115F\u114E\x03\x02\x02\x02\u1160\u0185\x03\x02\x02\x02\u1161" +
		"\u1162\x07\x82\x02\x02\u1162\u1163\x07\u01C3\x02\x02\u1163\u1164\x07i" +
		"\x02\x02\u1164\u1165\x05\u01E8\xF5\x02\u1165\u1166\x07>\x02\x02\u1166" +
		"\u116B\x05\u01E8\xF5\x02\u1167\u1168\x07\u03BB\x02\x02\u1168\u116A\x05" +
		"\u01E8\xF5\x02\u1169\u1167\x03\x02\x02\x02\u116A\u116D\x03\x02\x02\x02" +
		"\u116B\u1169\x03\x02\x02\x02\u116B\u116C\x03\x02\x02\x02\u116C\u0187\x03" +
		"\x02\x02\x02\u116D\u116B\x03\x02\x02\x02\u116E\u116F\x07\x88\x02\x02\u116F" +
		"\u1172\x07\u01B6\x02\x02\u1170\u1171\x07;\x02\x02\u1171\u1173\x05\u01E8" +
		"\xF5\x02\u1172\u1170\x03\x02\x02\x02\u1172\u1173\x03\x02\x02\x02\u1173" +
		"\u1174\x03\x02\x02\x02\u1174\u1177\x07\u03B0\x02\x02\u1175\u1178\x05\u0240" +
		"\u0121\x02\u1176\u1178\x07\u03C7\x02\x02\u1177\u1175\x03\x02\x02\x02\u1177" +
		"\u1176\x03\x02\x02\x02\u1178\u0189\x03\x02\x02\x02\u1179\u117A\x05\u01E8" +
		"\xF5\x02\u117A\u117B\x05\u0192\xCA\x02\u117B\u018B\x03\x02\x02\x02\u117C" +
		"\u117D\x05\u01E8\xF5\x02\u117D\u117E\x07\u015F\x02\x02\u117E";
	private static readonly _serializedATNSegment9: string =
		"\u117F\x07\x13\x02\x02\u117F\u1180\x07\u01B6\x02\x02\u1180\u1181\x07\u03C7" +
		"\x02\x02\u1181\u1195\x03\x02\x02\x02\u1182\u1183\x05\u01E8\xF5\x02\u1183" +
		"\u1186\x07\u015F\x02\x02\u1184\u1185\x07\xAA\x02\x02\u1185\u1187\x05\u01F8" +
		"\xFD\x02\u1186\u1184\x03\x02\x02\x02\u1186\u1187\x03\x02\x02\x02\u1187" +
		"\u1188\x03\x02\x02\x02\u1188\u1189\x07\x13\x02\x02\u1189\u118A\x07\u03C7" +
		"\x02\x02\u118A\u1195\x03\x02\x02\x02\u118B\u118C\x05\u01E8\xF5\x02\u118C" +
		"\u118D\x07\u015F\x02\x02\u118D\u118E\x07\xAA\x02\x02\u118E\u1191\x05\u01F8" +
		"\xFD\x02\u118F\u1190\x07\x0E\x02\x02\u1190\u1192\x07\u03C7\x02\x02\u1191" +
		"\u118F\x03\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u1195\x03\x02" +
		"\x02\x02\u1193\u1195\x05\u01E8\xF5\x02\u1194\u117C\x03\x02\x02\x02\u1194" +
		"\u1182\x03\x02\x02\x02\u1194\u118B\x03\x02\x02\x02\u1194\u1193\x03\x02" +
		"\x02\x02\u1195\u018D\x03\x02\x02\x02\u1196\u119F\x07\x93\x02\x02\u1197" +
		"\u119F\x07\u0226\x02\x02\u1198\u1199\x07\u0113\x02\x02\u1199\u119F\x07" +
		"\u03C7\x02\x02\u119A\u119B\x07\u016D\x02\x02\u119B\u119F\x07\u03C7\x02" +
		"\x02\u119C\u119D\x07\u0204\x02\x02\u119D\u119F\x07\u03C7\x02\x02\u119E" +
		"\u1196\x03\x02\x02\x02\u119E\u1197\x03\x02\x02\x02\u119E\u1198\x03\x02" +
		"\x02\x02\u119E\u119A\x03\x02\x02\x02\u119E\u119C\x03\x02\x02\x02\u119F" +
		"\u018F\x03\x02\x02\x02\u11A0\u11A1\x07\u018F\x02\x02\u11A1\u11A9\x05\u0200" +
		"\u0101\x02\u11A2\u11A3\x07\u0192\x02\x02\u11A3\u11A9\x05\u0200\u0101\x02" +
		"\u11A4\u11A5\x07\u018E\x02\x02\u11A5\u11A9\x05\u0200\u0101\x02\u11A6\u11A7" +
		"\x07\u0193\x02\x02\u11A7\u11A9\x05\u0200\u0101\x02\u11A8\u11A0\x03\x02" +
		"\x02\x02\u11A8\u11A2\x03\x02\x02\x02\u11A8\u11A4\x03\x02\x02\x02\u11A8" +
		"\u11A6\x03\x02\x02\x02\u11A9\u0191\x03\x02\x02\x02\u11AA\u11AB\x07\u01B6" +
		"\x02\x02\u11AB\u11B2\x07\u0146\x02\x02\u11AC\u11B3\x07(\x02\x02\u11AD" +
		"\u11B3\x07\u01A0\x02\x02\u11AE\u11AF\x07M\x02\x02\u11AF\u11B0\x05\u0200" +
		"\u0101\x02\u11B0\u11B1\x07\u0230\x02\x02\u11B1\u11B3\x03\x02\x02\x02\u11B2" +
		"\u11AC\x03\x02\x02\x02\u11B2\u11AD\x03\x02\x02\x02\u11B2\u11AE\x03\x02" +
		"\x02\x02\u11B2\u11B3\x03\x02\x02\x02\u11B3\u0193\x03\x02\x02\x02\u11B4" +
		"\u11B5\x07\xFA\x02\x02\u11B5\u11B6\t;\x02\x02\u11B6\u0195\x03\x02\x02" +
		"\x02\u11B7\u11BC\x05\u0198\xCD\x02\u11B8\u11B9\x07\u03B9\x02\x02\u11B9" +
		"\u11BA\x05\u0218\u010D\x02\u11BA\u11BB\x07\u03BA\x02\x02\u11BB\u11BD\x03" +
		"\x02\x02\x02\u11BC\u11B8\x03\x02\x02\x02\u11BC\u11BD\x03\x02\x02\x02\u11BD" +
		"\u0197\x03\x02\x02\x02\u11BE\u11C0\x07\t\x02\x02\u11BF\u11C1\x07\u023E" +
		"\x02\x02\u11C0\u11BF\x03\x02\x02\x02\u11C0\u11C1\x03\x02\x02\x02\u11C1" +
		"\u11E9\x03\x02\x02\x02\u11C2\u11C4\x07\n\x02\x02\u11C3\u11C5\x07\u0237" +
		"\x02\x02\u11C4\u11C3\x03\x02\x02\x02\u11C4\u11C5\x03\x02\x02\x02\u11C5" +
		"\u11E9\x03\x02\x02\x02\u11C6\u11CD\x07!\x02\x02\u11C7\u11C8\x07\u020B" +
		"\x02\x02\u11C8\u11CE\x07\u0236\x02\x02\u11C9\u11CE\x07\u0237\x02\x02\u11CA" +
		"\u11CE\x07\u021F\x02\x02\u11CB\u11CE\x07\u0219\x02\x02\u11CC\u11CE\x07" +
		"\u020A\x02\x02\u11CD\u11C7\x03\x02\x02\x02\u11CD\u11C9\x03\x02\x02\x02" +
		"\u11CD\u11CA\x03\x02\x02\x02\u11CD\u11CB\x03\x02\x02\x02\u11CD\u11CC\x03" +
		"\x02\x02\x02\u11CD\u11CE\x03\x02\x02\x02\u11CE\u11E9\x03\x02\x02\x02\u11CF" +
		"\u11E9\x07*\x02\x02\u11D0\u11E9\x070\x02\x02\u11D1\u11E9\x07\u0141\x02" +
		"\x02\u11D2\u11E9\x07\u0238\x02\x02\u11D3\u11E9\x07\u0239\x02\x02\u11D4" +
		"\u11D5\x07A\x02\x02\u11D5\u11E9\x07k\x02\x02\u11D6\u11E9\x07H\x02\x02" +
		"\u11D7\u11E9\x07L\x02\x02\u11D8\u11D9\x07]\x02\x02\u11D9\u11E9\x07\u0236" +
		"\x02\x02\u11DA\u11E9\x07\u023A\x02\x02\u11DB\u11E9\x07\u01C3\x02\x02\u11DC" +
		"\u11E9\x07y\x02\x02\u11DD\u11E9\x07\u023B\x02\x02\u11DE\u11DF\x07\u01D8" +
		"\x02\x02\u11DF\u11E9\t<\x02\x02\u11E0\u11E9\x07\x87\x02\x02\u11E1\u11E2" +
		"\x07\x8A\x02\x02\u11E2\u11E9\t=\x02\x02\u11E3\u11E9\x07\u023C\x02\x02" +
		"\u11E4\u11E9\x07\u023D\x02\x02\u11E5\u11E9\x07\x9B\x02\x02\u11E6\u11E9" +
		"\x07\xA2\x02\x02\u11E7\u11E9\x07\xA3\x02\x02\u11E8\u11BE\x03\x02\x02\x02" +
		"\u11E8\u11C2\x03\x02\x02\x02\u11E8\u11C6\x03\x02\x02\x02\u11E8\u11CF\x03" +
		"\x02\x02\x02\u11E8\u11D0\x03\x02\x02\x02\u11E8\u11D1\x03\x02\x02\x02\u11E8" +
		"\u11D2\x03\x02\x02\x02\u11E8\u11D3\x03\x02\x02\x02\u11E8\u11D4\x03\x02" +
		"\x02\x02\u11E8\u11D6\x03\x02\x02\x02\u11E8\u11D7\x03\x02\x02\x02\u11E8" +
		"\u11D8\x03\x02\x02\x02\u11E8\u11DA\x03\x02\x02\x02\u11E8\u11DB\x03\x02" +
		"\x02\x02\u11E8\u11DC\x03\x02\x02\x02\u11E8\u11DD\x03\x02\x02\x02\u11E8" +
		"\u11DE\x03\x02\x02\x02\u11E8\u11E0\x03\x02\x02\x02\u11E8\u11E1\x03\x02" +
		"\x02\x02\u11E8\u11E3\x03\x02\x02\x02\u11E8\u11E4\x03\x02\x02\x02\u11E8" +
		"\u11E5\x03\x02\x02\x02\u11E8\u11E6\x03\x02\x02\x02\u11E8\u11E7\x03\x02" +
		"\x02\x02\u11E9\u0199\x03\x02\x02\x02\u11EA\u11F8\x07\u03A8\x02\x02\u11EB" +
		"\u11EC\x07\u03A8\x02\x02\u11EC\u11ED\x07\u03B8\x02\x02\u11ED\u11F8\x07" +
		"\u03A8\x02\x02\u11EE\u11EF\x05\u01FA\xFE\x02\u11EF\u11F0\x07\u03B8\x02" +
		"\x02\u11F0\u11F1\x07\u03A8\x02\x02\u11F1\u11F8\x03\x02\x02\x02\u11F2\u11F3" +
		"\x05\u01FA\xFE\x02\u11F3\u11F4\x07\u03B8\x02\x02\u11F4\u11F5\x05\u01FA" +
		"\xFE\x02\u11F5\u11F8\x03\x02\x02\x02\u11F6\u11F8\x05\u01FA\xFE\x02\u11F7" +
		"\u11EA\x03\x02\x02\x02\u11F7\u11EB\x03\x02\x02\x02\u11F7\u11EE\x03\x02" +
		"\x02\x02\u11F7\u11F2\x03\x02\x02\x02\u11F7\u11F6\x03\x02\x02\x02\u11F8" +
		"\u019B\x03\x02\x02\x02\u11F9\u11FA\x05\u01E8\xF5\x02\u11FA\u11FB\x07\x99" +
		"\x02\x02\u11FB\u11FC\x05\u01E8\xF5\x02\u11FC\u019D\x03\x02\x02\x02\u11FD" +
		"\u11FF\x07\f\x02\x02\u11FE\u1200\t>\x02\x02\u11FF\u11FE\x03\x02\x02\x02" +
		"\u11FF\u1200\x03\x02\x02\x02\u1200\u1201\x03\x02\x02\x02\u1201\u1202\x07" +
		"\x96\x02\x02\u1202\u1203\x05\u021A\u010E\x02\u1203\u019F\x03\x02\x02\x02" +
		"\u1204\u1205\x07\x1A\x02\x02\u1205\u1206\x07\x96\x02\x02\u1206\u120A\x05" +
		"\u021A\u010E\x02\u1207\u1209\x05\u01A8\xD5\x02\u1208\u1207\x03\x02\x02" +
		"\x02\u1209\u120C\x03\x02\x02\x02\u120A\u1208\x03\x02\x02\x02\u120A\u120B" +
		"\x03\x02\x02\x02\u120B\u01A1\x03\x02\x02\x02\u120C\u120A\x03\x02\x02\x02" +
		"\u120D\u120E\x07\u0112\x02\x02\u120E\u120F\x07\x96\x02\x02\u120F\u1211" +
		"\x05\u021A\u010E\x02\u1210\u1212\t?\x02\x02\u1211\u1210\x03\x02\x02\x02" +
		"\u1211\u1212\x03\x02\x02\x02\u1212\u01A3\x03\x02\x02\x02\u1213\u1215\x07" +
		"j\x02\x02\u1214\u1216\t>\x02\x02\u1215\u1214\x03\x02\x02\x02\u1215\u1216" +
		"\x03\x02\x02\x02\u1216\u1217\x03\x02\x02\x02\u1217\u1218\x07\x96\x02\x02" +
		"\u1218\u1219\x05\u021A\u010E\x02\u1219\u01A5\x03\x02\x02\x02\u121A\u121C" +
		"\x07\u01D0\x02\x02\u121B\u121D\t>\x02\x02\u121C\u121B\x03\x02\x02\x02" +
		"\u121C\u121D\x03\x02\x02\x02\u121D\u121E\x03\x02\x02\x02\u121E\u121F\x07" +
		"\x96\x02\x02\u121F\u1221\x05\u021A\u010E\x02\u1220\u1222\x07\u01C5\x02" +
		"\x02\u1221\u1220\x03\x02\x02\x02\u1221\u1222\x03\x02\x02\x02\u1222\u1224" +
		"\x03\x02\x02\x02\u1223\u1225\x07\u0148\x02\x02\u1224\u1223\x03\x02\x02" +
		"\x02\u1224\u1225\x03\x02\x02\x02\u1225\u1227\x03\x02\x02\x02\u1226\u1228" +
		"\x07\u021A\x02\x02\u1227\u1226\x03\x02\x02\x02\u1227\u1228\x03\x02\x02" +
		"\x02\u1228\u01A7\x03\x02\x02\x02\u1229\u122A\x07;\x02\x02\u122A\u1231" +
		"\x07\u0218\x02\x02\u122B\u1231\x07\u01C5\x02\x02\u122C\u1231\x07\u014A" +
		"\x02\x02\u122D\u1231\x07\u0194\x02\x02\u122E\u1231\x07\u0148\x02\x02\u122F" +
		"\u1231\x07\u0110\x02\x02\u1230\u1229\x03\x02\x02\x02\u1230\u122B\x03\x02" +
		"\x02\x02\u1230\u122C\x03\x02\x02\x02\u1230\u122D\x03\x02\x02\x02\u1230" +
		"\u122E\x03\x02\x02\x02\u1230\u122F\x03\x02\x02\x02\u1231\u01A9\x03\x02" +
		"\x02\x02\u1232\u1234\x07!\x02\x02\u1233\u1235\x07\xFD\x02\x02\u1234\u1233" +
		"\x03\x02\x02\x02\u1234\u1235\x03\x02\x02\x02\u1235\u1236\x03\x02\x02\x02" +
		"\u1236\u1237\x07\u0155\x02\x02\u1237\u1238\x05\u01FA\xFE\x02\u1238\u1239" +
		"\x07\u01DB\x02\x02\u1239\u123A\t@\x02\x02\u123A\u123B\x07\u01F0\x02\x02" +
		"\u123B\u123C\x07\u03C7\x02\x02\u123C\u01AB\x03\x02\x02\x02\u123D\u123E" +
		"\x07\u0166\x02\x02\u123E\u123F\x07\u01B8\x02\x02\u123F\u1240\x05\u01FA" +
		"\xFE\x02\u1240\u1241\x07\u01F0\x02\x02\u1241\u1242\x07\u03C7\x02\x02\u1242" +
		"\u01AD\x03\x02\x02\x02\u1243\u1244\x07\u0215\x02\x02\u1244\u1245\x07\u01B8" +
		"\x02\x02\u1245\u1246\x05\u01FA\xFE\x02\u1246\u01AF\x03\x02\x02\x02\u1247" +
		"\u1248\x07\x88\x02\x02\u1248\u1249\x05\u01B4\xDB\x02\u1249\u124A\x07\u03B0" +
		"\x02\x02\u124A\u1252\x05\u0246\u0124\x02\u124B\u124C\x07\u03BB\x02\x02" +
		"\u124C\u124D\x05\u01B4\xDB\x02\u124D\u124E\x07\u03B0\x02\x02\u124E\u124F" +
		"\x05\u0246\u0124\x02\u124F\u1251\x03\x02\x02\x02\u1250\u124B\x03\x02\x02" +
		"\x02\u1251\u1254\x03\x02\x02\x02\u1252\u1250\x03\x02\x02\x02\u1252\u1253" +
		"\x03\x02\x02\x02\u1253\u126D\x03\x02\x02\x02\u1254\u1252\x03\x02\x02\x02" +
		"\u1255\u1259\x07\x88\x02\x02\u1256\u1257\x07\x19\x02\x02\u1257\u125A\x07" +
		"\x88\x02\x02\u1258\u125A\x07\u0299\x02\x02\u1259\u1256\x03\x02\x02\x02" +
		"\u1259\u1258\x03\x02\x02\x02\u125A\u125D\x03\x02\x02\x02\u125B\u125E\x05" +
		"\u01EC\xF7\x02\u125C\u125E\x07(\x02\x02\u125D\u125B\x03\x02\x02\x02\u125D" +
		"\u125C\x03\x02\x02\x02\u125E\u126D\x03\x02\x02\x02\u125F\u1260\x07\x88" +
		"\x02\x02\u1260\u1267\x07\u019E\x02\x02\u1261\u1264\x05\u01EC\xF7\x02\u1262" +
		"\u1263\x07\x1B\x02\x02\u1263\u1265\x05\u01EE\xF8\x02\u1264\u1262\x03\x02" +
		"\x02\x02\u1264\u1265\x03\x02\x02\x02\u1265\u1268\x03\x02\x02\x02\u1266" +
		"\u1268\x07(\x02\x02\u1267\u1261\x03\x02\x02\x02\u1267\u1266\x03\x02\x02" +
		"\x02\u1268\u126D\x03\x02\x02\x02\u1269\u126D\x05\u0188\xC5\x02\u126A\u126D" +
		"\x05\u010C\x87\x02\u126B\u126D\x05\u010A\x86\x02\u126C\u1247\x03\x02\x02" +
		"\x02\u126C\u1255\x03\x02\x02\x02\u126C\u125F\x03\x02\x02\x02\u126C\u1269" +
		"\x03\x02\x02\x02\u126C\u126A\x03\x02\x02\x02\u126C\u126B\x03\x02\x02\x02" +
		"\u126D\u01B1\x03\x02\x02\x02\u126E\u126F\x07\x8A\x02\x02\u126F\u1270\t" +
		"0\x02\x02\u1270\u1306\x07\u0178\x02\x02\u1271\u1272\x07\x8A\x02\x02\u1272" +
		"\u1273\tA\x02\x02\u1273\u1276\x07\u0142\x02\x02\u1274\u1275\x07G\x02\x02" +
		"\u1275\u1277\x07\u03C7\x02\x02\u1276\u1274\x03\x02\x02\x02\u1276\u1277" +
		"\x03\x02\x02\x02\u1277\u127A\x03\x02\x02\x02\u1278\u1279\x07>\x02\x02" +
		"\u1279\u127B\x05\u0200\u0101\x02\u127A\u1278\x03\x02\x02\x02\u127A\u127B" +
		"\x03\x02\x02\x02\u127B\u1283\x03\x02\x02\x02\u127C\u1280\x07Y\x02\x02" +
		"\u127D\u127E\x05\u0200\u0101\x02\u127E\u127F\x07\u03BB\x02\x02\u127F\u1281" +
		"\x03\x02\x02\x02\u1280\u127D\x03\x02\x02\x02\u1280\u1281\x03\x02\x02\x02" +
		"\u1281\u1282\x03\x02\x02\x02\u1282\u1284\x05\u0200\u0101\x02\u1283\u127C" +
		"\x03\x02\x02\x02\u1283\u1284\x03\x02\x02\x02\u1284\u1306\x03\x02\x02\x02" +
		"\u1285\u1286\x07\x8A\x02\x02\u1286\u1288\x05\u01B6\xDC\x02\u1287\u1289" +
		"\x05\u01B8\xDD\x02\u1288\u1287\x03\x02\x02\x02\u1288\u1289\x03\x02\x02" +
		"\x02\u1289\u1306\x03\x02\x02\x02\u128A\u128C\x07\x8A\x02\x02\u128B\u128D" +
		"\x07\u0154\x02\x02\u128C\u128B\x03\x02\x02\x02\u128C\u128D\x03\x02\x02" +
		"\x02\u128D\u128E\x03\x02\x02\x02\u128E\u128F\t\"\x02\x02\u128F\u1290\t" +
		"B\x02\x02\u1290\u1293\x05\u01E2\xF2\x02\u1291\u1292\tB\x02\x02\u1292\u1294" +
		"\x05\u01FA\xFE\x02\u1293\u1291\x03\x02\x02\x02\u1293\u1294\x03\x02\x02" +
		"\x02\u1294\u1296\x03\x02\x02\x02\u1295\u1297\x05\u01B8\xDD\x02\u1296\u1295" +
		"\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297\u1306\x03\x02\x02\x02" +
		"\u1298\u1299\x07\x8A\x02\x02\u1299\u129A\x07!\x02\x02\u129A\u129C\t\x02" +
		"\x02\x02\u129B\u129D\x05\u0230\u0119\x02\u129C\u129B\x03\x02\x02\x02\u129C" +
		"\u129D\x03\x02\x02\x02\u129D\u129E\x03\x02\x02\x02\u129E\u1306\x05\u01FA" +
		"\xFE\x02\u129F\u12A0\x07\x8A\x02\x02\u12A0\u12A1\x07!\x02\x02\u12A1\u12A2" +
		"\tC\x02\x02\u12A2\u1306\x05\u01E0\xF1\x02\u12A3\u12A4\x07\x8A\x02\x02" +
		"\u12A4\u12A5\x07!\x02\x02\u12A5\u12A6\x07\u0219\x02\x02\u12A6\u1306\x05" +
		"\u01E8\xF5\x02\u12A7\u12A8\x07\x8A\x02\x02\u12A8\u12A9\x07\u013B\x02\x02" +
		"\u12A9\u12AA\x05\u01F0\xF9\x02\u12AA\u12AB\tD\x02\x02\u12AB\u1306\x03" +
		"\x02\x02\x02\u12AC\u12AD\x07\x8A\x02\x02\u12AD\u1306\x05\u01BA\xDE\x02" +
		"\u12AE\u12AF\x07\x8A\x02\x02\u12AF\u12B0\tE\x02\x02\u12B0\u12B4\x07Y\x02" +
		"\x02\u12B1\u12B2\x05\u0200\u0101\x02\u12B2\u12B3\x07\u03BB\x02\x02\u12B3" +
		"\u12B5\x03\x02\x02\x02\u12B4\u12B1\x03\x02\x02\x02\u12B4\u12B5\x03\x02" +
		"\x02\x02\u12B5\u12B6\x03\x02\x02\x02\u12B6\u1306\x05\u0200\u0101\x02\u12B7" +
		"\u12B8\x07\x8A\x02\x02\u12B8\u12B9\x07\xDB\x02\x02\u12B9\u12BA\x07\u03B9" +
		"\x02\x02\u12BA\u12BB\x07\u03A8\x02\x02\u12BB\u12BC\x07\u03BA\x02\x02\u12BC" +
		"\u1306\tE\x02\x02\u12BD\u12BE\x07\x8A\x02\x02\u12BE\u12C1\x05\u01BC\xDF" +
		"\x02\u12BF\u12C0\tB\x02\x02\u12C0\u12C2\x05\u01FA\xFE\x02\u12C1\u12BF" +
		"\x03\x02\x02\x02\u12C1\u12C2\x03\x02\x02\x02\u12C2\u12C4\x03\x02\x02\x02" +
		"\u12C3\u12C5\x05\u01B8\xDD\x02\u12C4\u12C3\x03\x02\x02\x02\u12C4\u12C5" +
		"\x03\x02\x02\x02\u12C5\u1306\x03\x02\x02\x02\u12C6\u12C7\x07\x8A\x02\x02" +
		"\u12C7\u12C8\tF\x02\x02\u12C8\u12C9\x07\u0117\x02\x02\u12C9\u1306\x05" +
		"\u01E0\xF1\x02\u12CA\u12CB\x07\x8A\x02\x02\u12CB\u12CE\x07\u0158\x02\x02" +
		"\u12CC\u12CD\x07;\x02\x02\u12CD\u12CF\x05\u01E8\xF5\x02\u12CE\u12CC\x03" +
		"\x02\x02\x02\u12CE\u12CF\x03\x02\x02\x02\u12CF\u1306\x03\x02\x02\x02\u12D0" +
		"\u12D1\x07\x8A\x02\x02\u12D1\u12D2\tG\x02\x02\u12D2\u12D3\tB\x02\x02\u12D3" +
		"\u12D6\x05\u01E2\xF2\x02\u12D4\u12D5\tB\x02\x02\u12D5\u12D7\x05\u01FA" +
		"\xFE\x02\u12D6\u12D4\x03\x02\x02\x02\u12D6\u12D7\x03\x02\x02\x02\u12D7" +
		"\u12DA\x03\x02\x02\x02\u12D8\u12D9\x07\xA8\x02\x02\u12D9\u12DB\x05\u0246" +
		"\u0124\x02\u12DA\u12D8\x03\x02\x02\x02\u12DA\u12DB\x03\x02\x02\x02\u12DB" +
		"\u1306\x03\x02\x02\x02\u12DC\u12DD\x07\x8A\x02\x02\u12DD\u12DE\x07\u01AC" +
		"\x02\x02\u12DE\u12E1\x07\u0236\x02\x02\u12DF\u12E0\tB\x02\x02\u12E0\u12E2" +
		"\x05\u01FA\xFE\x02\u12E1\u12DF\x03\x02\x02\x02\u12E1\u12E2\x03\x02\x02" +
		"\x02\u12E2\u12E4\x03\x02\x02\x02\u12E3\u12E5\x05\u01B8\xDD\x02\u12E4\u12E3" +
		"\x03\x02\x02\x02\u12E4\u12E5\x03\x02\x02\x02\u12E5\u1306\x03\x02\x02\x02" +
		"\u12E6\u12E7\x07\x8A\x02\x02\u12E7\u12E8\x07\u01C1\x02\x02\u12E8\u12ED" +
		"\x05\u01BE\xE0\x02\u12E9\u12EA\x07\u03BB\x02\x02\u12EA\u12EC\x05\u01BE" +
		"\xE0\x02\u12EB\u12E9\x03\x02\x02\x02\u12EC\u12EF\x03\x02\x02\x02\u12ED" +
		"\u12EB\x03\x02\x02\x02\u12ED\u12EE\x03\x02\x02\x02\u12EE\u12F3\x03\x02" +
		"\x02\x02\u12EF\u12ED\x03\x02\x02\x02\u12F0\u12F1\x07;\x02\x02\u12F1\u12F2" +
		"\x07\u01C4\x02\x02\u12F2\u12F4\x05\u0200\u0101\x02\u12F3\u12F0\x03\x02" +
		"\x02\x02\u12F3\u12F4\x03\x02\x02\x02\u12F4\u12F5\x03\x02\x02\x02\u12F5" +
		"\u12F9\x07Y\x02\x02\u12F6\u12F7\x05\u0200\u0101\x02\u12F7\u12F8\x07\u03BB" +
		"\x02\x02\u12F8\u12FA\x03\x02\x02\x02\u12F9\u12F6\x03\x02\x02\x02\u12F9" +
		"\u12FA\x03\x02\x02\x02\u12FA\u12FB\x03\x02\x02\x02\u12FB\u12FC\x05\u0200" +
		"\u0101\x02\u12FC\u1306\x03\x02\x02\x02\u12FD\u12FE\x07\x8A\x02\x02\u12FE" +
		"\u12FF\x07\u01EB\x02\x02\u12FF\u1303\x07\u01FF\x02\x02\u1300\u1301\x07" +
		";\x02\x02\u1301\u1302\x07\u0111\x02\x02\u1302\u1304\x07\u03C7\x02\x02" +
		"\u1303\u1300\x03\x02\x02\x02\u1303\u1304\x03\x02\x02\x02\u1304\u1306\x03" +
		"\x02\x02\x02\u1305\u126E\x03\x02\x02\x02\u1305\u1271\x03\x02\x02\x02\u1305" +
		"\u1285\x03\x02\x02\x02\u1305\u128A\x03\x02\x02\x02\u1305\u1298\x03\x02" +
		"\x02\x02\u1305\u129F\x03\x02\x02\x02\u1305\u12A3\x03\x02\x02\x02\u1305" +
		"\u12A7\x03\x02\x02\x02\u1305\u12AC\x03\x02\x02\x02\u1305\u12AE\x03\x02" +
		"\x02\x02\u1305\u12B7\x03\x02\x02\x02\u1305\u12BD\x03\x02\x02\x02\u1305" +
		"\u12C6\x03\x02\x02\x02\u1305\u12CA\x03\x02\x02\x02\u1305\u12D0\x03\x02" +
		"\x02\x02\u1305\u12DC\x03\x02\x02\x02\u1305\u12E6\x03\x02\x02\x02\u1305" +
		"\u12FD\x03\x02\x02\x02\u1306\u01B3\x03\x02\x02\x02\u1307\u1312\x07\u03D2" +
		"\x02\x02\u1308\u1312\x07\u03D3\x02\x02\u1309\u130A\x07\u03BC\x02\x02\u130A" +
		"\u130C\x07\u03BC\x02\x02\u130B\u1309\x03\x02\x02\x02\u130B\u130C\x03\x02" +
		"\x02\x02\u130C\u130D\x03\x02\x02\x02\u130D\u130F\t/\x02\x02\u130E\u130B" +
		"\x03\x02\x02\x02\u130E\u130F\x03\x02\x02\x02\u130F\u1310\x03\x02\x02\x02" +
		"\u1310\u1312\x05\u01FA\xFE\x02\u1311\u1307\x03\x02\x02\x02\u1311\u1308" +
		"\x03\x02\x02\x02\u1311\u130E\x03\x02\x02\x02\u1312\u01B5\x03\x02\x02\x02" +
		"\u1313\u1314\x07\x19\x02\x02\u1314\u1321\x07\x88\x02\x02\u1315\u1321\x07" +
		"\u029C\x02\x02\u1316\u1321\x07&\x02\x02\u1317\u1321\x07\x86\x02\x02\u1318" +
		"\u1319\x07\u0155\x02\x02\u1319\u1321\x07\u01FF\x02\x02\u131A\u131B\x07" +
		"t\x02\x02\u131B\u1321\x07\u01FF\x02\x02\u131C\u131E\t/\x02\x02\u131D\u131C" +
		"\x03\x02\x02\x02\u131D\u131E\x03\x02\x02\x02\u131E\u131F\x03\x02\x02\x02" +
		"\u131F\u1321\tH\x02\x02\u1320\u1313\x03\x02\x02\x02\u1320\u1315\x03\x02" +
		"\x02\x02\u1320\u1316\x03\x02\x02\x02\u1320\u1317\x03\x02\x02\x02\u1320" +
		"\u1318\x03\x02\x02\x02\u1320\u131A\x03\x02\x02\x02\u1320\u131D\x03\x02" +
		"\x02\x02\u1321\u01B7\x03\x02\x02\x02\u1322\u1323\x07X\x02\x02\u1323\u1327" +
		"\x07\u03C7\x02\x02\u1324\u1325\x07\xA8\x02\x02\u1325\u1327\x05\u0246\u0124" +
		"\x02\u1326\u1322\x03\x02\x02\x02\u1326\u1324\x03\x02\x02\x02\u1327\u01B9" +
		"\x03\x02\x02\x02\u1328\u132A\x07\u0201\x02\x02\u1329\u1328\x03\x02\x02" +
		"\x02\u1329\u132A\x03\x02\x02\x02\u132A\u132B\x03\x02\x02\x02\u132B\u133A" +
		"\x07\u013C\x02\x02\u132C\u132D\x07\u0179\x02\x02\u132D\u133A\x07\u01FF" +
		"\x02\x02\u132E\u133A\x07\u01BA\x02\x02\u132F\u133A\x07\u023E\x02\x02\u1330" +
		"\u1332\x07\u0154\x02\x02\u1331\u1330\x03\x02\x02\x02\u1331\u1332\x03\x02" +
		"\x02\x02\u1332\u1333\x03\x02\x02\x02\u1333\u133A\x07\u01C0\x02\x02\u1334" +
		"\u133A\x07\u01C2\x02\x02\u1335\u1336\x07\u01EB\x02\x02\u1336\u133A\x07" +
		"\u015E\x02\x02\u1337\u133A\x07\u0101\x02\x02\u1338\u133A\x07\u0125\x02" +
		"\x02\u1339\u1329\x03\x02\x02\x02\u1339\u132C\x03\x02\x02\x02\u1339\u132E" +
		"\x03\x02\x02\x02\u1339\u132F\x03\x02\x02\x02\u1339\u1331\x03\x02\x02\x02" +
		"\u1339\u1334\x03\x02\x02\x02\u1339\u1335\x03\x02\x02\x02\u1339\u1337\x03" +
		"\x02\x02\x02\u1339\u1338\x03\x02\x02\x02\u133A\u01BB\x03\x02\x02\x02\u133B" +
		"\u1344\x07\u0142\x02\x02\u133C\u133D\x07\x96\x02\x02\u133D\u1344\x07\u01FF" +
		"\x02\x02\u133E\u1340\x07\u0154\x02\x02\u133F\u133E\x03\x02\x02\x02\u133F" +
		"\u1340\x03\x02\x02\x02\u1340\u1341\x03\x02\x02\x02\u1341\u1344\x07\u0236" +
		"\x02\x02\u1342\u1344\x07\u0210\x02\x02\u1343\u133B\x03\x02\x02\x02\u1343" +
		"\u133C\x03\x02\x02\x02\u1343\u133F\x03\x02\x02\x02\u1343\u1342\x03\x02" +
		"\x02\x02\u1344\u01BD\x03\x02\x02\x02\u1345\u1352\x07\t\x02\x02\u1346\u1347" +
		"\x07\u0109\x02\x02\u1347\u1352\x07\u0169\x02\x02\u1348\u1349\x07\u0124" +
		"\x02\x02\u1349\u1352\x07\u0209\x02\x02\u134A\u1352\x07\u0127\x02\x02\u134B" +
		"\u1352\x07\u016B\x02\x02\u134C\u1352\x07\u026C\x02\x02\u134D\u134E\x07" +
		"\u01B1\x02\x02\u134E\u1352\x07\u014B\x02\x02\u134F\u1352\x07\u01F2\x02" +
		"\x02\u1350\u1352\x07\u0208\x02\x02\u1351\u1345\x03\x02\x02\x02\u1351\u1346" +
		"\x03\x02\x02\x02\u1351\u1348\x03\x02\x02\x02\u1351\u134A\x03\x02\x02\x02" +
		"\u1351\u134B\x03\x02\x02\x02\u1351\u134C\x03\x02\x02\x02\u1351\u134D\x03" +
		"\x02\x02\x02\u1351\u134F\x03\x02\x02\x02\u1351\u1350\x03\x02\x02\x02\u1352" +
		"\u01BF\x03\x02\x02\x02\u1353\u1354\x07\u0107\x02\x02\u1354\u1355\x07\u03C7" +
		"\x02\x02\u1355\u01C1\x03\x02\x02\x02\u1356\u1357\x07\u010D\x02\x02\u1357" +
		"\u1358\x07H\x02\x02\u1358\u135D\x05\u01CE\xE8\x02\u1359\u135A\x07\u03BB" +
		"\x02\x02\u135A\u135C\x05\u01CE\xE8\x02\u135B\u1359\x03\x02\x02\x02\u135C" +
		"\u135F\x03\x02\x02\x02\u135D\u135B\x03\x02\x02\x02\u135D\u135E\x03\x02" +
		"\x02\x02\u135E\u1367\x03\x02\x02\x02\u135F\u135D\x03\x02\x02\x02\u1360" +
		"\u1361\x07r\x02\x02\u1361\u1364\x07\u03B9\x02\x02\u1362\u1365\x05\u0218" +
		"\u010D\x02\u1363\u1365\x07\t\x02\x02\u1364\u1362\x03\x02\x02\x02\u1364" +
		"\u1363\x03\x02\x02\x02\u1365\u1366\x03\x02\x02\x02\u1366\u1368\x07\u03BA" +
		"\x02\x02\u1367\u1360\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02\u1368" +
		"\u1369\x03\x02\x02\x02\u1369\u136A\x07G\x02\x02\u136A\u136B\x05\u01FA" +
		"\xFE\x02\u136B\u01C3\x03\x02\x02\x02\u136C\u136E\x07\u0151\x02\x02\u136D" +
		"\u136F\t>\x02\x02\u136E\u136D\x03\x02\x02\x02\u136E\u136F\x03\x02\x02" +
		"\x02\u136F\u1370\x03\x02\x02\x02\u1370\u1375\x05\u01D0\xE9\x02\u1371\u1372" +
		"\x07\u03BB\x02\x02\u1372\u1374\x05\u01D0\xE9\x02\u1373\u1371\x03\x02\x02" +
		"\x02\u1374\u1377\x03\x02\x02\x02\u1375\u1373\x03\x02\x02\x02\u1375\u1376" +
		"\x03\x02\x02\x02\u1376\u01C5\x03\x02\x02\x02\u1377\u1375\x03\x02\x02\x02" +
		"\u1378\u137A\x07T\x02\x02\u1379\u137B\tI\x02\x02\u137A\u1379\x03\x02\x02" +
		"\x02\u137A\u137B\x03\x02\x02\x02\u137B\u137D\x03\x02\x02\x02\u137C\u137E" +
		"\x05\u0200\u0101\x02\u137D\u137C\x03\x02\x02\x02\u137E\u137F\x03\x02\x02" +
		"\x02\u137F\u137D\x03\x02\x02\x02\u137F\u1380\x03\x02\x02\x02\u1380\u01C7" +
		"\x03\x02\x02\x02\u1381\u1382\x07\\\x02\x02\u1382\u1383\x07H\x02\x02\u1383" +
		"\u1384\x07N\x02\x02\u1384\u1385\x07\u010D\x02\x02\u1385\u138A\x05\u01D4" +
		"\xEB\x02\u1386\u1387\x07\u03BB\x02\x02\u1387\u1389\x05\u01D4\xEB\x02\u1388" +
		"\u1386\x03\x02\x02\x02\u1389\u138C\x03\x02\x02\x02\u138A\u1388\x03\x02" +
		"\x02\x02\u138A\u138B\x03\x02\x02\x02\u138B\u01C9\x03\x02\x02\x02\u138C" +
		"\u138A\x03\x02\x02\x02\u138D\u138E\x07\u01D9\x02\x02\u138E\u138F\x07\u01C4" +
		"\x02\x02\u138F\u1390\x07\u010D\x02\x02\u1390\u01CB\x03\x02\x02\x02\u1391" +
		"\u1392\x07\u023C\x02\x02\u1392\u01CD\x03\x02\x02\x02\u1393\u139B\x05\u01E2" +
		"\xF2\x02\u1394\u1396\t\x14\x02\x02\u1395\u1394\x03\x02\x02\x02\u1395\u1396" +
		"\x03\x02\x02\x02\u1396\u1397\x03\x02\x02\x02\u1397\u1398\x07\u03B9\x02" +
		"\x02\u1398\u1399\x05\u0218\u010D\x02\u1399\u139A\x07\u03BA\x02\x02\u139A" +
		"\u139C\x03\x02\x02\x02\u139B\u1395\x03\x02\x02\x02\u139B\u139C\x03\x02" +
		"\x02\x02\u139C\u01CF\x03\x02\x02\x02\u139D\u13B0\x07\u012E\x02\x02\u139E" +
		"\u13B0\x07\u015E\x02\x02\u139F\u13A1\tJ\x02\x02\u13A0\u139F\x03\x02\x02" +
		"\x02\u13A0\u13A1\x03\x02\x02\x02\u13A1\u13A2\x03\x02\x02\x02\u13A2\u13B0" +
		"\x07\u0178\x02\x02\u13A3\u13B0\x07\u01AD\x02\x02\u13A4\u13B0\x07\u023E" +
		"\x02\x02\u13A5\u13A6\x07\u01C4\x02\x02\u13A6\u13B0\x07\u010D\x02\x02\u13A7" +
		"\u13B0\x07\u01FF\x02\x02\u13A8\u13B0\x07\u021B\x02\x02\u13A9\u13AD\x07" +
		"\u0236\x02\x02\u13AA\u13AB\x07\xAA\x02\x02\u13AB\u13AC\x07w\x02\x02\u13AC" +
		"\u13AE\x07]\x02\x02\u13AD\u13AA\x03\x02\x02\x02\u13AD\u13AE\x03\x02\x02" +
		"\x02\u13AE\u13B0\x03\x02\x02\x02\u13AF\u139D\x03\x02\x02\x02\u13AF\u139E" +
		"\x03\x02\x02\x02\u13AF\u13A0\x03\x02\x02\x02\u13AF\u13A3\x03\x02\x02\x02" +
		"\u13AF\u13A4\x03\x02\x02\x02\u13AF\u13A5\x03\x02\x02\x02\u13AF\u13A7\x03" +
		"\x02\x02\x02\u13AF\u13A8\x03\x02\x02\x02\u13AF\u13A9\x03\x02\x02\x02\u13B0" +
		"\u13BC\x03\x02\x02\x02\u13B1\u13B2\x07\u01CA\x02\x02\u13B2\u13B4\x07\u0178" +
		"\x02\x02\u13B3\u13B5\x05\u0132\x9A\x02\u13B4\u13B3\x03\x02\x02\x02\u13B4" +
		"\u13B5\x03\x02\x02\x02\u13B5\u13BC\x03\x02\x02\x02\u13B6\u13B7\x07\u0236" +
		"\x02\x02\u13B7\u13B9\x05\u021A\u010E\x02\u13B8\u13BA\x05\u01D2\xEA\x02" +
		"\u13B9\u13B8\x03\x02\x02\x02\u13B9\u13BA\x03\x02\x02\x02\u13BA\u13BC\x03" +
		"\x02\x02\x02\u13BB\u13AF\x03\x02\x02\x02\u13BB\u13B1\x03\x02\x02\x02\u13BB" +
		"\u13B6\x03\x02\x02\x02\u13BC\u01D1\x03\x02\x02\x02\u13BD\u13BE\x07\xAA" +
		"\x02\x02\u13BE\u13BF\x07w\x02\x02\u13BF\u13C3\x07]\x02\x02\u13C0\u13C1" +
		"\x07;\x02\x02\u13C1\u13C3\x07\u0147\x02\x02\u13C2\u13BD\x03\x02\x02\x02" +
		"\u13C2\u13C0\x03\x02\x02\x02\u13C3\u01D3\x03\x02\x02\x02\u13C4\u13CC\x05" +
		"\u01E2\xF2\x02\u13C5\u13C6\x07r\x02\x02\u13C6\u13C9\x07\u03B9\x02\x02" +
		"\u13C7\u13CA\x05\u0218\u010D\x02\u13C8\u13CA\x07\t\x02\x02\u13C9\u13C7" +
		"\x03\x02\x02\x02\u13C9\u13C8\x03\x02\x02\x02\u13CA\u13CB\x03\x02\x02\x02" +
		"\u13CB\u13CD\x07\u03BA\x02\x02\u13CC\u13C5\x03\x02\x02\x02\u13CC\u13CD" +
		"\x03\x02\x02\x02\u13CD\u13D5\x03\x02\x02\x02\u13CE\u13D0\t\x14\x02\x02" +
		"\u13CF\u13CE\x03\x02\x02\x02\u13CF\u13D0\x03\x02\x02\x02\u13D0\u13D1\x03" +
		"\x02\x02\x02\u13D1\u13D2\x07\u03B9\x02\x02\u13D2\u13D3\x05\u0218\u010D" +
		"\x02\u13D3\u13D4\x07\u03BA\x02\x02\u13D4\u13D6\x03\x02\x02\x02\u13D5\u13CF" +
		"\x03\x02\x02\x02\u13D5\u13D6\x03\x02\x02\x02\u13D6\u13D9\x03\x02\x02\x02" +
		"\u13D7\u13D8\x07F\x02\x02\u13D8\u13DA\x07\u0172\x02\x02\u13D9\u13D7\x03" +
		"\x02\x02\x02\u13D9\u13DA\x03\x02\x02\x02\u13DA\u01D5\x03\x02\x02\x02\u13DB" +
		"\u13DC\tK\x02\x02\u13DC\u13DF\x05\u01E2\xF2\x02\u13DD\u13E0\x05\u01FA" +
		"\xFE\x02\u13DE\u13E0\x07\u03C7\x02\x02\u13DF\u13DD\x03\x02\x02\x02\u13DF" +
		"\u13DE\x03\x02\x02\x02\u13DF\u13E0\x03\x02\x02\x02\u13E0\u01D7\x03\x02" +
		"\x02\x02\u13E1\u13E5\tK\x02\x02\u13E2\u13E3\tL\x02\x02\u13E3\u13E4\x07" +
		"\u03B0\x02\x02\u13E4\u13E6\tM\x02\x02\u13E5\u13E2\x03\x02\x02\x02\u13E5" +
		"\u13E6\x03\x02\x02\x02\u13E6\u13E7\x03\x02\x02\x02\u13E7\u13E8\x05\u01DE" +
		"\xF0\x02\u13E8\u01D9\x03\x02\x02\x02\u13E9\u13EA\x07\u015C\x02\x02\u13EA" +
		"\u13EB\x07\u03C7\x02\x02\u13EB\u01DB\x03\x02\x02\x02\u13EC\u13ED\x07\xA4" +
		"\x02\x02\u13ED\u13EE\x05\u01FA\xFE\x02\u13EE\u01DD\x03\x02\x02\x02\u13EF" +
		"\u13F5\x05\xAEX\x02\u13F0\u13F5\x05\xA0Q\x02\u13F1\u13F5\x05\xA6T\x02" +
		"\u13F2\u13F5\x05\xACW\x02\u13F3\u13F5\x05\xB0Y\x02\u13F4\u13EF\x03\x02" +
		"\x02\x02\u13F4\u13F0\x03\x02\x02\x02\u13F4\u13F1\x03\x02\x02\x02\u13F4" +
		"\u13F2\x03\x02\x02\x02\u13F4\u13F3\x03\x02\x02\x02\u13F5\u13FA\x03\x02" +
		"\x02\x02\u13F6\u13F7\x07;\x02\x02\u13F7\u13F8\x07\u0121\x02\x02\u13F8" +
		"\u13FA\x05\u01FA\xFE\x02\u13F9\u13F4\x03\x02\x02\x02\u13F9\u13F6\x03\x02" +
		"\x02\x02\u13FA\u01DF\x03\x02\x02\x02\u13FB\u13FF\x05\u01FA\xFE\x02\u13FC" +
		"\u1400\x07\u03CE\x02\x02\u13FD\u13FE\x07\u03B8\x02\x02\u13FE\u1400\x05" +
		"\u01FA\xFE\x02\u13FF\u13FC\x03\x02\x02\x02\u13FF\u13FD\x03\x02\x02\x02" +
		"\u13FF\u1400\x03\x02\x02\x02\u1400\u01E1\x03\x02\x02\x02\u1401\u1402\x05" +
		"\u01E0\xF1\x02\u1402\u01E3\x03\x02\x02\x02\u1403\u1408\x05\u01FA\xFE\x02" +
		"\u1404\u1406\x05\u01FE\u0100\x02\u1405\u1407\x05";
	private static readonly _serializedATNSegment10: string =
		"\u01FE\u0100\x02\u1406\u1405\x03\x02\x02\x02\u1406\u1407\x03\x02\x02\x02" +
		"\u1407\u1409\x03\x02\x02\x02\u1408\u1404\x03\x02\x02\x02\u1408\u1409\x03" +
		"\x02\x02\x02\u1409\u01E5\x03\x02\x02\x02\u140A\u140F\x05\u01FA\xFE\x02" +
		"\u140B\u140C\x07\u03B9\x02\x02\u140C\u140D\x05\u0200\u0101\x02\u140D\u140E" +
		"\x07\u03BA\x02\x02\u140E\u1410\x03\x02\x02\x02\u140F\u140B\x03\x02\x02" +
		"\x02\u140F\u1410\x03\x02\x02\x02\u1410\u1412\x03\x02\x02\x02\u1411\u1413" +
		"\t)\x02\x02\u1412\u1411\x03\x02\x02\x02\u1412\u1413\x03\x02\x02\x02\u1413" +
		"\u01E7\x03\x02\x02\x02\u1414\u1415\tN\x02\x02\u1415\u01E9\x03\x02\x02" +
		"\x02\u1416\u1417\tO\x02\x02\u1417\u01EB\x03\x02\x02\x02\u1418\u141D\x07" +
		"\xC0\x02\x02\u1419\u141D\x05\u0256\u012C\x02\u141A\u141D\x07\u03C7\x02" +
		"\x02\u141B\u141D\x07\u03C4\x02\x02\u141C\u1418\x03\x02\x02\x02\u141C\u1419" +
		"\x03\x02\x02\x02\u141C\u141A\x03\x02\x02\x02\u141C\u141B\x03\x02\x02\x02" +
		"\u141D\u01ED\x03\x02\x02\x02\u141E\u1421\x05\u01FA\xFE\x02\u141F\u1421" +
		"\x07\u03C7\x02\x02\u1420\u141E\x03\x02\x02\x02\u1420\u141F\x03\x02\x02" +
		"\x02\u1421\u01EF\x03\x02\x02\x02\u1422\u1423\tP\x02\x02\u1423\u01F1\x03" +
		"\x02\x02\x02\u1424\u1425\x05\u0200\u0101\x02\u1425\u1426\x07\u03AD\x02" +
		"\x02\u1426\u1427\x05\u0200\u0101\x02\u1427\u1428\x07\u03AD\x02\x02\u1428" +
		"\u1429\x05\u0200\u0101\x02\u1429\u142A\x07\u03AD\x02\x02\u142A\u142B\x05" +
		"\u0200\u0101\x02\u142B\u142C\x07\u03AD\x02\x02\u142C\u1432\x05\u0200\u0101" +
		"\x02\u142D\u142E\x07\u03C3\x02\x02\u142E\u142F\x05\u0200\u0101\x02\u142F" +
		"\u1430\x07\u03AD\x02\x02\u1430\u1431\x05\u0200\u0101\x02\u1431\u1433\x03" +
		"\x02\x02\x02\u1432\u142D\x03\x02\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434" +
		"\u1432\x03\x02\x02\x02\u1434\u1435\x03\x02\x02\x02\u1435\u01F3\x03\x02" +
		"\x02\x02\u1436\u143D\x05\u01F6\xFC\x02\u1437\u1438\x07\u03BB\x02\x02\u1438" +
		"\u143B\x05\u01F6\xFC\x02\u1439\u143A\x07\u03BB\x02\x02\u143A\u143C\x05" +
		"\u0200\u0101\x02\u143B\u1439\x03\x02\x02\x02\u143B\u143C\x03\x02\x02\x02" +
		"\u143C\u143E\x03\x02\x02\x02\u143D\u1437\x03\x02\x02\x02\u143D\u143E\x03" +
		"\x02\x02\x02\u143E\u01F5\x03\x02\x02\x02\u143F\u1447\x07\u03C7\x02\x02" +
		"\u1440\u1447\x07\u03CC\x02\x02\u1441\u1443\x07\u03C9\x02\x02\u1442\u1441" +
		"\x03\x02\x02\x02\u1443\u1444\x03\x02\x02\x02\u1444\u1442\x03\x02\x02\x02" +
		"\u1444\u1445\x03\x02\x02\x02\u1445\u1447\x03\x02\x02\x02\u1446\u143F\x03" +
		"\x02\x02\x02\u1446\u1440\x03\x02\x02\x02\u1446\u1442\x03\x02\x02\x02\u1447" +
		"\u01F7\x03\x02\x02\x02\u1448\u144B\x05\u01FA\xFE\x02\u1449\u144B\x07\u03C7" +
		"\x02\x02\u144A\u1448\x03\x02\x02\x02\u144A\u1449\x03\x02\x02\x02\u144B" +
		"\u01F9\x03\x02\x02\x02\u144C\u1450\x05\u01FC\xFF\x02\u144D\u1450\x07\u03D0" +
		"\x02\x02\u144E\u1450\x07\u03C4\x02\x02\u144F\u144C\x03\x02\x02\x02\u144F" +
		"\u144D\x03\x02\x02\x02\u144F\u144E\x03\x02\x02\x02\u1450\u01FB\x03\x02" +
		"\x02\x02\u1451\u145B\x07\u03CF\x02\x02\u1452\u145B\x05\u0256\u012C\x02" +
		"\u1453\u145B\x05\u0258\u012D\x02\u1454\u145B\x05\u01F0\xF9\x02\u1455\u145B" +
		"\x05\u025A\u012E\x02\u1456\u145B\x05\u025C\u012F\x02\u1457\u145B\x05\u025E" +
		"\u0130\x02\u1458\u145B\x05\u0260\u0131\x02\u1459\u145B\x05\u0262\u0132" +
		"\x02\u145A\u1451\x03\x02\x02\x02\u145A\u1452\x03\x02\x02\x02\u145A\u1453" +
		"\x03\x02\x02\x02\u145A\u1454\x03\x02\x02\x02\u145A\u1455\x03\x02\x02\x02" +
		"\u145A\u1456\x03\x02\x02\x02\u145A\u1457\x03\x02\x02\x02\u145A\u1458\x03" +
		"\x02\x02\x02\u145A\u1459\x03\x02\x02\x02\u145B\u01FD\x03\x02\x02\x02\u145C" +
		"\u1460\x07\u03CE\x02\x02\u145D\u145E\x07\u03B8\x02\x02\u145E\u1460\x05" +
		"\u01FA\xFE\x02\u145F\u145C\x03\x02\x02\x02\u145F\u145D\x03\x02\x02\x02" +
		"\u1460\u01FF\x03\x02\x02\x02\u1461\u1462\tQ\x02\x02\u1462\u0201\x03\x02" +
		"\x02\x02\u1463\u1466\x07\u03C5\x02\x02\u1464\u1466\x05\u0200\u0101\x02" +
		"\u1465\u1463\x03\x02\x02\x02\u1465\u1464\x03\x02\x02\x02\u1466\u0203\x03" +
		"\x02\x02\x02\u1467\u1469\x07\u03CD\x02\x02\u1468\u1467\x03\x02\x02\x02" +
		"\u1468\u1469\x03\x02\x02\x02\u1469\u146A\x03\x02\x02\x02\u146A\u146D\x07" +
		"\u03C7\x02\x02\u146B\u146D\x07\u03C6\x02\x02\u146C\u1468\x03\x02\x02\x02" +
		"\u146C\u146B\x03\x02\x02\x02\u146D\u146F\x03\x02\x02\x02\u146E\u1470\x07" +
		"\u03C7\x02\x02\u146F\u146E\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02" +
		"\u1471\u146F\x03\x02\x02\x02\u1471\u1472\x03\x02\x02\x02\u1472\u147F\x03" +
		"\x02\x02\x02\u1473\u1475\x07\u03CD\x02\x02\u1474\u1473\x03\x02\x02\x02" +
		"\u1474\u1475\x03\x02\x02\x02\u1475\u1476\x03\x02\x02\x02\u1476\u1479\x07" +
		"\u03C7\x02\x02\u1477\u1479\x07\u03C6\x02\x02\u1478\u1474\x03\x02\x02\x02" +
		"\u1478\u1477\x03\x02\x02\x02\u1479\u147C\x03\x02\x02\x02\u147A\u147B\x07" +
		"\x1B\x02\x02\u147B\u147D\x05\u01EE\xF8\x02\u147C\u147A\x03\x02\x02\x02" +
		"\u147C\u147D\x03\x02\x02\x02\u147D\u147F\x03\x02\x02\x02\u147E\u146C\x03" +
		"\x02\x02\x02\u147E\u1478\x03\x02\x02\x02\u147F\u0205\x03\x02\x02\x02\u1480" +
		"\u1481\tR\x02\x02\u1481\u0207\x03\x02\x02\x02\u1482\u1484\x07\u03CD\x02" +
		"\x02\u1483\u1482\x03\x02\x02\x02\u1483\u1484\x03\x02\x02\x02\u1484\u1485" +
		"\x03\x02\x02\x02\u1485\u1486\x07\u03C9\x02\x02\u1486\u0209\x03\x02\x02" +
		"\x02\u1487\u1489\x07f\x02\x02\u1488\u1487\x03\x02\x02\x02\u1488\u1489" +
		"\x03\x02\x02\x02\u1489\u148A\x03\x02\x02\x02\u148A\u148B\tS\x02\x02\u148B" +
		"\u020B\x03\x02\x02\x02\u148C\u1499\x05\u0204\u0103\x02\u148D\u1499\x05" +
		"\u0200\u0101\x02\u148E\u148F\x07\u03AD\x02\x02\u148F\u1499\x05\u0200\u0101" +
		"\x02\u1490\u1499\x05\u0208\u0105\x02\u1491\u1499\x05\u0206\u0104\x02\u1492" +
		"\u1499\x07\u03CA\x02\x02\u1493\u1499\x07\u03CC\x02\x02\u1494\u1496\x07" +
		"f\x02\x02\u1495\u1494\x03\x02\x02\x02\u1495\u1496\x03\x02\x02\x02\u1496" +
		"\u1497\x03\x02\x02\x02\u1497\u1499\tS\x02\x02\u1498\u148C\x03\x02\x02" +
		"\x02\u1498\u148D\x03\x02\x02\x02\u1498\u148E\x03\x02\x02\x02\u1498\u1490" +
		"\x03\x02\x02\x02\u1498\u1491\x03\x02\x02\x02\u1498\u1492\x03\x02\x02\x02" +
		"\u1498\u1493\x03\x02\x02\x02\u1498\u1495\x03\x02\x02\x02\u1499\u020D\x03" +
		"\x02\x02\x02\u149A\u149C\tT\x02\x02\u149B\u149D\x05\u0212\u010A\x02\u149C" +
		"\u149B\x03\x02\x02\x02\u149C\u149D\x03\x02\x02\x02\u149D\u149F\x03\x02" +
		"\x02\x02\u149E\u14A0\x07\xC0\x02\x02\u149F\u149E\x03\x02\x02\x02\u149F" +
		"\u14A0\x03\x02\x02\x02\u14A0\u14A4\x03\x02\x02\x02\u14A1\u14A2\x07\x19" +
		"\x02\x02\u14A2\u14A3\x07\x88\x02\x02\u14A3\u14A5\x05\u01EC\xF7\x02\u14A4" +
		"\u14A1\x03\x02\x02\x02\u14A4\u14A5\x03\x02\x02\x02\u14A5\u14A8\x03\x02" +
		"\x02\x02\u14A6\u14A7\x07\x1B\x02\x02\u14A7\u14A9\x05\u01EE\xF8\x02\u14A8" +
		"\u14A6\x03\x02\x02\x02\u14A8\u14A9\x03\x02\x02\x02\u14A9\u14E6\x03\x02" +
		"\x02\x02\u14AA\u14AC\tU\x02\x02\u14AB\u14AD\x05\u0212\u010A\x02\u14AC" +
		"\u14AB\x03\x02\x02\x02\u14AC\u14AD\x03\x02\x02\x02\u14AD\u14AF\x03\x02" +
		"\x02\x02\u14AE\u14B0\x07\xA1\x02\x02\u14AF\u14AE\x03\x02\x02\x02\u14AF" +
		"\u14B0\x03\x02\x02\x02\u14B0\u14B2\x03\x02\x02\x02\u14B1\u14B3\x07\xAD" +
		"\x02\x02\u14B2\u14B1\x03\x02\x02\x02\u14B2\u14B3\x03\x02\x02\x02\u14B3" +
		"\u14E6\x03\x02\x02\x02\u14B4\u14B6\tV\x02\x02\u14B5\u14B7\x05\u0214\u010B" +
		"\x02\u14B6\u14B5\x03\x02\x02\x02\u14B6\u14B7\x03\x02\x02\x02\u14B7\u14B9" +
		"\x03\x02\x02\x02\u14B8\u14BA\x07\xA1\x02\x02\u14B9\u14B8\x03\x02\x02\x02" +
		"\u14B9\u14BA\x03\x02\x02\x02\u14BA\u14BC\x03\x02\x02\x02\u14BB\u14BD\x07" +
		"\xAD\x02\x02\u14BC\u14BB\x03\x02\x02\x02\u14BC\u14BD\x03\x02\x02\x02\u14BD" +
		"\u14E6\x03\x02\x02\x02\u14BE\u14C0\tW\x02\x02\u14BF\u14C1\x05\u0216\u010C" +
		"\x02\u14C0\u14BF\x03\x02\x02\x02\u14C0\u14C1\x03\x02\x02\x02\u14C1\u14C3" +
		"\x03\x02\x02\x02\u14C2\u14C4\x07\xA1\x02\x02\u14C3\u14C2\x03\x02\x02\x02" +
		"\u14C3\u14C4\x03\x02\x02\x02\u14C4\u14C6\x03\x02\x02\x02\u14C5\u14C7\x07" +
		"\xAD\x02\x02\u14C6\u14C5\x03\x02\x02\x02\u14C6\u14C7\x03\x02\x02\x02\u14C7" +
		"\u14E6\x03\x02\x02\x02\u14C8\u14E6\tX\x02\x02\u14C9\u14CB\tY\x02\x02\u14CA" +
		"\u14CC\x05\u0212\u010A\x02\u14CB\u14CA\x03\x02\x02\x02\u14CB\u14CC\x03" +
		"\x02\x02\x02\u14CC\u14E6\x03\x02\x02\x02\u14CD\u14CE\tZ\x02\x02\u14CE" +
		"\u14CF\x07\u03B9\x02\x02\u14CF\u14D4\x07\u03C7\x02\x02\u14D0\u14D1\x07" +
		"\u03BB\x02\x02\u14D1\u14D3\x07\u03C7\x02\x02\u14D2\u14D0\x03\x02\x02\x02" +
		"\u14D3\u14D6\x03\x02\x02\x02\u14D4\u14D2\x03\x02\x02\x02\u14D4\u14D5\x03" +
		"\x02\x02\x02\u14D5\u14D7\x03\x02\x02\x02\u14D6\u14D4\x03\x02\x02\x02\u14D7" +
		"\u14D9\x07\u03BA\x02\x02\u14D8\u14DA\x07\xC0\x02\x02\u14D9\u14D8\x03\x02" +
		"\x02\x02\u14D9\u14DA\x03\x02\x02\x02\u14DA\u14DE\x03\x02\x02\x02\u14DB" +
		"\u14DC\x07\x19\x02\x02\u14DC\u14DD\x07\x88\x02\x02\u14DD\u14DF\x05\u01EC" +
		"\xF7\x02\u14DE\u14DB\x03\x02\x02\x02\u14DE\u14DF\x03\x02\x02\x02\u14DF" +
		"\u14E2\x03\x02\x02\x02\u14E0\u14E1\x07\x1B\x02\x02\u14E1\u14E3\x05\u01EE" +
		"\xF8\x02\u14E2\u14E0\x03\x02\x02\x02\u14E2\u14E3\x03\x02\x02\x02\u14E3" +
		"\u14E6\x03\x02\x02\x02\u14E4\u14E6\t[\x02\x02\u14E5\u149A\x03\x02\x02" +
		"\x02\u14E5\u14AA\x03\x02\x02\x02\u14E5\u14B4\x03\x02\x02\x02\u14E5\u14BE" +
		"\x03\x02\x02\x02\u14E5\u14C8\x03\x02\x02\x02\u14E5\u14C9\x03\x02\x02\x02" +
		"\u14E5\u14CD\x03\x02\x02\x02\u14E5\u14E4\x03\x02\x02\x02\u14E6\u020F\x03" +
		"\x02\x02\x02\u14E7\u14E9\t\\\x02\x02\u14E8\u14EA\x05\u0212\u010A\x02\u14E9" +
		"\u14E8\x03\x02\x02\x02\u14E9\u14EA\x03\x02\x02\x02\u14EA\u14FE\x03\x02" +
		"\x02\x02\u14EB\u14ED\x07\xBE\x02\x02\u14EC\u14EE\x05\u0212\u010A\x02\u14ED" +
		"\u14EC\x03\x02\x02\x02\u14ED\u14EE\x03\x02\x02\x02\u14EE\u14F2\x03\x02" +
		"\x02\x02\u14EF\u14F0\x07\x19\x02\x02\u14F0\u14F1\x07\x88\x02\x02\u14F1" +
		"\u14F3\x05\u01EC\xF7\x02\u14F2\u14EF\x03\x02\x02\x02\u14F2\u14F3\x03\x02" +
		"\x02\x02\u14F3\u14FE\x03\x02\x02\x02\u14F4\u14FE\t]\x02\x02\u14F5\u14F7" +
		"\x07\xB7\x02\x02\u14F6\u14F8\x05\u0214\u010B\x02\u14F7\u14F6\x03\x02\x02" +
		"\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14FE\x03\x02\x02\x02\u14F9\u14FB" +
		"\t^\x02\x02\u14FA\u14FC\x07\xB2\x02\x02\u14FB\u14FA\x03\x02\x02\x02\u14FB" +
		"\u14FC\x03\x02\x02\x02\u14FC\u14FE\x03\x02\x02\x02\u14FD\u14E7\x03\x02" +
		"\x02\x02\u14FD\u14EB\x03\x02\x02\x02\u14FD\u14F4\x03\x02\x02\x02\u14FD" +
		"\u14F5\x03\x02\x02\x02\u14FD\u14F9\x03\x02\x02\x02\u14FE\u0211\x03\x02" +
		"\x02\x02\u14FF\u1500\x07\u03B9\x02\x02\u1500\u1501\x05\u0200\u0101\x02" +
		"\u1501\u1502\x07\u03BA\x02\x02\u1502\u0213\x03\x02\x02\x02\u1503\u1504" +
		"\x07\u03B9\x02\x02\u1504\u1505\x05\u0200\u0101\x02\u1505\u1506\x07\u03BB" +
		"\x02\x02\u1506\u1507\x05\u0200\u0101\x02\u1507\u1508\x07\u03BA\x02\x02" +
		"\u1508\u0215\x03\x02\x02\x02\u1509\u150A\x07\u03B9\x02\x02\u150A\u150D" +
		"\x05\u0200\u0101\x02\u150B\u150C\x07\u03BB\x02\x02\u150C\u150E\x05\u0200" +
		"\u0101\x02\u150D\u150B\x03\x02\x02\x02\u150D\u150E\x03\x02\x02\x02\u150E" +
		"\u150F\x03\x02\x02\x02\u150F\u1510\x07\u03BA\x02\x02\u1510\u0217\x03\x02" +
		"\x02\x02\u1511\u1516\x05\u01FA\xFE\x02\u1512\u1513\x07\u03BB\x02\x02\u1513" +
		"\u1515\x05\u01FA\xFE\x02\u1514\u1512\x03\x02\x02\x02\u1515\u1518\x03\x02" +
		"\x02\x02\u1516\u1514\x03\x02\x02\x02\u1516\u1517\x03\x02\x02\x02\u1517" +
		"\u0219\x03\x02\x02\x02\u1518\u1516\x03\x02\x02\x02\u1519\u151E\x05\u01E2" +
		"\xF2\x02\u151A\u151B\x07\u03BB\x02\x02\u151B\u151D\x05\u01E2\xF2\x02\u151C" +
		"\u151A\x03\x02\x02\x02\u151D\u1520\x03\x02\x02\x02\u151E\u151C\x03\x02" +
		"\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u021B\x03\x02\x02\x02\u1520" +
		"\u151E\x03\x02\x02\x02\u1521\u1522\x07\u03B9\x02\x02\u1522\u1527\x05\u01E6" +
		"\xF4\x02\u1523\u1524\x07\u03BB\x02\x02\u1524\u1526\x05\u01E6\xF4\x02\u1525" +
		"\u1523\x03\x02\x02\x02\u1526\u1529\x03\x02\x02\x02\u1527\u1525\x03\x02" +
		"\x02\x02\u1527\u1528\x03\x02\x02\x02\u1528\u152A\x03\x02\x02\x02\u1529" +
		"\u1527\x03\x02\x02\x02\u152A\u152B\x07\u03BA\x02\x02\u152B\u021D\x03\x02" +
		"\x02\x02\u152C\u1531\x05\u0246\u0124\x02\u152D\u152E\x07\u03BB\x02\x02" +
		"\u152E\u1530\x05\u0246\u0124\x02\u152F\u152D\x03\x02\x02\x02\u1530\u1533" +
		"\x03\x02\x02\x02\u1531\u152F\x03\x02\x02\x02\u1531\u1532\x03\x02\x02\x02" +
		"\u1532\u021F\x03\x02\x02\x02\u1533\u1531\x03\x02\x02\x02\u1534\u1539\x05" +
		"\u022C\u0117\x02\u1535\u1536\x07\u03BB\x02\x02\u1536\u1538\x05\u022C\u0117" +
		"\x02\u1537\u1535\x03\x02\x02\x02\u1538\u153B\x03\x02\x02\x02\u1539\u1537" +
		"\x03\x02\x02\x02\u1539\u153A\x03\x02\x02\x02\u153A\u0221\x03\x02\x02\x02" +
		"\u153B\u1539\x03\x02\x02\x02\u153C\u1541\x05\u020C\u0107\x02\u153D\u153E" +
		"\x07\u03BB\x02\x02\u153E\u1540\x05\u020C\u0107\x02\u153F\u153D\x03\x02" +
		"\x02\x02\u1540\u1543\x03\x02\x02\x02\u1541\u153F\x03\x02\x02\x02\u1541" +
		"\u1542\x03\x02\x02\x02\u1542\u0223\x03\x02\x02\x02\u1543\u1541\x03\x02" +
		"\x02\x02\u1544\u1549\x07\u03C7\x02\x02\u1545\u1546\x07\u03BB\x02\x02\u1546" +
		"\u1548\x07\u03C7\x02\x02\u1547\u1545\x03\x02\x02\x02\u1548\u154B\x03\x02" +
		"\x02\x02\u1549\u1547\x03\x02\x02\x02\u1549\u154A\x03\x02\x02\x02\u154A" +
		"\u0225\x03\x02\x02\x02\u154B\u1549\x03\x02\x02\x02\u154C\u1551\x07\u03D2" +
		"\x02\x02\u154D\u154E\x07\u03BB\x02\x02\u154E\u1550\x07\u03D2\x02\x02\u154F" +
		"\u154D\x03\x02\x02\x02\u1550\u1553\x03\x02\x02\x02\u1551\u154F\x03\x02" +
		"\x02\x02\u1551\u1552\x03\x02\x02\x02\u1552\u0227\x03\x02\x02\x02\u1553" +
		"\u1551\x03\x02\x02\x02\u1554\u155D\x07h\x02\x02\u1555\u155D\x05\u020C" +
		"\u0107\x02\u1556\u155A\x05\u022A\u0116\x02\u1557\u1558\x07i\x02\x02\u1558" +
		"\u1559\x07\xA2\x02\x02\u1559\u155B\x05\u022A\u0116\x02\u155A\u1557\x03" +
		"\x02\x02\x02\u155A\u155B\x03\x02\x02\x02\u155B\u155D\x03\x02\x02\x02\u155C" +
		"\u1554\x03\x02\x02\x02\u155C\u1555\x03\x02\x02\x02\u155C\u1556\x03\x02" +
		"\x02\x02\u155D\u0229\x03\x02\x02\x02\u155E\u1564\t_\x02\x02\u155F\u1561" +
		"\x07\u03B9\x02\x02\u1560\u1562\x05\u0200\u0101\x02\u1561\u1560\x03\x02" +
		"\x02\x02\u1561\u1562\x03\x02\x02\x02\u1562\u1563\x03\x02\x02\x02\u1563" +
		"\u1565\x07\u03BA\x02\x02\u1564\u155F\x03\x02\x02\x02\u1564\u1565\x03\x02" +
		"\x02\x02\u1565\u156D\x03\x02\x02\x02\u1566\u1567\x07\xF1\x02\x02\u1567" +
		"\u1569\x07\u03B9\x02\x02\u1568\u156A\x05\u0200\u0101\x02\u1569\u1568\x03" +
		"\x02\x02\x02\u1569\u156A\x03\x02\x02\x02\u156A\u156B\x03\x02\x02\x02\u156B" +
		"\u156D\x07\u03BA\x02\x02\u156C\u155E\x03\x02\x02\x02\u156C\u1566\x03\x02" +
		"\x02\x02\u156D\u022B\x03\x02\x02\x02\u156E\u1571\x05\u0246\u0124\x02\u156F" +
		"\u1571\x07(\x02\x02\u1570\u156E\x03\x02\x02\x02\u1570\u156F\x03\x02\x02" +
		"\x02\u1571\u022D\x03\x02\x02\x02\u1572\u1573\x07E\x02\x02\u1573\u1574" +
		"\x076\x02\x02\u1574\u022F\x03\x02\x02\x02\u1575\u1576\x07E\x02\x02\u1576" +
		"\u1577\x07f\x02\x02\u1577\u1578\x076\x02\x02\u1578\u0231\x03\x02\x02\x02" +
		"\u1579\u158B\x05\u0234\u011B\x02\u157A\u158B\x05\u023C\u011F\x02\u157B" +
		"\u157C\x05\u023E\u0120\x02\u157C\u157E\x07\u03B9\x02\x02\u157D\u157F\x05" +
		"\u0242\u0122\x02\u157E\u157D\x03\x02\x02\x02\u157E\u157F\x03\x02\x02\x02" +
		"\u157F\u1580\x03\x02\x02\x02\u1580\u1581\x07\u03BA\x02\x02\u1581\u158B" +
		"\x03\x02\x02\x02\u1582\u1583\x05\u01E0\xF1\x02\u1583\u1585\x07\u03B9\x02" +
		"\x02\u1584\u1586\x05\u0242\u0122\x02\u1585\u1584\x03\x02\x02\x02\u1585" +
		"\u1586\x03\x02\x02\x02\u1586\u1587\x03\x02\x02\x02\u1587\u1588\x07\u03BA" +
		"\x02\x02\u1588\u158B\x03\x02\x02\x02\u1589\u158B\x05\u0240\u0121\x02\u158A" +
		"\u1579\x03\x02\x02\x02\u158A\u157A\x03\x02\x02\x02\u158A\u157B\x03\x02" +
		"\x02\x02\u158A\u1582\x03\x02\x02\x02\u158A\u1589\x03\x02\x02\x02\u158B" +
		"\u0233\x03\x02\x02\x02\u158C\u162A\t`\x02\x02\u158D\u158E\x07 \x02\x02" +
		"\u158E\u158F\x07\u03B9\x02\x02\u158F\u1590\x05\u0246\u0124\x02\u1590\u1591" +
		"\x07\u03BB\x02\x02\u1591\u1592\x05\u0210\u0109\x02\u1592\u1593\x07\u03BA" +
		"\x02\x02\u1593\u162A\x03\x02\x02\x02\u1594\u1595\x07 \x02\x02\u1595\u1596" +
		"\x07\u03B9\x02\x02\u1596\u1597\x05\u0246\u0124\x02\u1597\u1598\x07\xA5" +
		"\x02\x02\u1598\u1599\x05\u01EC\xF7\x02\u1599\u159A\x07\u03BA\x02\x02\u159A" +
		"\u162A\x03\x02\x02\x02\u159B\u159C\x07\x17\x02\x02\u159C\u159D\x07\u03B9" +
		"\x02\x02\u159D\u159E\x05\u0246\u0124\x02\u159E\u159F\x07\x0E\x02\x02\u159F" +
		"\u15A0\x05\u0210\u0109\x02\u15A0\u15A1\x07\u03BA\x02\x02\u15A1\u162A\x03" +
		"\x02\x02\x02\u15A2\u15A3\x07\xA6\x02\x02\u15A3\u15A4\x07\u03B9\x02\x02" +
		"\u15A4\u15A5\x05\u01E4\xF3\x02\u15A5\u15A6\x07\u03BA\x02\x02\u15A6\u162A" +
		"\x03\x02\x02\x02\u15A7\u15A8\x07\x16\x02\x02\u15A8\u15AA\x05\u0246\u0124" +
		"\x02\u15A9\u15AB\x05\u0236\u011C\x02\u15AA\u15A9\x03\x02\x02\x02\u15AB" +
		"\u15AC\x03\x02\x02\x02\u15AC\u15AA\x03\x02\x02\x02\u15AC\u15AD\x03\x02" +
		"\x02\x02\u15AD\u15B0\x03\x02\x02\x02\u15AE\u15AF\x072\x02\x02\u15AF\u15B1" +
		"\x05\u0244\u0123\x02\u15B0\u15AE\x03\x02\x02\x02\u15B0\u15B1\x03\x02\x02" +
		"\x02\u15B1\u15B2\x03\x02\x02\x02\u15B2\u15B3\x07\u0139\x02\x02\u15B3\u162A" +
		"\x03\x02\x02\x02\u15B4\u15B6\x07\x16\x02\x02\u15B5\u15B7\x05\u0236\u011C" +
		"\x02\u15B6\u15B5\x03\x02\x02\x02\u15B7\u15B8\x03\x02\x02\x02\u15B8\u15B6" +
		"\x03\x02\x02\x02\u15B8\u15B9\x03\x02\x02\x02\u15B9\u15BC\x03\x02\x02\x02" +
		"\u15BA\u15BB\x072\x02\x02\u15BB\u15BD\x05\u0244\u0123\x02\u15BC\u15BA" +
		"\x03\x02\x02\x02\u15BC\u15BD\x03\x02\x02\x02\u15BD\u15BE\x03\x02\x02\x02" +
		"\u15BE\u15BF\x07\u0139\x02\x02\u15BF\u162A\x03\x02\x02\x02\u15C0\u15C1" +
		"\x07\xBE\x02\x02\u15C1\u15C2\x07\u03B9\x02\x02\u15C2\u15C5\x05\u0242\u0122" +
		"\x02\u15C3\u15C4\x07\xA5\x02\x02\u15C4\u15C6\x05\u01EC\xF7\x02\u15C5\u15C3" +
		"\x03\x02\x02\x02\u15C5\u15C6\x03\x02\x02\x02\u15C6\u15C7\x03\x02\x02\x02" +
		"\u15C7\u15C8\x07\u03BA\x02\x02\u15C8\u162A\x03\x02\x02\x02\u15C9\u15CA" +
		"\x07\xF2\x02\x02\u15CA\u15CD\x07\u03B9\x02\x02\u15CB\u15CE\x05\u0204\u0103" +
		"\x02\u15CC\u15CE\x05\u0246\u0124\x02\u15CD\u15CB\x03\x02\x02\x02\u15CD" +
		"\u15CC\x03\x02\x02\x02\u15CE\u15CF\x03\x02\x02\x02\u15CF\u15D2\x07G\x02" +
		"\x02\u15D0\u15D3\x05\u0204\u0103\x02\u15D1\u15D3\x05\u0246\u0124\x02\u15D2" +
		"\u15D0\x03\x02\x02\x02\u15D2\u15D1\x03\x02\x02\x02\u15D3\u15D4\x03\x02" +
		"\x02\x02\u15D4\u15D5\x07\u03BA\x02\x02\u15D5\u162A\x03\x02\x02\x02\u15D6" +
		"\u15D7\ta\x02\x02\u15D7\u15DA\x07\u03B9\x02\x02\u15D8\u15DB\x05\u0204" +
		"\u0103\x02\u15D9\u15DB\x05\u0246\u0124\x02\u15DA\u15D8\x03\x02\x02\x02" +
		"\u15DA\u15D9\x03\x02\x02\x02\u15DB\u15DC\x03\x02\x02\x02\u15DC\u15DF\x07" +
		">\x02\x02\u15DD\u15E0\x05\u0200\u0101\x02\u15DE\u15E0\x05\u0246\u0124" +
		"\x02\u15DF\u15DD\x03\x02\x02\x02\u15DF\u15DE\x03\x02\x02\x02\u15E0\u15E6" +
		"\x03\x02\x02\x02\u15E1\u15E4\x07;\x02\x02\u15E2\u15E5\x05\u0200\u0101" +
		"\x02\u15E3\u15E5\x05\u0246\u0124\x02\u15E4\u15E2\x03\x02\x02\x02\u15E4" +
		"\u15E3\x03\x02\x02\x02\u15E5\u15E7\x03\x02\x02\x02\u15E6\u15E1\x03\x02" +
		"\x02\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02\u15E8" +
		"\u15E9\x07\u03BA\x02\x02\u15E9\u162A\x03\x02\x02\x02\u15EA\u15EB\x07\xF6" +
		"\x02\x02\u15EB\u15EC\x07\u03B9\x02\x02\u15EC\u15EF\tb\x02\x02\u15ED\u15F0" +
		"\x05\u0204\u0103\x02\u15EE\u15F0\x05\u0246\u0124\x02\u15EF\u15ED\x03\x02" +
		"\x02\x02\u15EF\u15EE\x03\x02\x02\x02\u15EF\u15F0\x03\x02\x02\x02\u15F0" +
		"\u15F1\x03\x02\x02\x02\u15F1\u15F4\x07>\x02\x02\u15F2\u15F5\x05\u0204" +
		"\u0103\x02\u15F3\u15F5\x05\u0246\u0124\x02\u15F4\u15F2\x03\x02\x02\x02" +
		"\u15F4\u15F3\x03\x02\x02\x02\u15F5\u15F6\x03\x02\x02\x02\u15F6\u15F7\x07" +
		"\u03BA\x02\x02\u15F7\u162A\x03\x02\x02\x02\u15F8\u15F9\x07\xF6\x02\x02" +
		"\u15F9\u15FC\x07\u03B9\x02\x02\u15FA\u15FD\x05\u0204\u0103\x02\u15FB\u15FD" +
		"\x05\u0246\u0124\x02\u15FC\u15FA\x03\x02\x02\x02\u15FC\u15FB\x03\x02\x02" +
		"\x02\u15FD\u15FE\x03\x02\x02\x02\u15FE\u1601\x07>\x02\x02\u15FF\u1602" +
		"\x05\u0204\u0103\x02\u1600\u1602\x05\u0246\u0124\x02\u1601\u15FF\x03\x02" +
		"\x02\x02\u1601\u1600\x03\x02\x02\x02\u1602\u1603\x03\x02\x02\x02\u1603" +
		"\u1604\x07\u03BA\x02\x02\u1604\u162A\x03\x02\x02\x02\u1605\u1606\x07\u039A" +
		"\x02\x02\u1606\u1609\x07\u03B9\x02\x02\u1607\u160A\x05\u0204\u0103\x02" +
		"\u1608\u160A\x05\u0246\u0124\x02\u1609\u1607\x03\x02\x02\x02\u1609\u1608" +
		"\x03\x02\x02\x02\u160A\u1611\x03\x02\x02\x02\u160B\u160C\x07\x0E\x02\x02" +
		"\u160C\u160D\tc\x02\x02\u160D\u160E\x07\u03B9\x02\x02\u160E\u160F\x05" +
		"\u0200\u0101\x02\u160F\u1610\x07\u03BA\x02\x02\u1610\u1612\x03\x02\x02" +
		"\x02\u1611\u160B\x03\x02\x02\x02\u1611\u1612\x03\x02\x02\x02\u1612\u1614" +
		"\x03\x02\x02\x02\u1613\u1615\x05\u0238\u011D\x02\u1614\u1613\x03\x02\x02" +
		"\x02\u1614\u1615\x03\x02\x02\x02\u1615\u1616\x03\x02\x02\x02\u1616\u1617" +
		"\x07\u03BA\x02\x02\u1617\u162A\x03\x02\x02\x02\u1618\u1619\x07\xEF\x02" +
		"\x02\u1619\u161A\x07\u03B9\x02\x02\u161A\u161B\x056\x1C\x02\u161B\u161E" +
		"\x07>\x02\x02\u161C\u161F\x05\u0204\u0103\x02\u161D\u161F\x05\u0246\u0124" +
		"\x02\u161E\u161C\x03\x02\x02\x02\u161E\u161D\x03\x02\x02\x02\u161F\u1620" +
		"\x03\x02\x02\x02\u1620\u1621\x07\u03BA\x02\x02\u1621\u162A\x03\x02\x02" +
		"\x02\u1622\u1623\x07\u02D3\x02\x02\u1623\u1624\x07\u03B9\x02\x02\u1624" +
		"\u1625\t]\x02\x02\u1625\u1626\x07\u03BB\x02\x02\u1626\u1627\x05\u0204" +
		"\u0103\x02\u1627\u1628\x07\u03BA\x02\x02\u1628\u162A\x03\x02\x02\x02\u1629" +
		"\u158C\x03\x02\x02\x02\u1629\u158D\x03\x02\x02\x02\u1629\u1594\x03\x02" +
		"\x02\x02\u1629\u159B\x03\x02\x02\x02\u1629\u15A2\x03\x02\x02\x02\u1629" +
		"\u15A7\x03\x02\x02\x02\u1629\u15B4\x03\x02\x02\x02\u1629\u15C0\x03\x02" +
		"\x02\x02\u1629\u15C9\x03\x02\x02\x02\u1629\u15D6\x03\x02\x02\x02\u1629" +
		"\u15EA\x03\x02\x02\x02\u1629\u15F8\x03\x02\x02\x02\u1629\u1605\x03\x02" +
		"\x02\x02\u1629\u1618\x03\x02\x02\x02\u1629\u1622\x03\x02\x02\x02\u162A" +
		"\u0235\x03\x02\x02\x02\u162B\u162C\x07\xA7\x02\x02\u162C\u162D\x05\u0244" +
		"\u0123\x02\u162D\u162E\x07\x98\x02\x02\u162E\u162F\x05\u0244\u0123\x02" +
		"\u162F\u0237\x03\x02\x02\x02\u1630\u1631\x07\u0174\x02\x02\u1631\u1636" +
		"\x05\u023A\u011E\x02\u1632\u1633\x07\u03BB\x02\x02\u1633\u1635\x05\u023A" +
		"\u011E\x02\u1634\u1632\x03\x02\x02\x02\u1635\u1638\x03\x02\x02\x02\u1636" +
		"\u1634\x03\x02\x02\x02\u1636\u1637\x03\x02\x02\x02\u1637\u163F\x03\x02" +
		"\x02\x02\u1638\u1636\x03\x02\x02\x02\u1639\u163A\x07\u0174\x02\x02\u163A" +
		"\u163B\x05\u0200\u0101\x02\u163B\u163C\x07\u03AD\x02\x02\u163C\u163D\x05" +
		"\u0200\u0101\x02\u163D\u163F\x03\x02\x02\x02\u163E\u1630\x03\x02\x02\x02" +
		"\u163E\u1639\x03\x02\x02\x02\u163F\u0239\x03\x02\x02\x02\u1640\u1642\x05" +
		"\u0200\u0101\x02\u1641\u1643\td\x02\x02\u1642\u1641\x03\x02\x02\x02\u1642" +
		"\u1643\x03\x02\x02\x02\u1643\u023B\x03\x02\x02\x02\u1644\u1645\te\x02" +
		"\x02\u1645\u1647\x07\u03B9\x02\x02\u1646\u1648\t%\x02\x02\u1647\u1646" +
		"\x03\x02\x02\x02\u1647\u1648\x03\x02\x02\x02\u1648\u1649\x03\x02\x02\x02" +
		"\u1649\u164A\x05\u0244\u0123\x02\u164A\u164B\x07\u03BA\x02\x02\u164B\u167D" +
		"\x03\x02\x02\x02\u164C\u164D\x07\xDB\x02\x02\u164D\u1653\x07\u03B9\x02" +
		"\x02\u164E\u1654\x07\u03A8\x02\x02\u164F\u1651\x07\t\x02\x02\u1650\u164F" +
		"\x03\x02\x02\x02\u1650\u1651\x03\x02\x02\x02\u1651\u1652\x03\x02\x02\x02" +
		"\u1652\u1654\x05\u0244\u0123\x02\u1653\u164E\x03\x02\x02\x02\u1653\u1650" +
		"\x03\x02\x02\x02\u1654\u1655\x03\x02\x02\x02\u1655\u167D\x07\u03BA\x02" +
		"\x02\u1656\u1657\x07\xDB\x02\x02\u1657\u1658\x07\u03B9\x02\x02\u1658\u1659" +
		"\x07.\x02\x02\u1659\u165A\x05\u0242\u0122\x02\u165A\u165B\x07\u03BA\x02" +
		"\x02\u165B\u167D\x03\x02\x02\x02\u165C\u165D\tf\x02\x02\u165D\u165F\x07" +
		"\u03B9\x02\x02\u165E\u1660\x07\t\x02\x02\u165F\u165E\x03\x02\x02\x02\u165F" +
		"\u1660\x03\x02\x02\x02\u1660\u1661\x03\x02\x02\x02\u1661\u1662\x05\u0244" +
		"\u0123\x02\u1662\u1663\x07\u03BA\x02\x02\u1663\u167D\x03\x02\x02\x02\u1664" +
		"\u1665\x07\xDC\x02\x02\u1665\u1667\x07\u03B9\x02\x02\u1666\u1668\x07." +
		"\x02\x02\u1667\u1666\x03\x02\x02\x02\u1667\u1668\x03\x02\x02\x02\u1668" +
		"\u1669\x03\x02\x02\x02\u1669\u1674\x05\u0242\u0122\x02\u166A\u166B\x07" +
		"n\x02\x02\u166B\u166C\x07\x13\x02\x02\u166C\u1671\x05\xCCg\x02\u166D\u166E" +
		"\x07\u03BB\x02\x02\u166E\u1670\x05\xCCg\x02\u166F\u166D\x03\x02\x02\x02" +
		"\u1670\u1673\x03\x02\x02\x02\u1671\u166F\x03\x02\x02\x02\u1671\u1672\x03" +
		"\x02\x02\x02\u1672\u1675\x03\x02\x02\x02\u1673\u1671\x03\x02\x02\x02\u1674" +
		"\u166A\x03\x02\x02\x02\u1674\u1675\x03\x02\x02\x02\u1675\u1678\x03\x02" +
		"\x02\x02\u1676\u1677\x07\x89\x02\x02\u1677\u1679\x07\u03C7\x02\x02\u1678" +
		"\u1676\x03\x02\x02\x02\u1678\u1679\x03\x02\x02\x02\u1679\u167A\x03\x02" +
		"\x02\x02\u167A\u167B\x07\u03BA\x02\x02\u167B\u167D\x03\x02\x02\x02\u167C" +
		"\u1644\x03\x02\x02\x02\u167C\u164C\x03\x02\x02\x02\u167C\u1656\x03\x02" +
		"\x02\x02\u167C\u165C\x03\x02\x02\x02\u167C\u1664\x03\x02\x02\x02\u167D" +
		"\u023D\x03\x02\x02\x02\u167E\u1696\x05\u0262\u0132\x02\u167F\u1696\x07" +
		"\u0240\x02\x02\u1680\u1696\x07\xEB\x02\x02\u1681\u1696\x07\xE7\x02\x02" +
		"\u1682\u1696\x07\xE8\x02\x02\u1683\u1696\x07\xE9\x02\x02\u1684\u1696\x07" +
		"\xEC\x02\x02\u1685\u1696\x07\xED\x02\x02\u1686\u1696\x07\xEE\x02\x02\u1687" +
		"\u1696\x07E\x02\x02\u1688\u1696\x07L\x02\x02\u1689\u1696\x07\xEA\x02\x02" +
		"\u168A\u1696\x07\xF0\x02\x02\u168B\u1696\x07\u0196\x02\x02\u168C\u1696" +
		"\x07\xF1\x02\x02\u168D\u1696\x07~\x02\x02\u168E\u1696\x07\xF3\x02\x02" +
		"\u168F\u1696\x07\xF4\x02\x02\u1690\u1696\x07\xF5\x02\x02\u1691\u1696\x07" +
		"\xF6\x02\x02\u1692\u1696\x07\xF7\x02\x02\u1693\u1696\x07\xF8\x02\x02\u1694" +
		"\u1696\x07\xF9\x02\x02\u1695\u167E\x03\x02\x02\x02\u1695\u167F\x03\x02" +
		"\x02\x02\u1695\u1680\x03\x02\x02\x02\u1695\u1681\x03\x02\x02\x02\u1695" +
		"\u1682\x03\x02\x02\x02\u1695\u1683\x03\x02\x02\x02\u1695\u1684\x03\x02" +
		"\x02\x02\u1695\u1685\x03\x02\x02\x02\u1695\u1686\x03\x02\x02\x02\u1695" +
		"\u1687\x03\x02\x02\x02\u1695\u1688\x03\x02\x02\x02\u1695\u1689\x03\x02" +
		"\x02\x02\u1695\u168A\x03\x02\x02\x02\u1695\u168B\x03\x02\x02\x02\u1695" +
		"\u168C\x03\x02\x02\x02\u1695\u168D\x03\x02\x02\x02\u1695\u168E\x03\x02" +
		"\x02\x02\u1695\u168F\x03\x02\x02\x02\u1695\u1690\x03\x02\x02\x02\u1695" +
		"\u1691\x03\x02\x02\x02\u1695\u1692\x03\x02\x02\x02\u1695\u1693\x03\x02" +
		"\x02\x02\u1695\u1694\x03\x02\x02\x02\u1696\u023F\x03\x02\x02\x02\u1697" +
		"\u1698\tg\x02\x02\u1698\u1699\x07\u03B9\x02\x02\u1699\u169A\x05\u0244" +
		"\u0123\x02\u169A\u169B\x07\u03BA\x02";
	private static readonly _serializedATNSegment11: string =
		"\x02\u169B\u0241\x03\x02\x02\x02\u169C\u16A1\x05\u020C\u0107\x02\u169D" +
		"\u16A1\x05\u01E4\xF3\x02\u169E\u16A1\x05\u0232\u011A\x02\u169F\u16A1\x05" +
		"\u0246\u0124\x02\u16A0\u169C\x03\x02\x02\x02\u16A0\u169D\x03\x02\x02\x02" +
		"\u16A0\u169E\x03\x02\x02\x02\u16A0\u169F\x03\x02\x02\x02\u16A1\u16AB\x03" +
		"\x02\x02\x02\u16A2\u16A7\x07\u03BB\x02\x02\u16A3\u16A8\x05\u020C\u0107" +
		"\x02\u16A4\u16A8\x05\u01E4\xF3\x02\u16A5\u16A8\x05\u0232\u011A\x02\u16A6" +
		"\u16A8\x05\u0246\u0124\x02\u16A7\u16A3\x03\x02\x02\x02\u16A7\u16A4\x03" +
		"\x02\x02\x02\u16A7\u16A5\x03\x02\x02\x02\u16A7\u16A6\x03\x02\x02\x02\u16A8" +
		"\u16AA\x03\x02\x02\x02\u16A9\u16A2\x03\x02\x02\x02\u16AA\u16AD\x03\x02" +
		"\x02\x02\u16AB\u16A9\x03\x02\x02\x02\u16AB\u16AC\x03\x02\x02\x02\u16AC" +
		"\u0243\x03\x02\x02\x02\u16AD\u16AB\x03\x02\x02\x02\u16AE\u16B3\x05\u020C" +
		"\u0107\x02\u16AF\u16B3\x05\u01E4\xF3\x02\u16B0\u16B3\x05\u0232\u011A\x02" +
		"\u16B1\u16B3\x05\u0246\u0124\x02\u16B2\u16AE\x03\x02\x02\x02\u16B2\u16AF" +
		"\x03\x02\x02\x02\u16B2\u16B0\x03\x02\x02\x02\u16B2\u16B1\x03\x02\x02\x02" +
		"\u16B3\u0245\x03\x02\x02\x02\u16B4\u16B5\b\u0124\x01\x02\u16B5\u16B6\t" +
		"h\x02\x02\u16B6\u16C0\x05\u0246\u0124\x06\u16B7\u16B8\x05\u0248\u0125" +
		"\x02\u16B8\u16BA\x07O\x02\x02\u16B9\u16BB\x07f\x02\x02\u16BA\u16B9\x03" +
		"\x02\x02\x02\u16BA\u16BB\x03\x02\x02\x02\u16BB\u16BC\x03\x02\x02\x02\u16BC" +
		"\u16BD\ti\x02\x02\u16BD\u16C0\x03\x02\x02\x02\u16BE\u16C0\x05\u0248\u0125" +
		"\x02\u16BF\u16B4\x03\x02\x02\x02\u16BF\u16B7\x03\x02\x02\x02\u16BF\u16BE" +
		"\x03\x02\x02\x02\u16C0\u16C7\x03\x02\x02\x02\u16C1\u16C2\f\x05\x02\x02" +
		"\u16C2\u16C3\x05\u0250\u0129\x02\u16C3\u16C4\x05\u0246\u0124\x06\u16C4" +
		"\u16C6\x03\x02\x02\x02\u16C5\u16C1\x03\x02\x02\x02\u16C6\u16C9\x03\x02" +
		"\x02\x02\u16C7\u16C5\x03\x02\x02\x02\u16C7\u16C8\x03\x02\x02\x02\u16C8" +
		"\u0247\x03\x02\x02\x02\u16C9\u16C7\x03\x02\x02\x02\u16CA\u16CD\b\u0125" +
		"\x01\x02\u16CB\u16CC\x07\u03D2\x02\x02\u16CC\u16CE\x07\u039F\x02\x02\u16CD" +
		"\u16CB\x03\x02\x02\x02\u16CD\u16CE\x03\x02\x02\x02\u16CE\u16CF\x03\x02" +
		"\x02\x02\u16CF\u16D0\x05\u024A\u0126\x02\u16D0\u170A\x03\x02\x02\x02\u16D1" +
		"\u16D2\f\t\x02\x02\u16D2\u16D3\x05\u024E\u0128\x02\u16D3\u16D4\x05\u0248" +
		"\u0125\n\u16D4\u1709\x03\x02\x02\x02\u16D5\u16D7\f\x07\x02\x02\u16D6\u16D8" +
		"\x07f\x02\x02\u16D7\u16D6\x03\x02\x02\x02\u16D7\u16D8\x03\x02\x02\x02" +
		"\u16D8\u16D9\x03\x02\x02\x02\u16D9\u16DA\x07\x11\x02\x02\u16DA\u16DB\x05" +
		"\u0248\u0125\x02\u16DB\u16DC\x07\r\x02\x02\u16DC\u16DD\x05\u0248\u0125" +
		"\b\u16DD\u1709\x03\x02\x02\x02\u16DE\u16DF\f\x06\x02\x02\u16DF\u16E0\x07" +
		"\u01F1\x02\x02\u16E0\u16E1\x07X\x02\x02\u16E1\u1709\x05\u0248\u0125\x07" +
		"\u16E2\u16E4\f\x04\x02\x02\u16E3\u16E5\x07f\x02\x02\u16E4\u16E3\x03\x02" +
		"\x02\x02\u16E4\u16E5\x03\x02\x02\x02\u16E5\u16E6\x03\x02\x02\x02\u16E6" +
		"\u16E7\tj\x02\x02\u16E7\u1709\x05\u0248\u0125\x05\u16E8\u16EA\f\v\x02" +
		"\x02\u16E9\u16EB\x07f\x02\x02\u16EA\u16E9\x03\x02\x02\x02\u16EA\u16EB" +
		"\x03\x02\x02\x02\u16EB\u16EC\x03\x02\x02\x02\u16EC\u16ED\x07G\x02\x02" +
		"\u16ED\u16F0\x07\u03B9\x02\x02\u16EE\u16F1\x05\xAEX\x02\u16EF\u16F1\x05" +
		"\u021E\u0110\x02\u16F0\u16EE\x03\x02\x02\x02\u16F0\u16EF\x03\x02\x02\x02" +
		"\u16F1\u16F2\x03\x02\x02\x02\u16F2\u16F3\x07\u03BA\x02\x02\u16F3\u1709" +
		"\x03\x02\x02\x02\u16F4\u16F5\f\n\x02\x02\u16F5\u16F6\x07O\x02\x02\u16F6" +
		"\u1709\x05\u020A\u0106\x02\u16F7\u16F8\f\b\x02\x02\u16F8\u16F9\x05\u024E" +
		"\u0128\x02\u16F9\u16FA\tk\x02\x02\u16FA\u16FB\x07\u03B9\x02\x02\u16FB" +
		"\u16FC\x05\xAEX\x02\u16FC\u16FD\x07\u03BA\x02\x02\u16FD\u1709\x03\x02" +
		"\x02\x02\u16FE\u1700\f\x05\x02\x02\u16FF\u1701\x07f\x02\x02\u1700\u16FF" +
		"\x03\x02\x02\x02\u1700\u1701\x03\x02\x02\x02\u1701\u1702\x03\x02\x02\x02" +
		"\u1702\u1703\x07X\x02\x02\u1703\u1706\x05\u0248\u0125\x02\u1704\u1705" +
		"\x07\u013F\x02\x02\u1705\u1707\x07\u03C7\x02\x02\u1706\u1704\x03\x02\x02" +
		"\x02\u1706\u1707\x03\x02\x02\x02\u1707\u1709\x03\x02\x02\x02\u1708\u16D1" +
		"\x03\x02\x02\x02\u1708\u16D5\x03\x02\x02\x02\u1708\u16DE\x03\x02\x02\x02" +
		"\u1708\u16E2\x03\x02\x02\x02\u1708\u16E8\x03\x02\x02\x02\u1708\u16F4\x03" +
		"\x02\x02\x02\u1708\u16F7\x03\x02\x02\x02\u1708\u16FE\x03\x02\x02\x02\u1709" +
		"\u170C\x03\x02\x02\x02\u170A\u1708\x03\x02\x02\x02\u170A\u170B\x03\x02" +
		"\x02\x02\u170B\u0249\x03\x02\x02\x02\u170C\u170A\x03\x02\x02\x02\u170D" +
		"\u170E\b\u0126\x01\x02\u170E\u173B\x05\u020C\u0107\x02\u170F\u173B\x05" +
		"\u01E4\xF3\x02\u1710\u173B\x05\u0232\u011A\x02\u1711\u173B\x05\u01EA\xF6" +
		"\x02\u1712\u1713\x05\u024C\u0127\x02\u1713\u1714\x05\u024A\u0126\v\u1714" +
		"\u173B\x03\x02\x02\x02\u1715\u1716\x07\xC0\x02\x02\u1716\u173B\x05\u024A" +
		"\u0126\n\u1717\u1718\x07\u03B9\x02\x02\u1718\u171D\x05\u0246\u0124\x02" +
		"\u1719\u171A\x07\u03BB\x02\x02\u171A\u171C\x05\u0246\u0124\x02\u171B\u1719" +
		"\x03\x02\x02\x02\u171C\u171F\x03\x02\x02\x02\u171D\u171B\x03\x02\x02\x02" +
		"\u171D\u171E\x03\x02\x02\x02\u171E\u1720\x03\x02\x02\x02\u171F\u171D\x03" +
		"\x02\x02\x02\u1720\u1721\x07\u03BA\x02\x02\u1721\u173B\x03\x02\x02\x02" +
		"\u1722\u1723\x07\u01DF\x02\x02\u1723\u1724\x07\u03B9\x02\x02\u1724\u1727" +
		"\x05\u0246\u0124\x02\u1725\u1726\x07\u03BB\x02\x02\u1726\u1728\x05\u0246" +
		"\u0124\x02\u1727\u1725\x03\x02\x02\x02\u1728\u1729\x03\x02\x02\x02\u1729" +
		"\u1727\x03\x02\x02\x02\u1729\u172A\x03\x02\x02\x02\u172A\u172B\x03\x02" +
		"\x02\x02\u172B\u172C\x07\u03BA\x02\x02\u172C\u173B\x03\x02\x02\x02\u172D" +
		"\u172E\x076\x02\x02\u172E\u172F\x07\u03B9\x02\x02\u172F\u1730\x05\xAE" +
		"X\x02\u1730\u1731\x07\u03BA\x02\x02\u1731\u173B\x03\x02\x02\x02\u1732" +
		"\u1733\x07\u03B9\x02\x02\u1733\u1734\x05\xAEX\x02\u1734\u1735\x07\u03BA" +
		"\x02\x02\u1735\u173B\x03\x02\x02\x02\u1736\u1737\x07M\x02\x02\u1737\u1738" +
		"\x05\u0246\u0124\x02\u1738\u1739\x056\x1C\x02\u1739\u173B\x03\x02\x02" +
		"\x02\u173A\u170D\x03\x02\x02\x02\u173A\u170F\x03\x02\x02\x02\u173A\u1710" +
		"\x03\x02\x02\x02\u173A\u1711\x03\x02\x02\x02\u173A\u1712\x03\x02\x02\x02" +
		"\u173A\u1715\x03\x02\x02\x02\u173A\u1717\x03\x02\x02\x02\u173A\u1722\x03" +
		"\x02\x02\x02\u173A\u172D\x03\x02\x02\x02\u173A\u1732\x03\x02\x02\x02\u173A" +
		"\u1736\x03\x02\x02\x02\u173B\u1749\x03\x02\x02\x02\u173C\u173D\f\x04\x02" +
		"\x02\u173D\u173E\x05\u0252\u012A\x02\u173E\u173F\x05\u024A\u0126\x05\u173F" +
		"\u1748\x03\x02\x02\x02\u1740\u1741\f\x03\x02\x02\u1741\u1742\x05\u0254" +
		"\u012B\x02\u1742\u1743\x05\u024A\u0126\x04\u1743\u1748\x03\x02\x02\x02" +
		"\u1744\u1745\f\r\x02\x02\u1745\u1746\x07\x1B\x02\x02\u1746\u1748\x05\u01EE" +
		"\xF8\x02\u1747\u173C\x03\x02\x02\x02\u1747\u1740\x03\x02\x02\x02\u1747" +
		"\u1744\x03\x02\x02\x02\u1748\u174B\x03\x02\x02\x02\u1749\u1747\x03\x02" +
		"\x02\x02\u1749\u174A\x03\x02\x02\x02\u174A\u024B\x03\x02\x02\x02\u174B" +
		"\u1749\x03\x02\x02\x02\u174C\u174D\tl\x02\x02\u174D\u024D\x03\x02\x02" +
		"\x02\u174E\u175D\x07\u03B0\x02\x02\u174F\u175D\x07\u03B1\x02\x02\u1750" +
		"\u175D\x07\u03B2\x02\x02\u1751\u1752\x07\u03B2\x02\x02\u1752\u175D\x07" +
		"\u03B0\x02\x02\u1753\u1754\x07\u03B1\x02\x02\u1754\u175D\x07\u03B0\x02" +
		"\x02\u1755\u1756\x07\u03B2\x02\x02\u1756\u175D\x07\u03B1\x02\x02\u1757" +
		"\u1758\x07\u03B3\x02\x02\u1758\u175D\x07\u03B0\x02\x02\u1759\u175A\x07" +
		"\u03B2\x02\x02\u175A\u175B\x07\u03B0\x02\x02\u175B\u175D\x07\u03B1\x02" +
		"\x02\u175C\u174E\x03\x02\x02\x02\u175C\u174F\x03\x02\x02\x02\u175C\u1750" +
		"\x03\x02\x02\x02\u175C\u1751\x03\x02\x02\x02\u175C\u1753\x03\x02\x02\x02" +
		"\u175C\u1755\x03\x02\x02\x02\u175C\u1757\x03\x02\x02\x02\u175C\u1759\x03" +
		"\x02\x02\x02\u175D\u024F\x03\x02\x02\x02\u175E\u1766\x07\r\x02\x02\u175F" +
		"\u1760\x07\u03B6\x02\x02\u1760\u1766\x07\u03B6\x02\x02\u1761\u1766\x07" +
		"\xAC\x02\x02\u1762\u1766\x07m\x02\x02\u1763\u1764\x07\u03B5\x02\x02\u1764" +
		"\u1766\x07\u03B5\x02\x02\u1765\u175E\x03\x02\x02\x02\u1765\u175F\x03\x02" +
		"\x02\x02\u1765\u1761\x03\x02\x02\x02\u1765\u1762\x03\x02\x02\x02\u1765" +
		"\u1763\x03\x02\x02\x02\u1766\u0251\x03\x02\x02\x02\u1767\u1768\x07\u03B2" +
		"\x02\x02\u1768\u176F\x07\u03B2\x02\x02\u1769\u176A\x07\u03B1\x02\x02\u176A" +
		"\u176F\x07\u03B1\x02\x02\u176B\u176F\x07\u03B6\x02\x02\u176C\u176F\x07" +
		"\u03B7\x02\x02\u176D\u176F\x07\u03B5\x02\x02\u176E\u1767\x03\x02\x02\x02" +
		"\u176E\u1769\x03\x02\x02\x02\u176E\u176B\x03\x02\x02\x02\u176E\u176C\x03" +
		"\x02\x02\x02\u176E\u176D\x03\x02\x02\x02\u176F\u0253\x03\x02\x02\x02\u1770" +
		"\u1771\tm\x02\x02\u1771\u0255\x03\x02\x02\x02\u1772\u1773\tn\x02\x02\u1773" +
		"\u0257\x03\x02\x02\x02\u1774\u1775\to\x02\x02\u1775\u0259\x03\x02\x02" +
		"\x02\u1776\u1777\tp\x02\x02\u1777\u025B\x03\x02\x02\x02\u1778\u1779\t" +
		"q\x02\x02\u1779\u025D\x03\x02\x02\x02\u177A\u177B\tr\x02\x02\u177B\u025F" +
		"\x03\x02\x02\x02\u177C\u177D\ts\x02\x02\u177D\u0261\x03\x02\x02\x02\u177E" +
		"\u177F\tt\x02\x02\u177F\u0263\x03\x02\x02\x02\u0362\u026B\u0290\u029C" +
		"\u02A7\u02B8\u02BD\u02C9\u02E4\u02EA\u02EF\u02F5\u02FA\u02FE\u0307\u030A" +
		"\u030D\u0311\u0318\u031B\u0320\u0328\u032D\u0332\u0335\u0340\u0343\u0347" +
		"\u034A\u034E\u0351\u0355\u0358\u035B\u035F\u0362\u0366\u036C\u0372\u0378" +
		"\u037F\u0386\u038C\u0392\u039B\u03AE\u03B5\u03B9\u03C3\u03C7\u03CB\u03CF" +
		"\u03D3\u03D8\u03DB\u03DE\u03E1\u03E4\u03EA\u03EE\u03F4\u03F9\u03FC\u03FF" +
		"\u0401\u040C\u0410\u0413\u0421\u0424\u0428\u042B\u042F\u0432\u0436\u0439" +
		"\u043D\u0440\u0443\u0447\u044A\u044E\u0454\u0461\u0468\u046D\u0470\u0475" +
		"\u047D\u0483\u0487\u048A\u048F\u0492\u0496\u049A\u049D\u04A5\u04A7\u04AE" +
		"\u04B4\u04BC\u04BF\u04C6\u04C9\u04CB\u04D1\u04D7\u04E8\u04EF\u04F6\u04FF" +
		"\u050D\u051A\u051F\u052F\u0537\u0541\u0547\u054F\u0554\u055F\u0566\u056B" +
		"\u056F\u0571\u0576\u057C\u0581\u0583\u0587\u058A\u058D\u0593\u0598\u059A" +
		"\u059F\u05A6\u05A8\u05AF\u05B6\u05B9\u05C1\u05C9\u05CB\u05D3\u05D7\u05DA" +
		"\u05E0\u05E5\u05E8\u05EE\u05F1\u05F5\u05FA\u05FF\u0603\u0608\u060B\u0610" +
		"\u0614\u0618\u061D\u0622\u0627\u062D\u0632\u0637\u063D\u0642\u0647\u064C" +
		"\u0651\u0656\u065B\u0660\u0665\u066A\u066F\u0675\u0679\u067F\u0689\u0690" +
		"\u0692\u069A\u069F\u06A2\u06AA\u06B0\u06C0\u06CC\u06CE\u06D1\u06D9\u06DF" +
		"\u06E5\u06F2\u06F9\u0701\u0704\u0710\u0717\u071F\u0722\u072E\u0735\u073D" +
		"\u0740\u0747\u074F\u0752\u0754\u0759\u0761\u076A\u076E\u0772\u0777\u077D" +
		"\u0783\u0788\u078D\u0792\u0797\u079A\u079F\u07A4\u07AE\u07B2\u07B9\u07BE" +
		"\u07C1\u07C6\u07C9\u07CD\u07D1\u07D9\u07EC\u07EF\u07F2\u07F6\u0800\u080D" +
		"\u0814\u0817\u0820\u0824\u082F\u0832\u0836\u083E\u0841\u0846\u084E\u0854" +
		"\u0858\u085C\u0861\u0866\u086D\u0871\u087C\u0884\u0887\u088D\u0893\u0895" +
		"\u089A\u08A0\u08A6\u08A8\u08AC\u08AF\u08B2\u08B8\u08BE\u08C1\u08C7\u08CD" +
		"\u08CF\u08D4\u08DC\u08DE\u08E7\u08EC\u08F4\u08F8\u0900\u090A\u090F\u0916" +
		"\u091A\u092D\u0931\u093D\u0940\u0949\u095A\u0966\u096D\u0974\u0983\u0990" +
		"\u0996\u099C\u09A2\u09A8\u09AE\u09B4\u09B9\u09C0\u09C7\u09CE\u09D1\u09D5" +
		"\u09D8\u09E5\u09EC\u09F3\u09F9\u09FD\u0A01\u0A08\u0A0B\u0A10\u0A17\u0A1E" +
		"\u0A22\u0A2B\u0A34\u0A3D\u0A40\u0A44\u0A4D\u0A51\u0A54\u0A57\u0A5F\u0A65" +
		"\u0A6E\u0A71\u0A7C\u0A7F\u0A84\u0A87\u0A8C\u0A96\u0A9B\u0AA1\u0AA3\u0AA9" +
		"\u0AAB\u0AB1\u0AB9\u0ABE\u0AC6\u0AC9\u0ACE\u0AD1\u0AD6\u0ADE\u0AE6\u0AEC" +
		"\u0AF4\u0AF9\u0B01\u0B04\u0B08\u0B0B\u0B13\u0B19\u0B22\u0B25\u0B29\u0B2D" +
		"\u0B33\u0B37\u0B3B\u0B3D\u0B40\u0B43\u0B46\u0B4C\u0B50\u0B53\u0B56\u0B59" +
		"\u0B5C\u0B5E\u0B62\u0B70\u0B73\u0B79\u0B7D\u0B85\u0B89\u0B8C\u0B8F\u0B98" +
		"\u0B9C\u0B9F\u0BA3\u0BA7\u0BAA\u0BAD\u0BB2\u0BB8\u0BBC\u0BC6\u0BCC\u0BD0" +
		"\u0BD6\u0BDA\u0BE0\u0BE3\u0BEF\u0BF3\u0BF7\u0BFF\u0C03\u0C0B\u0C0E\u0C12" +
		"\u0C15\u0C1D\u0C22\u0C25\u0C28\u0C2C\u0C2F\u0C38\u0C3D\u0C46\u0C4B\u0C52" +
		"\u0C59\u0C61\u0C66\u0C6E\u0C71\u0C74\u0C7B\u0C7E\u0C85\u0C88\u0C90\u0C96" +
		"\u0CA1\u0CA4\u0CAF\u0CB5\u0CB9\u0CC4\u0CC9\u0CCB\u0CCF\u0CD9\u0CE3\u0CE9" +
		"\u0CEE\u0CF1\u0CF4\u0CF7\u0CFD\u0D02\u0D05\u0D08\u0D0B\u0D0D\u0D13\u0D18" +
		"\u0D1B\u0D1E\u0D22\u0D28\u0D2C\u0D36\u0D3A\u0D40\u0D49\u0D4C\u0D50\u0D53" +
		"\u0D57\u0D5B\u0D5E\u0D60\u0D68\u0D74\u0D7A\u0D7C\u0D82\u0D84\u0D86\u0D8C" +
		"\u0D94\u0D9C\u0DA2\u0DAB\u0DB0\u0DB2\u0DB6\u0DBA\u0DC0\u0DC7\u0DD0\u0DD3" +
		"\u0DD7\u0DDB\u0DDF\u0DE2\u0DE5\u0DE8\u0DEC\u0DF0\u0DF3\u0DF6\u0DF9\u0E00" +
		"\u0E04\u0E13\u0E20\u0E28\u0E32\u0E36\u0E39\u0E3F\u0E42\u0E45\u0E4E\u0E57" +
		"\u0E61\u0E65\u0E6F\u0E79\u0E81\u0E84\u0E8D\u0E90\u0E94\u0E99\u0E9D\u0EA6" +
		"\u0EA9\u0EC8\u0ECB\u0ECE\u0F06\u0F0B\u0F27\u0F35\u0F3C\u0F40\u0F46\u0F4E" +
		"\u0F50\u0F5B\u0F65\u0F6C\u0F72\u0F7A\u0F7F\u0F85\u0F8B\u0F91\u0F97\u0F9D" +
		"\u0F9F\u0FA3\u0FA8\u0FAD\u0FB3\u0FB5\u0FC0\u0FC5\u0FCC\u0FCE\u0FDC\u0FE2" +
		"\u0FE7\u0FEC\u0FF2\u0FF9\u1001\u1009\u100E\u1014\u1017\u101F\u1026\u102F" +
		"\u1032\u1043\u104B\u1053\u1057\u105C\u1062\u106A\u1073\u1079\u1080\u1087" +
		"\u108C\u108F\u1091\u1097\u1099\u109D\u109F\u10A2\u10AB\u10B1\u10B8\u10BF" +
		"\u10C4\u10C7\u10C9\u10CF\u10D1\u10D5\u10D7\u10DA\u10DF\u10E6\u10EF\u10F4" +
		"\u10FD\u1104\u1109\u110C\u110E\u1114\u1116\u1119\u1125\u112B\u1134\u113D" +
		"\u1142\u114B\u1151\u115C\u115F\u116B\u1172\u1177\u1186\u1191\u1194\u119E" +
		"\u11A8\u11B2\u11BC\u11C0\u11C4\u11CD\u11E8\u11F7\u11FF\u120A\u1211\u1215" +
		"\u121C\u1221\u1224\u1227\u1230\u1234\u1252\u1259\u125D\u1264\u1267\u126C" +
		"\u1276\u127A\u1280\u1283\u1288\u128C\u1293\u1296\u129C\u12B4\u12C1\u12C4" +
		"\u12CE\u12D6\u12DA\u12E1\u12E4\u12ED\u12F3\u12F9\u1303\u1305\u130B\u130E" +
		"\u1311\u131D\u1320\u1326\u1329\u1331\u1339\u133F\u1343\u1351\u135D\u1364" +
		"\u1367\u136E\u1375\u137A\u137F\u138A\u1395\u139B\u13A0\u13AD\u13AF\u13B4" +
		"\u13B9\u13BB\u13C2\u13C9\u13CC\u13CF\u13D5\u13D9\u13DF\u13E5\u13F4\u13F9" +
		"\u13FF\u1406\u1408\u140F\u1412\u141C\u1420\u1434\u143B\u143D\u1444\u1446" +
		"\u144A\u144F\u145A\u145F\u1465\u1468\u146C\u1471\u1474\u1478\u147C\u147E" +
		"\u1483\u1488\u1495\u1498\u149C\u149F\u14A4\u14A8\u14AC\u14AF\u14B2\u14B6" +
		"\u14B9\u14BC\u14C0\u14C3\u14C6\u14CB\u14D4\u14D9\u14DE\u14E2\u14E5\u14E9" +
		"\u14ED\u14F2\u14F7\u14FB\u14FD\u150D\u1516\u151E\u1527\u1531\u1539\u1541" +
		"\u1549\u1551\u155A\u155C\u1561\u1564\u1569\u156C\u1570\u157E\u1585\u158A" +
		"\u15AC\u15B0\u15B8\u15BC\u15C5\u15CD\u15D2\u15DA\u15DF\u15E4\u15E6\u15EF" +
		"\u15F4\u15FC\u1601\u1609\u1611\u1614\u161E\u1629\u1636\u163E\u1642\u1647" +
		"\u1650\u1653\u165F\u1667\u1671\u1674\u1678\u167C\u1695\u16A0\u16A7\u16AB" +
		"\u16B2\u16BA\u16BF\u16C7\u16CD\u16D7\u16E4\u16EA\u16F0\u1700\u1706\u1708" +
		"\u170A\u171D\u1729\u173A\u1747\u1749\u175C\u1765\u176E";
	public static readonly _serializedATN: string = Utils.join(
		[
			MySqlParser._serializedATNSegment0,
			MySqlParser._serializedATNSegment1,
			MySqlParser._serializedATNSegment2,
			MySqlParser._serializedATNSegment3,
			MySqlParser._serializedATNSegment4,
			MySqlParser._serializedATNSegment5,
			MySqlParser._serializedATNSegment6,
			MySqlParser._serializedATNSegment7,
			MySqlParser._serializedATNSegment8,
			MySqlParser._serializedATNSegment9,
			MySqlParser._serializedATNSegment10,
			MySqlParser._serializedATNSegment11,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MySqlParser.__ATN) {
			MySqlParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MySqlParser._serializedATN));
		}

		return MySqlParser.__ATN;
	}

}

export class SqlStatementContext extends ParserRuleContext {
	public ddlStatement(): DdlStatementContext | undefined {
		return this.tryGetRuleContext(0, DdlStatementContext);
	}
	public dmlStatement(): DmlStatementContext | undefined {
		return this.tryGetRuleContext(0, DmlStatementContext);
	}
	public transactionStatement(): TransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, TransactionStatementContext);
	}
	public replicationStatement(): ReplicationStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplicationStatementContext);
	}
	public preparedStatement(): PreparedStatementContext | undefined {
		return this.tryGetRuleContext(0, PreparedStatementContext);
	}
	public administrationStatement(): AdministrationStatementContext | undefined {
		return this.tryGetRuleContext(0, AdministrationStatementContext);
	}
	public utilityStatement(): UtilityStatementContext | undefined {
		return this.tryGetRuleContext(0, UtilityStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_sqlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSqlStatement) {
			listener.enterSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSqlStatement) {
			listener.exitSqlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSqlStatement) {
			return visitor.visitSqlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	public createDatabase(): CreateDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseContext);
	}
	public createEvent(): CreateEventContext | undefined {
		return this.tryGetRuleContext(0, CreateEventContext);
	}
	public createIndex(): CreateIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexContext);
	}
	public createLogfileGroup(): CreateLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, CreateLogfileGroupContext);
	}
	public createProcedure(): CreateProcedureContext | undefined {
		return this.tryGetRuleContext(0, CreateProcedureContext);
	}
	public createFunction(): CreateFunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionContext);
	}
	public createServer(): CreateServerContext | undefined {
		return this.tryGetRuleContext(0, CreateServerContext);
	}
	public createTable(): CreateTableContext | undefined {
		return this.tryGetRuleContext(0, CreateTableContext);
	}
	public createTablespaceInnodb(): CreateTablespaceInnodbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceInnodbContext);
	}
	public createTablespaceNdb(): CreateTablespaceNdbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceNdbContext);
	}
	public createTrigger(): CreateTriggerContext | undefined {
		return this.tryGetRuleContext(0, CreateTriggerContext);
	}
	public createView(): CreateViewContext | undefined {
		return this.tryGetRuleContext(0, CreateViewContext);
	}
	public alterDatabase(): AlterDatabaseContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseContext);
	}
	public alterEvent(): AlterEventContext | undefined {
		return this.tryGetRuleContext(0, AlterEventContext);
	}
	public alterFunction(): AlterFunctionContext | undefined {
		return this.tryGetRuleContext(0, AlterFunctionContext);
	}
	public alterInstance(): AlterInstanceContext | undefined {
		return this.tryGetRuleContext(0, AlterInstanceContext);
	}
	public alterLogfileGroup(): AlterLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, AlterLogfileGroupContext);
	}
	public alterProcedure(): AlterProcedureContext | undefined {
		return this.tryGetRuleContext(0, AlterProcedureContext);
	}
	public alterServer(): AlterServerContext | undefined {
		return this.tryGetRuleContext(0, AlterServerContext);
	}
	public alterTable(): AlterTableContext | undefined {
		return this.tryGetRuleContext(0, AlterTableContext);
	}
	public alterTablespace(): AlterTablespaceContext | undefined {
		return this.tryGetRuleContext(0, AlterTablespaceContext);
	}
	public alterView(): AlterViewContext | undefined {
		return this.tryGetRuleContext(0, AlterViewContext);
	}
	public dropDatabase(): DropDatabaseContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseContext);
	}
	public dropEvent(): DropEventContext | undefined {
		return this.tryGetRuleContext(0, DropEventContext);
	}
	public dropIndex(): DropIndexContext | undefined {
		return this.tryGetRuleContext(0, DropIndexContext);
	}
	public dropLogfileGroup(): DropLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, DropLogfileGroupContext);
	}
	public dropProcedure(): DropProcedureContext | undefined {
		return this.tryGetRuleContext(0, DropProcedureContext);
	}
	public dropFunction(): DropFunctionContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionContext);
	}
	public dropServer(): DropServerContext | undefined {
		return this.tryGetRuleContext(0, DropServerContext);
	}
	public dropTable(): DropTableContext | undefined {
		return this.tryGetRuleContext(0, DropTableContext);
	}
	public dropTablespace(): DropTablespaceContext | undefined {
		return this.tryGetRuleContext(0, DropTablespaceContext);
	}
	public dropTrigger(): DropTriggerContext | undefined {
		return this.tryGetRuleContext(0, DropTriggerContext);
	}
	public dropView(): DropViewContext | undefined {
		return this.tryGetRuleContext(0, DropViewContext);
	}
	public renameTable(): RenameTableContext | undefined {
		return this.tryGetRuleContext(0, RenameTableContext);
	}
	public truncateTable(): TruncateTableContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ddlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDdlStatement) {
			listener.enterDdlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDdlStatement) {
			listener.exitDdlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDdlStatement) {
			return visitor.visitDdlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DmlStatementContext extends ParserRuleContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public callStatement(): CallStatementContext | undefined {
		return this.tryGetRuleContext(0, CallStatementContext);
	}
	public loadDataStatement(): LoadDataStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadDataStatementContext);
	}
	public loadXmlStatement(): LoadXmlStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadXmlStatementContext);
	}
	public doStatement(): DoStatementContext | undefined {
		return this.tryGetRuleContext(0, DoStatementContext);
	}
	public handlerStatement(): HandlerStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dmlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDmlStatement) {
			listener.enterDmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDmlStatement) {
			listener.exitDmlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDmlStatement) {
			return visitor.visitDmlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	public startTransaction(): StartTransactionContext | undefined {
		return this.tryGetRuleContext(0, StartTransactionContext);
	}
	public beginWork(): BeginWorkContext | undefined {
		return this.tryGetRuleContext(0, BeginWorkContext);
	}
	public commitWork(): CommitWorkContext | undefined {
		return this.tryGetRuleContext(0, CommitWorkContext);
	}
	public rollbackWork(): RollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, RollbackWorkContext);
	}
	public savepointStatement(): SavepointStatementContext | undefined {
		return this.tryGetRuleContext(0, SavepointStatementContext);
	}
	public rollbackStatement(): RollbackStatementContext | undefined {
		return this.tryGetRuleContext(0, RollbackStatementContext);
	}
	public releaseStatement(): ReleaseStatementContext | undefined {
		return this.tryGetRuleContext(0, ReleaseStatementContext);
	}
	public lockTables(): LockTablesContext | undefined {
		return this.tryGetRuleContext(0, LockTablesContext);
	}
	public unlockTables(): UnlockTablesContext | undefined {
		return this.tryGetRuleContext(0, UnlockTablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionStatement) {
			listener.enterTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionStatement) {
			listener.exitTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionStatement) {
			return visitor.visitTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	public changeMaster(): ChangeMasterContext | undefined {
		return this.tryGetRuleContext(0, ChangeMasterContext);
	}
	public changeReplicationFilter(): ChangeReplicationFilterContext | undefined {
		return this.tryGetRuleContext(0, ChangeReplicationFilterContext);
	}
	public purgeBinaryLogs(): PurgeBinaryLogsContext | undefined {
		return this.tryGetRuleContext(0, PurgeBinaryLogsContext);
	}
	public resetMaster(): ResetMasterContext | undefined {
		return this.tryGetRuleContext(0, ResetMasterContext);
	}
	public resetSlave(): ResetSlaveContext | undefined {
		return this.tryGetRuleContext(0, ResetSlaveContext);
	}
	public startSlave(): StartSlaveContext | undefined {
		return this.tryGetRuleContext(0, StartSlaveContext);
	}
	public stopSlave(): StopSlaveContext | undefined {
		return this.tryGetRuleContext(0, StopSlaveContext);
	}
	public startGroupReplication(): StartGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StartGroupReplicationContext);
	}
	public stopGroupReplication(): StopGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StopGroupReplicationContext);
	}
	public xaStartTransaction(): XaStartTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaStartTransactionContext);
	}
	public xaEndTransaction(): XaEndTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaEndTransactionContext);
	}
	public xaPrepareStatement(): XaPrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, XaPrepareStatementContext);
	}
	public xaCommitWork(): XaCommitWorkContext | undefined {
		return this.tryGetRuleContext(0, XaCommitWorkContext);
	}
	public xaRollbackWork(): XaRollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRollbackWorkContext);
	}
	public xaRecoverWork(): XaRecoverWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRecoverWorkContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replicationStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReplicationStatement) {
			listener.enterReplicationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReplicationStatement) {
			listener.exitReplicationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReplicationStatement) {
			return visitor.visitReplicationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	public prepareStatement(): PrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, PrepareStatementContext);
	}
	public executeStatement(): ExecuteStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteStatementContext);
	}
	public deallocatePrepare(): DeallocatePrepareContext | undefined {
		return this.tryGetRuleContext(0, DeallocatePrepareContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_preparedStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPreparedStatement) {
			listener.enterPreparedStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPreparedStatement) {
			listener.exitPreparedStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPreparedStatement) {
			return visitor.visitPreparedStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public caseStatement(): CaseStatementContext | undefined {
		return this.tryGetRuleContext(0, CaseStatementContext);
	}
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public leaveStatement(): LeaveStatementContext | undefined {
		return this.tryGetRuleContext(0, LeaveStatementContext);
	}
	public loopStatement(): LoopStatementContext | undefined {
		return this.tryGetRuleContext(0, LoopStatementContext);
	}
	public repeatStatement(): RepeatStatementContext | undefined {
		return this.tryGetRuleContext(0, RepeatStatementContext);
	}
	public whileStatement(): WhileStatementContext | undefined {
		return this.tryGetRuleContext(0, WhileStatementContext);
	}
	public iterateStatement(): IterateStatementContext | undefined {
		return this.tryGetRuleContext(0, IterateStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public cursorStatement(): CursorStatementContext | undefined {
		return this.tryGetRuleContext(0, CursorStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_compoundStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCompoundStatement) {
			listener.enterCompoundStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCompoundStatement) {
			listener.exitCompoundStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCompoundStatement) {
			return visitor.visitCompoundStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdministrationStatementContext extends ParserRuleContext {
	public alterUser(): AlterUserContext | undefined {
		return this.tryGetRuleContext(0, AlterUserContext);
	}
	public createUser(): CreateUserContext | undefined {
		return this.tryGetRuleContext(0, CreateUserContext);
	}
	public dropUser(): DropUserContext | undefined {
		return this.tryGetRuleContext(0, DropUserContext);
	}
	public grantStatement(): GrantStatementContext | undefined {
		return this.tryGetRuleContext(0, GrantStatementContext);
	}
	public grantProxy(): GrantProxyContext | undefined {
		return this.tryGetRuleContext(0, GrantProxyContext);
	}
	public renameUser(): RenameUserContext | undefined {
		return this.tryGetRuleContext(0, RenameUserContext);
	}
	public revokeStatement(): RevokeStatementContext | undefined {
		return this.tryGetRuleContext(0, RevokeStatementContext);
	}
	public revokeProxy(): RevokeProxyContext | undefined {
		return this.tryGetRuleContext(0, RevokeProxyContext);
	}
	public analyzeTable(): AnalyzeTableContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeTableContext);
	}
	public checkTable(): CheckTableContext | undefined {
		return this.tryGetRuleContext(0, CheckTableContext);
	}
	public checksumTable(): ChecksumTableContext | undefined {
		return this.tryGetRuleContext(0, ChecksumTableContext);
	}
	public optimizeTable(): OptimizeTableContext | undefined {
		return this.tryGetRuleContext(0, OptimizeTableContext);
	}
	public repairTable(): RepairTableContext | undefined {
		return this.tryGetRuleContext(0, RepairTableContext);
	}
	public createUdfunction(): CreateUdfunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateUdfunctionContext);
	}
	public installPlugin(): InstallPluginContext | undefined {
		return this.tryGetRuleContext(0, InstallPluginContext);
	}
	public uninstallPlugin(): UninstallPluginContext | undefined {
		return this.tryGetRuleContext(0, UninstallPluginContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public showStatement(): ShowStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatementContext);
	}
	public binlogStatement(): BinlogStatementContext | undefined {
		return this.tryGetRuleContext(0, BinlogStatementContext);
	}
	public cacheIndexStatement(): CacheIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, CacheIndexStatementContext);
	}
	public flushStatement(): FlushStatementContext | undefined {
		return this.tryGetRuleContext(0, FlushStatementContext);
	}
	public killStatement(): KillStatementContext | undefined {
		return this.tryGetRuleContext(0, KillStatementContext);
	}
	public loadIndexIntoCache(): LoadIndexIntoCacheContext | undefined {
		return this.tryGetRuleContext(0, LoadIndexIntoCacheContext);
	}
	public resetStatement(): ResetStatementContext | undefined {
		return this.tryGetRuleContext(0, ResetStatementContext);
	}
	public shutdownStatement(): ShutdownStatementContext | undefined {
		return this.tryGetRuleContext(0, ShutdownStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_administrationStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAdministrationStatement) {
			listener.enterAdministrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAdministrationStatement) {
			listener.exitAdministrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAdministrationStatement) {
			return visitor.visitAdministrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	public simpleDescribeStatement(): SimpleDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, SimpleDescribeStatementContext);
	}
	public fullDescribeStatement(): FullDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, FullDescribeStatementContext);
	}
	public helpStatement(): HelpStatementContext | undefined {
		return this.tryGetRuleContext(0, HelpStatementContext);
	}
	public useStatement(): UseStatementContext | undefined {
		return this.tryGetRuleContext(0, UseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_utilityStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUtilityStatement) {
			listener.enterUtilityStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUtilityStatement) {
			listener.exitUtilityStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUtilityStatement) {
			return visitor.visitUtilityStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public _dbFormat: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDatabase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDatabase) {
			listener.enterCreateDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDatabase) {
			listener.exitCreateDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabase) {
			return visitor.visitCreateDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode { return this.getToken(MySqlParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext {
		return this.getRuleContext(0, ScheduleExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateEvent) {
			listener.enterCreateEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateEvent) {
			listener.exitCreateEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateEvent) {
			return visitor.visitCreateEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _intimeAction: Token;
	public _indexCategory: Token;
	public _algType: Token;
	public _lockType: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNIQUE, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createIndex; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateIndex) {
			listener.enterCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateIndex) {
			listener.exitCreateIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateIndex) {
			return visitor.visitCreateIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	public _undoFile: Token;
	public _initSize: FileSizeLiteralContext;
	public _undoSize: FileSizeLiteralContext;
	public _redoSize: FileSizeLiteralContext;
	public _comment: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MySqlParser.UNDOFILE, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateLogfileGroup) {
			listener.enterCreateLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateLogfileGroup) {
			listener.exitCreateLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateLogfileGroup) {
			return visitor.visitCreateLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public procedureParameter(): ProcedureParameterContext[];
	public procedureParameter(i: number): ProcedureParameterContext;
	public procedureParameter(i?: number): ProcedureParameterContext | ProcedureParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureParameterContext);
		} else {
			return this.getRuleContext(i, ProcedureParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateProcedure) {
			listener.enterCreateProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateProcedure) {
			listener.exitCreateProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateProcedure) {
			return visitor.visitCreateProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public RETURNS(): TerminalNode { return this.getToken(MySqlParser.RETURNS, 0); }
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public functionParameter(): FunctionParameterContext[];
	public functionParameter(i: number): FunctionParameterContext;
	public functionParameter(i?: number): FunctionParameterContext | FunctionParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionParameterContext);
		} else {
			return this.getRuleContext(i, FunctionParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateFunction) {
			listener.enterCreateFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateFunction) {
			listener.exitCreateFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateFunction) {
			return visitor.visitCreateFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	public _wrapperName: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(MySqlParser.WRAPPER, 0); }
	public OPTIONS(): TerminalNode { return this.getToken(MySqlParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateServer) {
			listener.enterCreateServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateServer) {
			listener.exitCreateServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateServer) {
			return visitor.visitCreateServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTable; }
	public copyFrom(ctx: CreateTableContext): void {
		super.copyFrom(ctx);
	}
}
export class CopyCreateTableContext extends CreateTableContext {
	public _parenthesisTable: TableNameContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIKE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCopyCreateTable) {
			listener.enterCopyCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCopyCreateTable) {
			listener.exitCopyCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCopyCreateTable) {
			return visitor.visitCopyCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QueryCreateTableContext extends CreateTableContext {
	public _keyViolate: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDefinitions(): CreateDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, CreateDefinitionsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryCreateTable) {
			listener.enterQueryCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryCreateTable) {
			listener.exitQueryCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryCreateTable) {
			return visitor.visitQueryCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ColumnCreateTableContext extends CreateTableContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public createDefinitions(): CreateDefinitionsContext {
		return this.getRuleContext(0, CreateDefinitionsContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnCreateTable) {
			listener.enterColumnCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnCreateTable) {
			listener.exitColumnCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnCreateTable) {
			return visitor.visitColumnCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablespaceInnodbContext extends ParserRuleContext {
	public _datafile: Token;
	public _fileBlockSize: FileSizeLiteralContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTablespaceInnodb; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTablespaceInnodb) {
			listener.enterCreateTablespaceInnodb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTablespaceInnodb) {
			listener.exitCreateTablespaceInnodb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTablespaceInnodb) {
			return visitor.visitCreateTablespaceInnodb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablespaceNdbContext extends ParserRuleContext {
	public _datafile: Token;
	public _extentSize: FileSizeLiteralContext;
	public _initialSize: FileSizeLiteralContext;
	public _autoextendSize: FileSizeLiteralContext;
	public _maxSize: FileSizeLiteralContext;
	public _comment: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public USE(): TerminalNode { return this.getToken(MySqlParser.USE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENT_SIZE, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTablespaceNdb; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTablespaceNdb) {
			listener.enterCreateTablespaceNdb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTablespaceNdb) {
			listener.exitCreateTablespaceNdb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTablespaceNdb) {
			return visitor.visitCreateTablespaceNdb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _thisTrigger: FullIdContext;
	public _triggerTime: Token;
	public _triggerEvent: Token;
	public _triggerPlace: Token;
	public _otherTrigger: FullIdContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MySqlParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public EACH(): TerminalNode { return this.getToken(MySqlParser.EACH, 0); }
	public ROW(): TerminalNode { return this.getToken(MySqlParser.ROW, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOLLOWS, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRECEDES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTrigger; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTrigger) {
			listener.enterCreateTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTrigger) {
			listener.exitCreateTrigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTrigger) {
			return visitor.visitCreateTrigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	public _algType: Token;
	public _secContext: Token;
	public _checkOption: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateView) {
			listener.enterCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateView) {
			listener.exitCreateView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateView) {
			return visitor.visitCreateView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDatabaseOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDatabaseOption) {
			listener.enterCreateDatabaseOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDatabaseOption) {
			listener.exitCreateDatabaseOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabaseOption) {
			return visitor.visitCreateDatabaseOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OwnerStatementContext extends ParserRuleContext {
	public DEFINER(): TerminalNode { return this.getToken(MySqlParser.DEFINER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_USER, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ownerStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOwnerStatement) {
			listener.enterOwnerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOwnerStatement) {
			listener.exitOwnerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOwnerStatement) {
			return visitor.visitOwnerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScheduleExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_scheduleExpression; }
	public copyFrom(ctx: ScheduleExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PreciseScheduleContext extends ScheduleExpressionContext {
	public AT(): TerminalNode { return this.getToken(MySqlParser.AT, 0); }
	public timestampValue(): TimestampValueContext {
		return this.getRuleContext(0, TimestampValueContext);
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPreciseSchedule) {
			listener.enterPreciseSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPreciseSchedule) {
			listener.exitPreciseSchedule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPreciseSchedule) {
			return visitor.visitPreciseSchedule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalScheduleContext extends ScheduleExpressionContext {
	public _start: TimestampValueContext;
	public _intervalExpr: IntervalExprContext;
	public _startIntervals: IntervalExprContext[] = [];
	public _end: TimestampValueContext;
	public _endIntervals: IntervalExprContext[] = [];
	public EVERY(): TerminalNode { return this.getToken(MySqlParser.EVERY, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTS, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDS, 0); }
	public timestampValue(): TimestampValueContext[];
	public timestampValue(i: number): TimestampValueContext;
	public timestampValue(i?: number): TimestampValueContext | TimestampValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TimestampValueContext);
		} else {
			return this.getRuleContext(i, TimestampValueContext);
		}
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalSchedule) {
			listener.enterIntervalSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalSchedule) {
			listener.exitIntervalSchedule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalSchedule) {
			return visitor.visitIntervalSchedule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampValueContext extends ParserRuleContext {
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_timestampValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTimestampValue) {
			listener.enterTimestampValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTimestampValue) {
			listener.exitTimestampValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTimestampValue) {
			return visitor.visitTimestampValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalExprContext extends ParserRuleContext {
	public PLUS(): TerminalNode { return this.getToken(MySqlParser.PLUS, 0); }
	public INTERVAL(): TerminalNode { return this.getToken(MySqlParser.INTERVAL, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalExpr; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalExpr) {
			listener.enterIntervalExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalExpr) {
			listener.exitIntervalExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpr) {
			return visitor.visitIntervalExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalTypeContext extends ParserRuleContext {
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public YEAR_MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR_MONTH, 0); }
	public DAY_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_HOUR, 0); }
	public DAY_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_MINUTE, 0); }
	public DAY_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_SECOND, 0); }
	public HOUR_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_MINUTE, 0); }
	public HOUR_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_SECOND, 0); }
	public MINUTE_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE_SECOND, 0); }
	public SECOND_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND_MICROSECOND, 0); }
	public MINUTE_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
	public HOUR_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_MICROSECOND, 0); }
	public DAY_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalType) {
			listener.enterIntervalType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalType) {
			listener.exitIntervalType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalType) {
			return visitor.visitIntervalType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableTypeContext extends ParserRuleContext {
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISABLE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_enableType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterEnableType) {
			listener.enterEnableType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitEnableType) {
			listener.exitEnableType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEnableType) {
			return visitor.visitEnableType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(MySqlParser.USING, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BTREE, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HASH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexType) {
			listener.enterIndexType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexType) {
			listener.exitIndexType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexType) {
			return visitor.visitIndexType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARSER, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexOption) {
			listener.enterIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexOption) {
			listener.exitIndexOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexOption) {
			return visitor.visitIndexOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _direction: Token;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_procedureParameter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterProcedureParameter) {
			listener.enterProcedureParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitProcedureParameter) {
			listener.exitProcedureParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitProcedureParameter) {
			return visitor.visitProcedureParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionParameter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionParameter) {
			listener.enterFunctionParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionParameter) {
			listener.exitFunctionParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionParameter) {
			return visitor.visitFunctionParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_routineOption; }
	public copyFrom(ctx: RoutineOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class RoutineCommentContext extends RoutineOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineComment) {
			listener.enterRoutineComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineComment) {
			listener.exitRoutineComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineComment) {
			return visitor.visitRoutineComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineLanguageContext extends RoutineOptionContext {
	public LANGUAGE(): TerminalNode { return this.getToken(MySqlParser.LANGUAGE, 0); }
	public SQL(): TerminalNode { return this.getToken(MySqlParser.SQL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineLanguage) {
			listener.enterRoutineLanguage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineLanguage) {
			listener.exitRoutineLanguage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineLanguage) {
			return visitor.visitRoutineLanguage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineBehaviorContext extends RoutineOptionContext {
	public DETERMINISTIC(): TerminalNode { return this.getToken(MySqlParser.DETERMINISTIC, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineBehavior) {
			listener.enterRoutineBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineBehavior) {
			listener.exitRoutineBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineBehavior) {
			return visitor.visitRoutineBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineDataContext extends RoutineOptionContext {
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTAINS, 0); }
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public READS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READS, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATA, 0); }
	public MODIFIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODIFIES, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineData) {
			listener.enterRoutineData(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineData) {
			listener.exitRoutineData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineData) {
			return visitor.visitRoutineData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineSecurityContext extends RoutineOptionContext {
	public _context: Token;
	public SQL(): TerminalNode { return this.getToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode { return this.getToken(MySqlParser.SECURITY, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineSecurity) {
			listener.enterRoutineSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineSecurity) {
			listener.exitRoutineSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineSecurity) {
			return visitor.visitRoutineSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOST, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOCKET, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OWNER, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PORT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_serverOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterServerOption) {
			listener.enterServerOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitServerOption) {
			listener.exitServerOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitServerOption) {
			return visitor.visitServerOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDefinitionsContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public createDefinition(): CreateDefinitionContext[];
	public createDefinition(i: number): CreateDefinitionContext;
	public createDefinition(i?: number): CreateDefinitionContext | CreateDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDefinitionContext);
		} else {
			return this.getRuleContext(i, CreateDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDefinitions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDefinitions) {
			listener.enterCreateDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDefinitions) {
			listener.exitCreateDefinitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDefinitions) {
			return visitor.visitCreateDefinitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDefinition; }
	public copyFrom(ctx: CreateDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class ColumnDeclarationContext extends CreateDefinitionContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnDeclaration) {
			listener.enterColumnDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnDeclaration) {
			listener.exitColumnDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnDeclaration) {
			return visitor.visitColumnDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConstraintDeclarationContext extends CreateDefinitionContext {
	public tableConstraint(): TableConstraintContext {
		return this.getRuleContext(0, TableConstraintContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstraintDeclaration) {
			listener.enterConstraintDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstraintDeclaration) {
			listener.exitConstraintDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstraintDeclaration) {
			return visitor.visitConstraintDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IndexDeclarationContext extends CreateDefinitionContext {
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		return this.getRuleContext(0, IndexColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexDeclaration) {
			listener.enterIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexDeclaration) {
			listener.exitIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexDeclaration) {
			return visitor.visitIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public columnConstraint(): ColumnConstraintContext[];
	public columnConstraint(i: number): ColumnConstraintContext;
	public columnConstraint(i?: number): ColumnConstraintContext | ColumnConstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnConstraintContext);
		} else {
			return this.getRuleContext(i, ColumnConstraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_columnDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnDefinition) {
			listener.enterColumnDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnDefinition) {
			listener.exitColumnDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnDefinition) {
			return visitor.visitColumnDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_columnConstraint; }
	public copyFrom(ctx: ColumnConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class NullColumnConstraintContext extends ColumnConstraintContext {
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNullColumnConstraint) {
			listener.enterNullColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNullColumnConstraint) {
			listener.exitNullColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNullColumnConstraint) {
			return visitor.visitNullColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefaultColumnConstraintContext extends ColumnConstraintContext {
	public DEFAULT(): TerminalNode { return this.getToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext {
		return this.getRuleContext(0, DefaultValueContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultColumnConstraint) {
			listener.enterDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultColumnConstraint) {
			listener.exitDefaultColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultColumnConstraint) {
			return visitor.visitDefaultColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
	public AUTO_INCREMENT(): TerminalNode { return this.getToken(MySqlParser.AUTO_INCREMENT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAutoIncrementColumnConstraint) {
			listener.enterAutoIncrementColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAutoIncrementColumnConstraint) {
			listener.exitAutoIncrementColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAutoIncrementColumnConstraint) {
			return visitor.visitAutoIncrementColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIMARY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrimaryKeyColumnConstraint) {
			listener.enterPrimaryKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrimaryKeyColumnConstraint) {
			listener.exitPrimaryKeyColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrimaryKeyColumnConstraint) {
			return visitor.visitPrimaryKeyColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUniqueKeyColumnConstraint) {
			listener.enterUniqueKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUniqueKeyColumnConstraint) {
			listener.exitUniqueKeyColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUniqueKeyColumnConstraint) {
			return visitor.visitUniqueKeyColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentColumnConstraintContext extends ColumnConstraintContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCommentColumnConstraint) {
			listener.enterCommentColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCommentColumnConstraint) {
			listener.exitCommentColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCommentColumnConstraint) {
			return visitor.visitCommentColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FormatColumnConstraintContext extends ColumnConstraintContext {
	public _colformat: Token;
	public COLUMN_FORMAT(): TerminalNode { return this.getToken(MySqlParser.COLUMN_FORMAT, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFormatColumnConstraint) {
			listener.enterFormatColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFormatColumnConstraint) {
			listener.exitFormatColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFormatColumnConstraint) {
			return visitor.visitFormatColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StorageColumnConstraintContext extends ColumnConstraintContext {
	public _storageval: Token;
	public STORAGE(): TerminalNode { return this.getToken(MySqlParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStorageColumnConstraint) {
			listener.enterStorageColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStorageColumnConstraint) {
			listener.exitStorageColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStorageColumnConstraint) {
			return visitor.visitStorageColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ReferenceColumnConstraintContext extends ColumnConstraintContext {
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceColumnConstraint) {
			listener.enterReferenceColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceColumnConstraint) {
			listener.exitReferenceColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceColumnConstraint) {
			return visitor.visitReferenceColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GeneratedColumnConstraintContext extends ColumnConstraintContext {
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GENERATED, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALWAYS, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIRTUAL, 0); }
	public STORED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORED, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGeneratedColumnConstraint) {
			listener.enterGeneratedColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGeneratedColumnConstraint) {
			listener.exitGeneratedColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGeneratedColumnConstraint) {
			return visitor.visitGeneratedColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
	public SERIAL(): TerminalNode { return this.getToken(MySqlParser.SERIAL, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(MySqlParser.DEFAULT, 0); }
	public VALUE(): TerminalNode { return this.getToken(MySqlParser.VALUE, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSerialDefaultColumnConstraint) {
			listener.enterSerialDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSerialDefaultColumnConstraint) {
			listener.exitSerialDefaultColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSerialDefaultColumnConstraint) {
			return visitor.visitSerialDefaultColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableConstraint; }
	public copyFrom(ctx: TableConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class PrimaryKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrimaryKeyTableConstraint) {
			listener.enterPrimaryKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrimaryKeyTableConstraint) {
			listener.exitPrimaryKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrimaryKeyTableConstraint) {
			return visitor.visitPrimaryKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UniqueKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public _indexFormat: Token;
	public _index: UidContext;
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUniqueKeyTableConstraint) {
			listener.enterUniqueKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUniqueKeyTableConstraint) {
			listener.exitUniqueKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUniqueKeyTableConstraint) {
			return visitor.visitUniqueKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ForeignKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public _index: UidContext;
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterForeignKeyTableConstraint) {
			listener.enterForeignKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitForeignKeyTableConstraint) {
			listener.exitForeignKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitForeignKeyTableConstraint) {
			return visitor.visitForeignKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CheckTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTableConstraint) {
			listener.enterCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTableConstraint) {
			listener.exitCheckTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTableConstraint) {
			return visitor.visitCheckTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceDefinitionContext extends ParserRuleContext {
	public _matchType: Token;
	public REFERENCES(): TerminalNode { return this.getToken(MySqlParser.REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MATCH, 0); }
	public referenceAction(): ReferenceActionContext | undefined {
		return this.tryGetRuleContext(0, ReferenceActionContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTIAL, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIMPLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceDefinition) {
			listener.enterReferenceDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceDefinition) {
			listener.exitReferenceDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceDefinition) {
			return visitor.visitReferenceDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceActionContext extends ParserRuleContext {
	public _onDelete: ReferenceControlTypeContext;
	public _onUpdate: ReferenceControlTypeContext;
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public referenceControlType(): ReferenceControlTypeContext[];
	public referenceControlType(i: number): ReferenceControlTypeContext;
	public referenceControlType(i?: number): ReferenceControlTypeContext | ReferenceControlTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReferenceControlTypeContext);
		} else {
			return this.getRuleContext(i, ReferenceControlTypeContext);
		}
	}
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceAction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceAction) {
			listener.enterReferenceAction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceAction) {
			listener.exitReferenceAction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceAction) {
			return visitor.visitReferenceAction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceControlTypeContext extends ParserRuleContext {
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceControlType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceControlType) {
			listener.enterReferenceControlType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceControlType) {
			listener.exitReferenceControlType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceControlType) {
			return visitor.visitReferenceControlType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnDefinition; }
	public copyFrom(ctx: IndexColumnDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleIndexDeclaration) {
			listener.enterSimpleIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleIndexDeclaration) {
			listener.exitSimpleIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleIndexDeclaration) {
			return visitor.visitSimpleIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpecialIndexDeclaration) {
			listener.enterSpecialIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpecialIndexDeclaration) {
			listener.exitSpecialIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialIndexDeclaration) {
			return visitor.visitSpecialIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableOption; }
	public copyFrom(ctx: TableOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class TableOptionEngineContext extends TableOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionEngine) {
			listener.enterTableOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionEngine) {
			listener.exitTableOptionEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEngine) {
			return visitor.visitTableOptionEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionAutoIncrementContext extends TableOptionContext {
	public AUTO_INCREMENT(): TerminalNode { return this.getToken(MySqlParser.AUTO_INCREMENT, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionAutoIncrement) {
			listener.enterTableOptionAutoIncrement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionAutoIncrement) {
			listener.exitTableOptionAutoIncrement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionAutoIncrement) {
			return visitor.visitTableOptionAutoIncrement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionAverageContext extends TableOptionContext {
	public AVG_ROW_LENGTH(): TerminalNode { return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionAverage) {
			listener.enterTableOptionAverage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionAverage) {
			listener.exitTableOptionAverage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionAverage) {
			return visitor.visitTableOptionAverage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCharsetContext extends TableOptionContext {
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCharset) {
			listener.enterTableOptionCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCharset) {
			listener.exitTableOptionCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCharset) {
			return visitor.visitTableOptionCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionChecksumContext extends TableOptionContext {
	public _boolValue: Token;
	public CHECKSUM(): TerminalNode { return this.getToken(MySqlParser.CHECKSUM, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionChecksum) {
			listener.enterTableOptionChecksum(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionChecksum) {
			listener.exitTableOptionChecksum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionChecksum) {
			return visitor.visitTableOptionChecksum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCollateContext extends TableOptionContext {
	public COLLATE(): TerminalNode { return this.getToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCollate) {
			listener.enterTableOptionCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCollate) {
			listener.exitTableOptionCollate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCollate) {
			return visitor.visitTableOptionCollate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCommentContext extends TableOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionComment) {
			listener.enterTableOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionComment) {
			listener.exitTableOptionComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionComment) {
			return visitor.visitTableOptionComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCompressionContext extends TableOptionContext {
	public COMPRESSION(): TerminalNode { return this.getToken(MySqlParser.COMPRESSION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCompression) {
			listener.enterTableOptionCompression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCompression) {
			listener.exitTableOptionCompression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCompression) {
			return visitor.visitTableOptionCompression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionConnectionContext extends TableOptionContext {
	public CONNECTION(): TerminalNode { return this.getToken(MySqlParser.CONNECTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionConnection) {
			listener.enterTableOptionConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionConnection) {
			listener.exitTableOptionConnection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionConnection) {
			return visitor.visitTableOptionConnection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionDataDirectoryContext extends TableOptionContext {
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionDataDirectory) {
			listener.enterTableOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionDataDirectory) {
			listener.exitTableOptionDataDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionDataDirectory) {
			return visitor.visitTableOptionDataDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionDelayContext extends TableOptionContext {
	public _boolValue: Token;
	public DELAY_KEY_WRITE(): TerminalNode { return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionDelay) {
			listener.enterTableOptionDelay(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionDelay) {
			listener.exitTableOptionDelay(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionDelay) {
			return visitor.visitTableOptionDelay(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionEncryptionContext extends TableOptionContext {
	public ENCRYPTION(): TerminalNode { return this.getToken(MySqlParser.ENCRYPTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionEncryption) {
			listener.enterTableOptionEncryption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionEncryption) {
			listener.exitTableOptionEncryption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEncryption) {
			return visitor.visitTableOptionEncryption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionIndexDirectoryContext extends TableOptionContext {
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionIndexDirectory) {
			listener.enterTableOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionIndexDirectory) {
			listener.exitTableOptionIndexDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionIndexDirectory) {
			return visitor.visitTableOptionIndexDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionInsertMethodContext extends TableOptionContext {
	public _insertMethod: Token;
	public INSERT_METHOD(): TerminalNode { return this.getToken(MySqlParser.INSERT_METHOD, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionInsertMethod) {
			listener.enterTableOptionInsertMethod(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionInsertMethod) {
			listener.exitTableOptionInsertMethod(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionInsertMethod) {
			return visitor.visitTableOptionInsertMethod(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionKeyBlockSizeContext extends TableOptionContext {
	public KEY_BLOCK_SIZE(): TerminalNode { return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionKeyBlockSize) {
			listener.enterTableOptionKeyBlockSize(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionKeyBlockSize) {
			listener.exitTableOptionKeyBlockSize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionKeyBlockSize) {
			return visitor.visitTableOptionKeyBlockSize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionMaxRowsContext extends TableOptionContext {
	public MAX_ROWS(): TerminalNode { return this.getToken(MySqlParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionMaxRows) {
			listener.enterTableOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionMaxRows) {
			listener.exitTableOptionMaxRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionMaxRows) {
			return visitor.visitTableOptionMaxRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionMinRowsContext extends TableOptionContext {
	public MIN_ROWS(): TerminalNode { return this.getToken(MySqlParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionMinRows) {
			listener.enterTableOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionMinRows) {
			listener.exitTableOptionMinRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionMinRows) {
			return visitor.visitTableOptionMinRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPackKeysContext extends TableOptionContext {
	public _extBoolValue: Token;
	public PACK_KEYS(): TerminalNode { return this.getToken(MySqlParser.PACK_KEYS, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPackKeys) {
			listener.enterTableOptionPackKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPackKeys) {
			listener.exitTableOptionPackKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPackKeys) {
			return visitor.visitTableOptionPackKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPasswordContext extends TableOptionContext {
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPassword) {
			listener.enterTableOptionPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPassword) {
			listener.exitTableOptionPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPassword) {
			return visitor.visitTableOptionPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionRowFormatContext extends TableOptionContext {
	public _rowFormat: Token;
	public ROW_FORMAT(): TerminalNode { return this.getToken(MySqlParser.ROW_FORMAT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSED, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDUNDANT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPACT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionRowFormat) {
			listener.enterTableOptionRowFormat(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionRowFormat) {
			listener.exitTableOptionRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionRowFormat) {
			return visitor.visitTableOptionRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionRecalculationContext extends TableOptionContext {
	public _extBoolValue: Token;
	public STATS_AUTO_RECALC(): TerminalNode { return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionRecalculation) {
			listener.enterTableOptionRecalculation(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionRecalculation) {
			listener.exitTableOptionRecalculation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionRecalculation) {
			return visitor.visitTableOptionRecalculation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPersistentContext extends TableOptionContext {
	public _extBoolValue: Token;
	public STATS_PERSISTENT(): TerminalNode { return this.getToken(MySqlParser.STATS_PERSISTENT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPersistent) {
			listener.enterTableOptionPersistent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPersistent) {
			listener.exitTableOptionPersistent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPersistent) {
			return visitor.visitTableOptionPersistent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionSamplePageContext extends TableOptionContext {
	public STATS_SAMPLE_PAGES(): TerminalNode { return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionSamplePage) {
			listener.enterTableOptionSamplePage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionSamplePage) {
			listener.exitTableOptionSamplePage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionSamplePage) {
			return visitor.visitTableOptionSamplePage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionTablespaceContext extends TableOptionContext {
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public tablespaceStorage(): TablespaceStorageContext | undefined {
		return this.tryGetRuleContext(0, TablespaceStorageContext);
	}
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionTablespace) {
			listener.enterTableOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionTablespace) {
			listener.exitTableOptionTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionTablespace) {
			return visitor.visitTableOptionTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionUnionContext extends TableOptionContext {
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionUnion) {
			listener.enterTableOptionUnion(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionUnion) {
			listener.exitTableOptionUnion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionUnion) {
			return visitor.visitTableOptionUnion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablespaceStorageContext extends ParserRuleContext {
	public STORAGE(): TerminalNode { return this.getToken(MySqlParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tablespaceStorage; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTablespaceStorage) {
			listener.enterTablespaceStorage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTablespaceStorage) {
			listener.exitTablespaceStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTablespaceStorage) {
			return visitor.visitTablespaceStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	public _count: DecimalLiteralContext;
	public _subCount: DecimalLiteralContext;
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BY);
		} else {
			return this.getToken(MySqlParser.BY, i);
		}
	}
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		return this.getRuleContext(0, PartitionFunctionDefinitionContext);
	}
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITION, 0); }
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext | undefined {
		return this.tryGetRuleContext(0, SubpartitionFunctionDefinitionContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITIONS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinitions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinitions) {
			listener.enterPartitionDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinitions) {
			listener.exitPartitionDefinitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinitions) {
			return visitor.visitPartitionDefinitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionFunctionDefinition; }
	public copyFrom(ctx: PartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MySqlParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionHash) {
			listener.enterPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionHash) {
			listener.exitPartitionFunctionHash(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionHash) {
			return visitor.visitPartitionFunctionHash(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
	public _algType: Token;
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionKey) {
			listener.enterPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionKey) {
			listener.exitPartitionFunctionKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionKey) {
			return visitor.visitPartitionFunctionKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
	public RANGE(): TerminalNode { return this.getToken(MySqlParser.RANGE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionRange) {
			listener.enterPartitionFunctionRange(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionRange) {
			listener.exitPartitionFunctionRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionRange) {
			return visitor.visitPartitionFunctionRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
	public LIST(): TerminalNode { return this.getToken(MySqlParser.LIST, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionList) {
			listener.enterPartitionFunctionList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionList) {
			listener.exitPartitionFunctionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionList) {
			return visitor.visitPartitionFunctionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_subpartitionFunctionDefinition; }
	public copyFrom(ctx: SubpartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MySqlParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubPartitionFunctionHash) {
			listener.enterSubPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubPartitionFunctionHash) {
			listener.exitSubPartitionFunctionHash(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubPartitionFunctionHash) {
			return visitor.visitSubPartitionFunctionHash(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
	public _algType: Token;
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubPartitionFunctionKey) {
			listener.enterSubPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubPartitionFunctionKey) {
			listener.exitSubPartitionFunctionKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubPartitionFunctionKey) {
			return visitor.visitSubPartitionFunctionKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinition; }
	public copyFrom(ctx: PartitionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionComparisionContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public LESS(): TerminalNode { return this.getToken(MySqlParser.LESS, 0); }
	public THAN(): TerminalNode { return this.getToken(MySqlParser.THAN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionComparision) {
			listener.enterPartitionComparision(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionComparision) {
			listener.exitPartitionComparision(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionComparision) {
			return visitor.visitPartitionComparision(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionListAtomContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionListAtom) {
			listener.enterPartitionListAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionListAtom) {
			listener.exitPartitionListAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionListAtom) {
			return visitor.visitPartitionListAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionListVectorContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerVector(): PartitionDefinerVectorContext[];
	public partitionDefinerVector(i: number): PartitionDefinerVectorContext;
	public partitionDefinerVector(i?: number): PartitionDefinerVectorContext | PartitionDefinerVectorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerVectorContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerVectorContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionListVector) {
			listener.enterPartitionListVector(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionListVector) {
			listener.exitPartitionListVector(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionListVector) {
			return visitor.visitPartitionListVector(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionSimpleContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionSimple) {
			listener.enterPartitionSimple(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionSimple) {
			listener.exitPartitionSimple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionSimple) {
			return visitor.visitPartitionSimple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinerAtomContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAXVALUE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinerAtom; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinerAtom) {
			listener.enterPartitionDefinerAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinerAtom) {
			listener.exitPartitionDefinerAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinerAtom) {
			return visitor.visitPartitionDefinerAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinerVectorContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinerVector; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinerVector) {
			listener.enterPartitionDefinerVector(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinerVector) {
			listener.exitPartitionDefinerVector(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinerVector) {
			return visitor.visitPartitionDefinerVector(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	public SUBPARTITION(): TerminalNode { return this.getToken(MySqlParser.SUBPARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_subpartitionDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubpartitionDefinition) {
			listener.enterSubpartitionDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubpartitionDefinition) {
			listener.exitSubpartitionDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubpartitionDefinition) {
			return visitor.visitSubpartitionDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionOption; }
	public copyFrom(ctx: PartitionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionOptionEngineContext extends PartitionOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionEngine) {
			listener.enterPartitionOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionEngine) {
			listener.exitPartitionOptionEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionEngine) {
			return visitor.visitPartitionOptionEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionCommentContext extends PartitionOptionContext {
	public _comment: Token;
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionComment) {
			listener.enterPartitionOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionComment) {
			listener.exitPartitionOptionComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionComment) {
			return visitor.visitPartitionOptionComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
	public _dataDirectory: Token;
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionDataDirectory) {
			listener.enterPartitionOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionDataDirectory) {
			listener.exitPartitionOptionDataDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionDataDirectory) {
			return visitor.visitPartitionOptionDataDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
	public _indexDirectory: Token;
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionIndexDirectory) {
			listener.enterPartitionOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionIndexDirectory) {
			listener.exitPartitionOptionIndexDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionIndexDirectory) {
			return visitor.visitPartitionOptionIndexDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionMaxRowsContext extends PartitionOptionContext {
	public _maxRows: DecimalLiteralContext;
	public MAX_ROWS(): TerminalNode { return this.getToken(MySqlParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionMaxRows) {
			listener.enterPartitionOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionMaxRows) {
			listener.exitPartitionOptionMaxRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionMaxRows) {
			return visitor.visitPartitionOptionMaxRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionMinRowsContext extends PartitionOptionContext {
	public _minRows: DecimalLiteralContext;
	public MIN_ROWS(): TerminalNode { return this.getToken(MySqlParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionMinRows) {
			listener.enterPartitionOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionMinRows) {
			listener.exitPartitionOptionMinRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionMinRows) {
			return visitor.visitPartitionOptionMinRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionTablespaceContext extends PartitionOptionContext {
	public _tablespace: UidContext;
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionTablespace) {
			listener.enterPartitionOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionTablespace) {
			listener.exitPartitionOptionTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionTablespace) {
			return visitor.visitPartitionOptionTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionNodeGroupContext extends PartitionOptionContext {
	public _nodegroup: UidContext;
	public NODEGROUP(): TerminalNode { return this.getToken(MySqlParser.NODEGROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionNodeGroup) {
			listener.enterPartitionOptionNodeGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionNodeGroup) {
			listener.exitPartitionOptionNodeGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionNodeGroup) {
			return visitor.visitPartitionOptionNodeGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterDatabase; }
	public copyFrom(ctx: AlterDatabaseContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterSimpleDatabaseContext extends AlterDatabaseContext {
	public _dbFormat: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterSimpleDatabase) {
			listener.enterAlterSimpleDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterSimpleDatabase) {
			listener.exitAlterSimpleDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterSimpleDatabase) {
			return visitor.visitAlterSimpleDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterUpgradeNameContext extends AlterDatabaseContext {
	public _dbFormat: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public UPGRADE(): TerminalNode { return this.getToken(MySqlParser.UPGRADE, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public NAME(): TerminalNode { return this.getToken(MySqlParser.NAME, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUpgradeName) {
			listener.enterAlterUpgradeName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUpgradeName) {
			listener.exitAlterUpgradeName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUpgradeName) {
			return visitor.visitAlterUpgradeName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext | undefined {
		return this.tryGetRuleContext(0, ScheduleExpressionContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DO, 0); }
	public routineBody(): RoutineBodyContext | undefined {
		return this.tryGetRuleContext(0, RoutineBodyContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterEvent) {
			listener.enterAlterEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterEvent) {
			listener.exitAlterEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterEvent) {
			return visitor.visitAlterEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterFunctionContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterFunction) {
			listener.enterAlterFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterFunction) {
			listener.exitAlterFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterFunction) {
			return visitor.visitAlterFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterInstanceContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public INSTANCE(): TerminalNode { return this.getToken(MySqlParser.INSTANCE, 0); }
	public ROTATE(): TerminalNode { return this.getToken(MySqlParser.ROTATE, 0); }
	public INNODB(): TerminalNode { return this.getToken(MySqlParser.INNODB, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterInstance; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterInstance) {
			listener.enterAlterInstance(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterInstance) {
			listener.exitAlterInstance(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterInstance) {
			return visitor.visitAlterInstance(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MySqlParser.UNDOFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterLogfileGroup) {
			listener.enterAlterLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterLogfileGroup) {
			listener.exitAlterLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterLogfileGroup) {
			return visitor.visitAlterLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterProcedureContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterProcedure) {
			listener.enterAlterProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterProcedure) {
			listener.exitAlterProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterProcedure) {
			return visitor.visitAlterProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public OPTIONS(): TerminalNode { return this.getToken(MySqlParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterServer) {
			listener.enterAlterServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterServer) {
			listener.exitAlterServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterServer) {
			return visitor.visitAlterServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	public _intimeAction: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public alterSpecification(): AlterSpecificationContext[];
	public alterSpecification(i: number): AlterSpecificationContext;
	public alterSpecification(i?: number): AlterSpecificationContext | AlterSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterSpecificationContext);
		} else {
			return this.getRuleContext(i, AlterSpecificationContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterTable) {
			listener.enterAlterTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterTable) {
			listener.exitAlterTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterTable) {
			return visitor.visitAlterTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	public _objectAction: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterTablespace; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterTablespace) {
			listener.enterAlterTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterTablespace) {
			listener.exitAlterTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterTablespace) {
			return visitor.visitAlterTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	public _algType: Token;
	public _secContext: Token;
	public _checkOpt: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterView) {
			listener.enterAlterView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterView) {
			listener.exitAlterView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterView) {
			return visitor.visitAlterView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterSpecificationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterSpecification; }
	public copyFrom(ctx: AlterSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByTableOptionContext extends AlterSpecificationContext {
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByTableOption) {
			listener.enterAlterByTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByTableOption) {
			listener.exitAlterByTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByTableOption) {
			return visitor.visitAlterByTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddColumnContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddColumn) {
			listener.enterAlterByAddColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddColumn) {
			listener.exitAlterByAddColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddColumn) {
			return visitor.visitAlterByAddColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddColumnsContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext[];
	public columnDefinition(i: number): ColumnDefinitionContext;
	public columnDefinition(i?: number): ColumnDefinitionContext | ColumnDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnDefinitionContext);
		} else {
			return this.getRuleContext(i, ColumnDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddColumns) {
			listener.enterAlterByAddColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddColumns) {
			listener.exitAlterByAddColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddColumns) {
			return visitor.visitAlterByAddColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddIndexContext extends AlterSpecificationContext {
	public _indexFormat: Token;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddIndex) {
			listener.enterAlterByAddIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddIndex) {
			listener.exitAlterByAddIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddIndex) {
			return visitor.visitAlterByAddIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddPrimaryKey) {
			listener.enterAlterByAddPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddPrimaryKey) {
			listener.exitAlterByAddPrimaryKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddPrimaryKey) {
			return visitor.visitAlterByAddPrimaryKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public _indexFormat: Token;
	public _indexName: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddUniqueKey) {
			listener.enterAlterByAddUniqueKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddUniqueKey) {
			listener.exitAlterByAddUniqueKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddUniqueKey) {
			return visitor.visitAlterByAddUniqueKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
	public _keyType: Token;
	public _indexFormat: Token;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddSpecialIndex) {
			listener.enterAlterByAddSpecialIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddSpecialIndex) {
			listener.exitAlterByAddSpecialIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddSpecialIndex) {
			return visitor.visitAlterByAddSpecialIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddForeignKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public _indexName: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddForeignKey) {
			listener.enterAlterByAddForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddForeignKey) {
			listener.exitAlterByAddForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddForeignKey) {
			return visitor.visitAlterByAddForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
	public _name: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddCheckTableConstraint) {
			listener.enterAlterByAddCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddCheckTableConstraint) {
			listener.exitAlterByAddCheckTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddCheckTableConstraint) {
			return visitor.visitAlterByAddCheckTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterBySetAlgorithmContext extends AlterSpecificationContext {
	public _algType: Token;
	public ALGORITHM(): TerminalNode { return this.getToken(MySqlParser.ALGORITHM, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterBySetAlgorithm) {
			listener.enterAlterBySetAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterBySetAlgorithm) {
			listener.exitAlterBySetAlgorithm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterBySetAlgorithm) {
			return visitor.visitAlterBySetAlgorithm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByChangeDefaultContext extends AlterSpecificationContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByChangeDefault) {
			listener.enterAlterByChangeDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByChangeDefault) {
			listener.exitAlterByChangeDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByChangeDefault) {
			return visitor.visitAlterByChangeDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByChangeColumnContext extends AlterSpecificationContext {
	public _oldColumn: UidContext;
	public _newColumn: UidContext;
	public _afterColumn: UidContext;
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByChangeColumn) {
			listener.enterAlterByChangeColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByChangeColumn) {
			listener.exitAlterByChangeColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByChangeColumn) {
			return visitor.visitAlterByChangeColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRenameColumnContext extends AlterSpecificationContext {
	public _oldColumn: UidContext;
	public _newColumn: UidContext;
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public COLUMN(): TerminalNode { return this.getToken(MySqlParser.COLUMN, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRenameColumn) {
			listener.enterAlterByRenameColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRenameColumn) {
			listener.exitAlterByRenameColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRenameColumn) {
			return visitor.visitAlterByRenameColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByLockContext extends AlterSpecificationContext {
	public _lockType: Token;
	public LOCK(): TerminalNode { return this.getToken(MySqlParser.LOCK, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByLock) {
			listener.enterAlterByLock(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByLock) {
			listener.exitAlterByLock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByLock) {
			return visitor.visitAlterByLock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByModifyColumnContext extends AlterSpecificationContext {
	public MODIFY(): TerminalNode { return this.getToken(MySqlParser.MODIFY, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByModifyColumn) {
			listener.enterAlterByModifyColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByModifyColumn) {
			listener.exitAlterByModifyColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByModifyColumn) {
			return visitor.visitAlterByModifyColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropColumnContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropColumn) {
			listener.enterAlterByDropColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropColumn) {
			listener.exitAlterByDropColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropColumn) {
			return visitor.visitAlterByDropColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropPrimaryKey) {
			listener.enterAlterByDropPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropPrimaryKey) {
			listener.exitAlterByDropPrimaryKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropPrimaryKey) {
			return visitor.visitAlterByDropPrimaryKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropIndexContext extends AlterSpecificationContext {
	public _indexFormat: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropIndex) {
			listener.enterAlterByDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropIndex) {
			listener.exitAlterByDropIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropIndex) {
			return visitor.visitAlterByDropIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropForeignKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropForeignKey) {
			listener.enterAlterByDropForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropForeignKey) {
			listener.exitAlterByDropForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropForeignKey) {
			return visitor.visitAlterByDropForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDisableKeysContext extends AlterSpecificationContext {
	public DISABLE(): TerminalNode { return this.getToken(MySqlParser.DISABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MySqlParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDisableKeys) {
			listener.enterAlterByDisableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDisableKeys) {
			listener.exitAlterByDisableKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDisableKeys) {
			return visitor.visitAlterByDisableKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByEnableKeysContext extends AlterSpecificationContext {
	public ENABLE(): TerminalNode { return this.getToken(MySqlParser.ENABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MySqlParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByEnableKeys) {
			listener.enterAlterByEnableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByEnableKeys) {
			listener.exitAlterByEnableKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByEnableKeys) {
			return visitor.visitAlterByEnableKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRenameContext extends AlterSpecificationContext {
	public _renameFormat: Token;
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public fullId(): FullIdContext | undefined {
		return this.tryGetRuleContext(0, FullIdContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRename) {
			listener.enterAlterByRename(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRename) {
			listener.exitAlterByRename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRename) {
			return visitor.visitAlterByRename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByOrderContext extends AlterSpecificationContext {
	public ORDER(): TerminalNode { return this.getToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByOrder) {
			listener.enterAlterByOrder(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByOrder) {
			listener.exitAlterByOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByOrder) {
			return visitor.visitAlterByOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByConvertCharsetContext extends AlterSpecificationContext {
	public CONVERT(): TerminalNode { return this.getToken(MySqlParser.CONVERT, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public CHARACTER(): TerminalNode { return this.getToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByConvertCharset) {
			listener.enterAlterByConvertCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByConvertCharset) {
			listener.exitAlterByConvertCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByConvertCharset) {
			return visitor.visitAlterByConvertCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDefaultCharsetContext extends AlterSpecificationContext {
	public CHARACTER(): TerminalNode { return this.getToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDefaultCharset) {
			listener.enterAlterByDefaultCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDefaultCharset) {
			listener.exitAlterByDefaultCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDefaultCharset) {
			return visitor.visitAlterByDefaultCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MySqlParser.DISCARD, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDiscardTablespace) {
			listener.enterAlterByDiscardTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDiscardTablespace) {
			listener.exitAlterByDiscardTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDiscardTablespace) {
			return visitor.visitAlterByDiscardTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByImportTablespaceContext extends AlterSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MySqlParser.IMPORT, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByImportTablespace) {
			listener.enterAlterByImportTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByImportTablespace) {
			listener.exitAlterByImportTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByImportTablespace) {
			return visitor.visitAlterByImportTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByForceContext extends AlterSpecificationContext {
	public FORCE(): TerminalNode { return this.getToken(MySqlParser.FORCE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByForce) {
			listener.enterAlterByForce(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByForce) {
			listener.exitAlterByForce(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByForce) {
			return visitor.visitAlterByForce(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByValidateContext extends AlterSpecificationContext {
	public _validationFormat: Token;
	public VALIDATION(): TerminalNode { return this.getToken(MySqlParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByValidate) {
			listener.enterAlterByValidate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByValidate) {
			listener.exitAlterByValidate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByValidate) {
			return visitor.visitAlterByValidate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddPartitionContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddPartition) {
			listener.enterAlterByAddPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddPartition) {
			listener.exitAlterByAddPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddPartition) {
			return visitor.visitAlterByAddPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropPartitionContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropPartition) {
			listener.enterAlterByDropPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropPartition) {
			listener.exitAlterByDropPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropPartition) {
			return visitor.visitAlterByDropPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDiscardPartitionContext extends AlterSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MySqlParser.DISCARD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDiscardPartition) {
			listener.enterAlterByDiscardPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDiscardPartition) {
			listener.exitAlterByDiscardPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDiscardPartition) {
			return visitor.visitAlterByDiscardPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByImportPartitionContext extends AlterSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MySqlParser.IMPORT, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByImportPartition) {
			listener.enterAlterByImportPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByImportPartition) {
			listener.exitAlterByImportPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByImportPartition) {
			return visitor.visitAlterByImportPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByTruncatePartitionContext extends AlterSpecificationContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MySqlParser.TRUNCATE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByTruncatePartition) {
			listener.enterAlterByTruncatePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByTruncatePartition) {
			listener.exitAlterByTruncatePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByTruncatePartition) {
			return visitor.visitAlterByTruncatePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByCoalescePartitionContext extends AlterSpecificationContext {
	public COALESCE(): TerminalNode { return this.getToken(MySqlParser.COALESCE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByCoalescePartition) {
			listener.enterAlterByCoalescePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByCoalescePartition) {
			listener.exitAlterByCoalescePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByCoalescePartition) {
			return visitor.visitAlterByCoalescePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByReorganizePartitionContext extends AlterSpecificationContext {
	public REORGANIZE(): TerminalNode { return this.getToken(MySqlParser.REORGANIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByReorganizePartition) {
			listener.enterAlterByReorganizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByReorganizePartition) {
			listener.exitAlterByReorganizePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByReorganizePartition) {
			return visitor.visitAlterByReorganizePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByExchangePartitionContext extends AlterSpecificationContext {
	public _validationFormat: Token;
	public EXCHANGE(): TerminalNode { return this.getToken(MySqlParser.EXCHANGE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.WITH);
		} else {
			return this.getToken(MySqlParser.WITH, i);
		}
	}
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByExchangePartition) {
			listener.enterAlterByExchangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByExchangePartition) {
			listener.exitAlterByExchangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByExchangePartition) {
			return visitor.visitAlterByExchangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAnalyzePartitiionContext extends AlterSpecificationContext {
	public ANALYZE(): TerminalNode { return this.getToken(MySqlParser.ANALYZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAnalyzePartitiion) {
			listener.enterAlterByAnalyzePartitiion(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAnalyzePartitiion) {
			listener.exitAlterByAnalyzePartitiion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAnalyzePartitiion) {
			return visitor.visitAlterByAnalyzePartitiion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByCheckPartitionContext extends AlterSpecificationContext {
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByCheckPartition) {
			listener.enterAlterByCheckPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByCheckPartition) {
			listener.exitAlterByCheckPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByCheckPartition) {
			return visitor.visitAlterByCheckPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByOptimizePartitionContext extends AlterSpecificationContext {
	public OPTIMIZE(): TerminalNode { return this.getToken(MySqlParser.OPTIMIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByOptimizePartition) {
			listener.enterAlterByOptimizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByOptimizePartition) {
			listener.exitAlterByOptimizePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByOptimizePartition) {
			return visitor.visitAlterByOptimizePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRebuildPartitionContext extends AlterSpecificationContext {
	public REBUILD(): TerminalNode { return this.getToken(MySqlParser.REBUILD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRebuildPartition) {
			listener.enterAlterByRebuildPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRebuildPartition) {
			listener.exitAlterByRebuildPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRebuildPartition) {
			return visitor.visitAlterByRebuildPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRepairPartitionContext extends AlterSpecificationContext {
	public REPAIR(): TerminalNode { return this.getToken(MySqlParser.REPAIR, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRepairPartition) {
			listener.enterAlterByRepairPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRepairPartition) {
			listener.exitAlterByRepairPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRepairPartition) {
			return visitor.visitAlterByRepairPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRemovePartitioningContext extends AlterSpecificationContext {
	public REMOVE(): TerminalNode { return this.getToken(MySqlParser.REMOVE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MySqlParser.PARTITIONING, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRemovePartitioning) {
			listener.enterAlterByRemovePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRemovePartitioning) {
			listener.exitAlterByRemovePartitioning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRemovePartitioning) {
			return visitor.visitAlterByRemovePartitioning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
	public UPGRADE(): TerminalNode { return this.getToken(MySqlParser.UPGRADE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MySqlParser.PARTITIONING, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByUpgradePartitioning) {
			listener.enterAlterByUpgradePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByUpgradePartitioning) {
			listener.exitAlterByUpgradePartitioning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByUpgradePartitioning) {
			return visitor.visitAlterByUpgradePartitioning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public _dbFormat: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropDatabase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropDatabase) {
			listener.enterDropDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropDatabase) {
			listener.exitDropDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropDatabase) {
			return visitor.visitDropDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropEvent) {
			listener.enterDropEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropEvent) {
			listener.exitDropEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropEvent) {
			return visitor.visitDropEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _intimeAction: Token;
	public _algType: Token;
	public _lockType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DEFAULT);
		} else {
			return this.getToken(MySqlParser.DEFAULT, i);
		}
	}
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropIndex; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropIndex) {
			listener.enterDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropIndex) {
			listener.exitDropIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropIndex) {
			return visitor.visitDropIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropLogfileGroup) {
			listener.enterDropLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropLogfileGroup) {
			listener.exitDropLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropLogfileGroup) {
			return visitor.visitDropLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropProcedure) {
			listener.enterDropProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropProcedure) {
			listener.exitDropProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropProcedure) {
			return visitor.visitDropProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropFunction) {
			listener.enterDropFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropFunction) {
			listener.exitDropFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropFunction) {
			return visitor.visitDropFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropServer) {
			listener.enterDropServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropServer) {
			listener.exitDropServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropServer) {
			return visitor.visitDropServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _dropType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTable) {
			listener.enterDropTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTable) {
			listener.exitDropTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTable) {
			return visitor.visitDropTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTablespaceContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTablespace; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTablespace) {
			listener.enterDropTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTablespace) {
			listener.exitDropTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTablespace) {
			return visitor.visitDropTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MySqlParser.TRIGGER, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTrigger; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTrigger) {
			listener.enterDropTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTrigger) {
			listener.exitDropTrigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTrigger) {
			return visitor.visitDropTrigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	public _dropType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropView) {
			listener.enterDropView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropView) {
			listener.exitDropView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropView) {
			return visitor.visitDropView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameTableContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public renameTableClause(): RenameTableClauseContext[];
	public renameTableClause(i: number): RenameTableClauseContext;
	public renameTableClause(i?: number): RenameTableClauseContext | RenameTableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameTableClauseContext);
		} else {
			return this.getRuleContext(i, RenameTableClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameTable) {
			listener.enterRenameTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameTable) {
			listener.exitRenameTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameTable) {
			return visitor.visitRenameTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameTableClauseContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameTableClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameTableClause) {
			listener.enterRenameTableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameTableClause) {
			listener.exitRenameTableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameTableClause) {
			return visitor.visitRenameTableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncateTableContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MySqlParser.TRUNCATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_truncateTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTruncateTable) {
			listener.enterTruncateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTruncateTable) {
			listener.exitTruncateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTruncateTable) {
			return visitor.visitTruncateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(MySqlParser.CALL, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_callStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCallStatement) {
			listener.enterCallStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCallStatement) {
			listener.exitCallStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCallStatement) {
			return visitor.visitCallStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public singleDeleteStatement(): SingleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleDeleteStatementContext);
	}
	public multipleDeleteStatement(): MultipleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleDeleteStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_doStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoStatement) {
			listener.enterDoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoStatement) {
			listener.exitDoStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoStatement) {
			return visitor.visitDoStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	public handlerOpenStatement(): HandlerOpenStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerOpenStatementContext);
	}
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadIndexStatementContext);
	}
	public handlerReadStatement(): HandlerReadStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadStatementContext);
	}
	public handlerCloseStatement(): HandlerCloseStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerCloseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerStatement) {
			listener.enterHandlerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerStatement) {
			listener.exitHandlerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerStatement) {
			return visitor.visitHandlerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _partitions: UidListContext;
	public _columns: UidListContext;
	public _setFirst: UpdatedElementContext;
	public _updatedElement: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public _duplicatedFirst: UpdatedElementContext;
	public _duplicatedElements: UpdatedElementContext[] = [];
	public INSERT(): TerminalNode { return this.getToken(MySqlParser.INSERT, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUPLICATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAYED, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HIGH_PRIORITY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_insertStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInsertStatement) {
			listener.enterInsertStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInsertStatement) {
			listener.exitInsertStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInsertStatement) {
			return visitor.visitInsertStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadDataStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _filename: Token;
	public _violation: Token;
	public _charset: CharsetNameContext;
	public _fieldsFormat: Token;
	public _linesFormat: Token;
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public INFILE(): TerminalNode { return this.getToken(MySqlParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LINES);
		} else {
			return this.getToken(MySqlParser.LINES, i);
		}
	}
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IGNORE);
		} else {
			return this.getToken(MySqlParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROWS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadDataStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadDataStatement) {
			listener.enterLoadDataStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadDataStatement) {
			listener.exitLoadDataStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadDataStatement) {
			return visitor.visitLoadDataStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadXmlStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _filename: Token;
	public _violation: Token;
	public _charset: CharsetNameContext;
	public _tag: Token;
	public _linesFormat: Token;
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public XML(): TerminalNode { return this.getToken(MySqlParser.XML, 0); }
	public INFILE(): TerminalNode { return this.getToken(MySqlParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public ROWS(): TerminalNode[];
	public ROWS(i: number): TerminalNode;
	public ROWS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ROWS);
		} else {
			return this.getToken(MySqlParser.ROWS, i);
		}
	}
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATER_SYMBOL, 0); }
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IGNORE);
		} else {
			return this.getToken(MySqlParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINES, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadXmlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadXmlStatement) {
			listener.enterLoadXmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadXmlStatement) {
			listener.exitLoadXmlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadXmlStatement) {
			return visitor.visitLoadXmlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _partitions: UidListContext;
	public _columns: UidListContext;
	public _setFirst: UpdatedElementContext;
	public _updatedElement: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public REPLACE(): TerminalNode { return this.getToken(MySqlParser.REPLACE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAYED, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replaceStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReplaceStatement) {
			listener.enterReplaceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReplaceStatement) {
			listener.exitReplaceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReplaceStatement) {
			return visitor.visitReplaceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectStatement; }
	public copyFrom(ctx: SelectStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleSelectContext extends SelectStatementContext {
	public querySpecification(): QuerySpecificationContext {
		return this.getRuleContext(0, QuerySpecificationContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleSelect) {
			listener.enterSimpleSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleSelect) {
			listener.exitSimpleSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleSelect) {
			return visitor.visitSimpleSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesisSelectContext extends SelectStatementContext {
	public queryExpression(): QueryExpressionContext {
		return this.getRuleContext(0, QueryExpressionContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterParenthesisSelect) {
			listener.enterParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitParenthesisSelect) {
			listener.exitParenthesisSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitParenthesisSelect) {
			return visitor.visitParenthesisSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnionSelectContext extends SelectStatementContext {
	public _unionType: Token;
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getRuleContext(0, QuerySpecificationNointoContext);
	}
	public unionStatement(): UnionStatementContext[];
	public unionStatement(i: number): UnionStatementContext;
	public unionStatement(i?: number): UnionStatementContext | UnionStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionStatementContext);
		} else {
			return this.getRuleContext(i, UnionStatementContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNION, 0); }
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionSelect) {
			listener.enterUnionSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionSelect) {
			listener.exitUnionSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionSelect) {
			return visitor.visitUnionSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnionParenthesisSelectContext extends SelectStatementContext {
	public _unionType: Token;
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public unionParenthesis(): UnionParenthesisContext[];
	public unionParenthesis(i: number): UnionParenthesisContext;
	public unionParenthesis(i?: number): UnionParenthesisContext | UnionParenthesisContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionParenthesisContext);
		} else {
			return this.getRuleContext(i, UnionParenthesisContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNION, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionParenthesisSelect) {
			listener.enterUnionParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionParenthesisSelect) {
			listener.exitUnionParenthesisSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionParenthesisSelect) {
			return visitor.visitUnionParenthesisSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public singleUpdateStatement(): SingleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleUpdateStatementContext);
	}
	public multipleUpdateStatement(): MultipleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleUpdateStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUpdateStatement) {
			return visitor.visitUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertStatementValueContext extends ParserRuleContext {
	public _insertFormat: Token;
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext;
	public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext | ExpressionsWithDefaultsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionsWithDefaultsContext);
		} else {
			return this.getRuleContext(i, ExpressionsWithDefaultsContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUES, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_insertStatementValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInsertStatementValue) {
			listener.enterInsertStatementValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInsertStatementValue) {
			listener.exitInsertStatementValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInsertStatementValue) {
			return visitor.visitInsertStatementValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdatedElementContext extends ParserRuleContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_updatedElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUpdatedElement) {
			listener.enterUpdatedElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUpdatedElement) {
			listener.exitUpdatedElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUpdatedElement) {
			return visitor.visitUpdatedElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignmentFieldContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_assignmentField; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAssignmentField) {
			listener.enterAssignmentField(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAssignmentField) {
			listener.exitAssignmentField(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAssignmentField) {
			return visitor.visitAssignmentField(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockClauseContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockClause) {
			listener.enterLockClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockClause) {
			listener.exitLockClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockClause) {
			return visitor.visitLockClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleDeleteStatementContext extends ParserRuleContext {
	public _priority: Token;
	public DELETE(): TerminalNode { return this.getToken(MySqlParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_singleDeleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSingleDeleteStatement) {
			listener.enterSingleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSingleDeleteStatement) {
			listener.exitSingleDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSingleDeleteStatement) {
			return visitor.visitSingleDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleDeleteStatementContext extends ParserRuleContext {
	public _priority: Token;
	public DELETE(): TerminalNode { return this.getToken(MySqlParser.DELETE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public tableSources(): TableSourcesContext | undefined {
		return this.tryGetRuleContext(0, TableSourcesContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DOT);
		} else {
			return this.getToken(MySqlParser.DOT, i);
		}
	}
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STAR);
		} else {
			return this.getToken(MySqlParser.STAR, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_multipleDeleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMultipleDeleteStatement) {
			listener.enterMultipleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMultipleDeleteStatement) {
			listener.exitMultipleDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMultipleDeleteStatement) {
			return visitor.visitMultipleDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerOpenStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerOpenStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerOpenStatement) {
			listener.enterHandlerOpenStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerOpenStatement) {
			listener.exitHandlerOpenStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerOpenStatement) {
			return visitor.visitHandlerOpenStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerReadIndexStatementContext extends ParserRuleContext {
	public _index: UidContext;
	public _moveOrder: Token;
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MySqlParser.READ, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public comparisonOperator(): ComparisonOperatorContext | undefined {
		return this.tryGetRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREV, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerReadIndexStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerReadIndexStatement) {
			listener.enterHandlerReadIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerReadIndexStatement) {
			listener.exitHandlerReadIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerReadIndexStatement) {
			return visitor.visitHandlerReadIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerReadStatementContext extends ParserRuleContext {
	public _moveOrder: Token;
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MySqlParser.READ, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerReadStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerReadStatement) {
			listener.enterHandlerReadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerReadStatement) {
			listener.exitHandlerReadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerReadStatement) {
			return visitor.visitHandlerReadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerCloseStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public CLOSE(): TerminalNode { return this.getToken(MySqlParser.CLOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerCloseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerCloseStatement) {
			listener.enterHandlerCloseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerCloseStatement) {
			listener.exitHandlerCloseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerCloseStatement) {
			return visitor.visitHandlerCloseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleUpdateStatementContext extends ParserRuleContext {
	public _priority: Token;
	public UPDATE(): TerminalNode { return this.getToken(MySqlParser.UPDATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_singleUpdateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSingleUpdateStatement) {
			listener.enterSingleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSingleUpdateStatement) {
			listener.exitSingleUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSingleUpdateStatement) {
			return visitor.visitSingleUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleUpdateStatementContext extends ParserRuleContext {
	public _priority: Token;
	public UPDATE(): TerminalNode { return this.getToken(MySqlParser.UPDATE, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_multipleUpdateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMultipleUpdateStatement) {
			listener.enterMultipleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMultipleUpdateStatement) {
			listener.exitMultipleUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMultipleUpdateStatement) {
			return visitor.visitMultipleUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_orderByClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOrderByClause) {
			listener.enterOrderByClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOrderByClause) {
			listener.exitOrderByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOrderByClause) {
			return visitor.visitOrderByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByExpressionContext extends ParserRuleContext {
	public _order: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_orderByExpression; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOrderByExpression) {
			listener.enterOrderByExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOrderByExpression) {
			listener.exitOrderByExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOrderByExpression) {
			return visitor.visitOrderByExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourcesContext extends ParserRuleContext {
	public tableSource(): TableSourceContext[];
	public tableSource(i: number): TableSourceContext;
	public tableSource(i?: number): TableSourceContext | TableSourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableSourceContext);
		} else {
			return this.getRuleContext(i, TableSourceContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSources; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSources) {
			listener.enterTableSources(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSources) {
			listener.exitTableSources(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSources) {
			return visitor.visitTableSources(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSource; }
	public copyFrom(ctx: TableSourceContext): void {
		super.copyFrom(ctx);
	}
}
export class TableSourceBaseContext extends TableSourceContext {
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourceBase) {
			listener.enterTableSourceBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourceBase) {
			listener.exitTableSourceBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourceBase) {
			return visitor.visitTableSourceBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableSourceNestedContext extends TableSourceContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourceNested) {
			listener.enterTableSourceNested(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourceNested) {
			listener.exitTableSourceNested(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourceNested) {
			return visitor.visitTableSourceNested(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceItemContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSourceItem; }
	public copyFrom(ctx: TableSourceItemContext): void {
		super.copyFrom(ctx);
	}
}
export class AtomTableItemContext extends TableSourceItemContext {
	public _alias: UidContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public indexHint(): IndexHintContext[];
	public indexHint(i: number): IndexHintContext;
	public indexHint(i?: number): IndexHintContext | IndexHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexHintContext);
		} else {
			return this.getRuleContext(i, IndexHintContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAtomTableItem) {
			listener.enterAtomTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAtomTableItem) {
			listener.exitAtomTableItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAtomTableItem) {
			return visitor.visitAtomTableItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryTableItemContext extends TableSourceItemContext {
	public _parenthesisSubquery: SelectStatementContext;
	public _alias: UidContext;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryTableItem) {
			listener.enterSubqueryTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryTableItem) {
			listener.exitSubqueryTableItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryTableItem) {
			return visitor.visitSubqueryTableItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableSourcesItemContext extends TableSourceItemContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourcesItem) {
			listener.enterTableSourcesItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourcesItem) {
			listener.exitTableSourcesItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourcesItem) {
			return visitor.visitTableSourcesItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	public _indexHintAction: Token;
	public _keyFormat: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USE, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORCE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public indexHintType(): IndexHintTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexHintTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexHint; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexHint) {
			listener.enterIndexHint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexHint) {
			listener.exitIndexHint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexHint) {
			return visitor.visitIndexHint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JOIN, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexHintType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexHintType) {
			listener.enterIndexHintType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexHintType) {
			listener.exitIndexHintType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexHintType) {
			return visitor.visitIndexHintType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinPartContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_joinPart; }
	public copyFrom(ctx: JoinPartContext): void {
		super.copyFrom(ctx);
	}
}
export class InnerJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INNER, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CROSS, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInnerJoin) {
			listener.enterInnerJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInnerJoin) {
			listener.exitInnerJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInnerJoin) {
			return visitor.visitInnerJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StraightJoinContext extends JoinPartContext {
	public STRAIGHT_JOIN(): TerminalNode { return this.getToken(MySqlParser.STRAIGHT_JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStraightJoin) {
			listener.enterStraightJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStraightJoin) {
			listener.exitStraightJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStraightJoin) {
			return visitor.visitStraightJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OuterJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTER, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOuterJoin) {
			listener.enterOuterJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOuterJoin) {
			listener.exitOuterJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOuterJoin) {
			return visitor.visitOuterJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NaturalJoinContext extends JoinPartContext {
	public NATURAL(): TerminalNode { return this.getToken(MySqlParser.NATURAL, 0); }
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTER, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNaturalJoin) {
			listener.enterNaturalJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNaturalJoin) {
			listener.exitNaturalJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNaturalJoin) {
			return visitor.visitNaturalJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_queryExpression; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryExpression) {
			listener.enterQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryExpression) {
			listener.exitQueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryExpression) {
			return visitor.visitQueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryExpressionNointoContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_queryExpressionNointo; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryExpressionNointo) {
			listener.enterQueryExpressionNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryExpressionNointo) {
			listener.exitQueryExpressionNointo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryExpressionNointo) {
			return visitor.visitQueryExpressionNointo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MySqlParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public selectIntoExpression(): SelectIntoExpressionContext | undefined {
		return this.tryGetRuleContext(0, SelectIntoExpressionContext);
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQuerySpecification) {
			return visitor.visitQuerySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationNointoContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MySqlParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_querySpecificationNointo; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQuerySpecificationNointo) {
			listener.enterQuerySpecificationNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQuerySpecificationNointo) {
			listener.exitQuerySpecificationNointo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQuerySpecificationNointo) {
			return visitor.visitQuerySpecificationNointo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionParenthesisContext extends ParserRuleContext {
	public _unionType: Token;
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unionParenthesis; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionParenthesis) {
			listener.enterUnionParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionParenthesis) {
			listener.exitUnionParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionParenthesis) {
			return visitor.visitUnionParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionStatementContext extends ParserRuleContext {
	public _unionType: Token;
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionStatement) {
			listener.enterUnionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionStatement) {
			listener.exitUnionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionStatement) {
			return visitor.visitUnionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectSpecContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	public DISTINCTROW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCTROW, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HIGH_PRIORITY, 0); }
	public STRAIGHT_JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRAIGHT_JOIN, 0); }
	public SQL_SMALL_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
	public SQL_BIG_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BIG_RESULT, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_NO_CACHE, 0); }
	public SQL_CALC_FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectSpec; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectSpec) {
			listener.enterSelectSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectSpec) {
			listener.exitSelectSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectSpec) {
			return visitor.visitSelectSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectElementsContext extends ParserRuleContext {
	public _star: Token;
	public selectElement(): SelectElementContext[];
	public selectElement(i: number): SelectElementContext;
	public selectElement(i?: number): SelectElementContext | SelectElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectElementContext);
		} else {
			return this.getRuleContext(i, SelectElementContext);
		}
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectElements; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectElements) {
			listener.enterSelectElements(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectElements) {
			listener.exitSelectElements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectElements) {
			return visitor.visitSelectElements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectElement; }
	public copyFrom(ctx: SelectElementContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectStarElementContext extends SelectElementContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectStarElement) {
			listener.enterSelectStarElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectStarElement) {
			listener.exitSelectStarElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectStarElement) {
			return visitor.visitSelectStarElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectColumnElementContext extends SelectElementContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectColumnElement) {
			listener.enterSelectColumnElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectColumnElement) {
			listener.exitSelectColumnElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectColumnElement) {
			return visitor.visitSelectColumnElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectFunctionElementContext extends SelectElementContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectFunctionElement) {
			listener.enterSelectFunctionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectFunctionElement) {
			listener.exitSelectFunctionElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectFunctionElement) {
			return visitor.visitSelectFunctionElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectExpressionElementContext extends SelectElementContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_ASSIGN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectExpressionElement) {
			listener.enterSelectExpressionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectExpressionElement) {
			listener.exitSelectExpressionElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectExpressionElement) {
			return visitor.visitSelectExpressionElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectIntoExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectIntoExpression; }
	public copyFrom(ctx: SelectIntoExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectIntoVariablesContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoVariables) {
			listener.enterSelectIntoVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoVariables) {
			listener.exitSelectIntoVariables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoVariables) {
			return visitor.visitSelectIntoVariables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public DUMPFILE(): TerminalNode { return this.getToken(MySqlParser.DUMPFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoDumpFile) {
			listener.enterSelectIntoDumpFile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoDumpFile) {
			listener.exitSelectIntoDumpFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoDumpFile) {
			return visitor.visitSelectIntoDumpFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectIntoTextFileContext extends SelectIntoExpressionContext {
	public _filename: Token;
	public _charset: CharsetNameContext;
	public _fieldsFormat: Token;
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public OUTFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTFILE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoTextFile) {
			listener.enterSelectIntoTextFile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoTextFile) {
			listener.exitSelectIntoTextFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoTextFile) {
			return visitor.visitSelectIntoTextFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectFieldsIntoContext extends ParserRuleContext {
	public _terminationField: Token;
	public _enclosion: Token;
	public _escaping: Token;
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TERMINATED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCLOSED, 0); }
	public OPTIONALLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIONALLY, 0); }
	public ESCAPED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectFieldsInto; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectFieldsInto) {
			listener.enterSelectFieldsInto(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectFieldsInto) {
			listener.exitSelectFieldsInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectFieldsInto) {
			return visitor.visitSelectFieldsInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectLinesIntoContext extends ParserRuleContext {
	public _starting: Token;
	public _terminationLine: Token;
	public STARTING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTING, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TERMINATED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectLinesInto; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectLinesInto) {
			listener.enterSelectLinesInto(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectLinesInto) {
			listener.exitSelectLinesInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectLinesInto) {
			return visitor.visitSelectLinesInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public _whereExpr: ExpressionContext;
	public _havingExpr: ExpressionContext;
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public groupByItem(): GroupByItemContext[];
	public groupByItem(i: number): GroupByItemContext;
	public groupByItem(i?: number): GroupByItemContext | GroupByItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupByItemContext);
		} else {
			return this.getRuleContext(i, GroupByItemContext);
		}
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HAVING, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fromClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFromClause) {
			listener.enterFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFromClause) {
			listener.exitFromClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFromClause) {
			return visitor.visitFromClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByItemContext extends ParserRuleContext {
	public _order: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_groupByItem; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGroupByItem) {
			listener.enterGroupByItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGroupByItem) {
			listener.exitGroupByItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGroupByItem) {
			return visitor.visitGroupByItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public _offset: DecimalLiteralContext;
	public _limit: DecimalLiteralContext;
	public LIMIT(): TerminalNode { return this.getToken(MySqlParser.LIMIT, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFSET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_limitClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLimitClause) {
			listener.enterLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLimitClause) {
			listener.exitLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLimitClause) {
			return visitor.visitLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartTransactionContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MySqlParser.TRANSACTION, 0); }
	public transactionMode(): TransactionModeContext[];
	public transactionMode(i: number): TransactionModeContext;
	public transactionMode(i?: number): TransactionModeContext | TransactionModeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionModeContext);
		} else {
			return this.getRuleContext(i, TransactionModeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartTransaction) {
			listener.enterStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartTransaction) {
			listener.exitStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartTransaction) {
			return visitor.visitStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MySqlParser.BEGIN, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_beginWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBeginWork) {
			listener.enterBeginWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBeginWork) {
			listener.exitBeginWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBeginWork) {
			return visitor.visitBeginWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommitWorkContext extends ParserRuleContext {
	public _nochain: Token;
	public _norelease: Token;
	public COMMIT(): TerminalNode { return this.getToken(MySqlParser.COMMIT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NO);
		} else {
			return this.getToken(MySqlParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_commitWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCommitWork) {
			listener.enterCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCommitWork) {
			listener.exitCommitWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCommitWork) {
			return visitor.visitCommitWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackWorkContext extends ParserRuleContext {
	public _nochain: Token;
	public _norelease: Token;
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NO);
		} else {
			return this.getToken(MySqlParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_rollbackWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRollbackWork) {
			listener.enterRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRollbackWork) {
			listener.exitRollbackWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRollbackWork) {
			return visitor.visitRollbackWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	public SAVEPOINT(): TerminalNode { return this.getToken(MySqlParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_savepointStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSavepointStatement) {
			listener.enterSavepointStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSavepointStatement) {
			listener.exitSavepointStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSavepointStatement) {
			return visitor.visitSavepointStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SAVEPOINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_rollbackStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRollbackStatement) {
			listener.enterRollbackStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRollbackStatement) {
			listener.exitRollbackStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRollbackStatement) {
			return visitor.visitRollbackStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReleaseStatementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(MySqlParser.RELEASE, 0); }
	public SAVEPOINT(): TerminalNode { return this.getToken(MySqlParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_releaseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReleaseStatement) {
			listener.enterReleaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReleaseStatement) {
			listener.exitReleaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReleaseStatement) {
			return visitor.visitReleaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockTablesContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(MySqlParser.LOCK, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public lockTableElement(): LockTableElementContext[];
	public lockTableElement(i: number): LockTableElementContext;
	public lockTableElement(i?: number): LockTableElementContext | LockTableElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LockTableElementContext);
		} else {
			return this.getRuleContext(i, LockTableElementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockTables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockTables) {
			listener.enterLockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockTables) {
			listener.exitLockTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockTables) {
			return visitor.visitLockTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockTablesContext extends ParserRuleContext {
	public UNLOCK(): TerminalNode { return this.getToken(MySqlParser.UNLOCK, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unlockTables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnlockTables) {
			listener.enterUnlockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnlockTables) {
			listener.exitUnlockTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnlockTables) {
			return visitor.visitUnlockTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetAutocommitStatementContext extends ParserRuleContext {
	public _autocommitValue: Token;
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public AUTOCOMMIT(): TerminalNode { return this.getToken(MySqlParser.AUTOCOMMIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setAutocommitStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetAutocommitStatement) {
			listener.enterSetAutocommitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetAutocommitStatement) {
			listener.exitSetAutocommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetAutocommitStatement) {
			return visitor.visitSetAutocommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetTransactionStatementContext extends ParserRuleContext {
	public _transactionContext: Token;
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MySqlParser.TRANSACTION, 0); }
	public transactionOption(): TransactionOptionContext[];
	public transactionOption(i: number): TransactionOptionContext;
	public transactionOption(i?: number): TransactionOptionContext | TransactionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionOptionContext);
		} else {
			return this.getRuleContext(i, TransactionOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setTransactionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetTransactionStatement) {
			listener.enterSetTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetTransactionStatement) {
			listener.exitSetTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetTransactionStatement) {
			return visitor.visitSetTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSISTENT, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SNAPSHOT, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionMode; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionMode) {
			listener.enterTransactionMode(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionMode) {
			listener.exitTransactionMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionMode) {
			return visitor.visitTransactionMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockTableElementContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public lockAction(): LockActionContext {
		return this.getRuleContext(0, LockActionContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockTableElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockTableElement) {
			listener.enterLockTableElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockTableElement) {
			listener.exitLockTableElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockTableElement) {
			return visitor.visitLockTableElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockActionContext extends ParserRuleContext {
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockAction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockAction) {
			listener.enterLockAction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockAction) {
			listener.exitLockAction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockAction) {
			return visitor.visitLockAction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionOptionContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEVEL, 0); }
	public transactionLevel(): TransactionLevelContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelContext);
	}
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionOption) {
			listener.enterTransactionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionOption) {
			listener.exitTransactionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionOption) {
			return visitor.visitTransactionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionLevelContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPEATABLE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionLevel; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionLevel) {
			listener.enterTransactionLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionLevel) {
			listener.exitTransactionLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionLevel) {
			return visitor.visitTransactionLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public masterOption(): MasterOptionContext[];
	public masterOption(i: number): MasterOptionContext;
	public masterOption(i?: number): MasterOptionContext | MasterOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MasterOptionContext);
		} else {
			return this.getRuleContext(i, MasterOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_changeMaster; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChangeMaster) {
			listener.enterChangeMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChangeMaster) {
			listener.exitChangeMaster(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChangeMaster) {
			return visitor.visitChangeMaster(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChangeReplicationFilterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public REPLICATION(): TerminalNode { return this.getToken(MySqlParser.REPLICATION, 0); }
	public FILTER(): TerminalNode { return this.getToken(MySqlParser.FILTER, 0); }
	public replicationFilter(): ReplicationFilterContext[];
	public replicationFilter(i: number): ReplicationFilterContext;
	public replicationFilter(i?: number): ReplicationFilterContext | ReplicationFilterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplicationFilterContext);
		} else {
			return this.getRuleContext(i, ReplicationFilterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_changeReplicationFilter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChangeReplicationFilter) {
			listener.enterChangeReplicationFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChangeReplicationFilter) {
			listener.exitChangeReplicationFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChangeReplicationFilter) {
			return visitor.visitChangeReplicationFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PurgeBinaryLogsContext extends ParserRuleContext {
	public _purgeFormat: Token;
	public _fileName: Token;
	public _timeValue: Token;
	public PURGE(): TerminalNode { return this.getToken(MySqlParser.PURGE, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEFORE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_purgeBinaryLogs; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPurgeBinaryLogs) {
			listener.enterPurgeBinaryLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPurgeBinaryLogs) {
			listener.exitPurgeBinaryLogs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPurgeBinaryLogs) {
			return visitor.visitPurgeBinaryLogs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetMasterContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetMaster; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetMaster) {
			listener.enterResetMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetMaster) {
			listener.exitResetMaster(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetMaster) {
			return visitor.visitResetMaster(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetSlaveContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetSlave) {
			listener.enterResetSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetSlave) {
			listener.exitResetSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetSlave) {
			return visitor.visitResetSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartSlaveContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNTIL, 0); }
	public untilOption(): UntilOptionContext | undefined {
		return this.tryGetRuleContext(0, UntilOptionContext);
	}
	public connectionOption(): ConnectionOptionContext[];
	public connectionOption(i: number): ConnectionOptionContext;
	public connectionOption(i?: number): ConnectionOptionContext | ConnectionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConnectionOptionContext);
		} else {
			return this.getRuleContext(i, ConnectionOptionContext);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartSlave) {
			listener.enterStartSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartSlave) {
			listener.exitStartSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartSlave) {
			return visitor.visitStartSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopSlaveContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MySqlParser.STOP, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stopSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStopSlave) {
			listener.enterStopSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStopSlave) {
			listener.exitStopSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStopSlave) {
			return visitor.visitStopSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartGroupReplicationContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MySqlParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startGroupReplication; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartGroupReplication) {
			listener.enterStartGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartGroupReplication) {
			listener.exitStartGroupReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartGroupReplication) {
			return visitor.visitStartGroupReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopGroupReplicationContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MySqlParser.STOP, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MySqlParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stopGroupReplication; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStopGroupReplication) {
			listener.enterStopGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStopGroupReplication) {
			listener.exitStopGroupReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStopGroupReplication) {
			return visitor.visitStopGroupReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_masterOption; }
	public copyFrom(ctx: MasterOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class MasterStringOptionContext extends MasterOptionContext {
	public stringMasterOption(): StringMasterOptionContext {
		return this.getRuleContext(0, StringMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterStringOption) {
			listener.enterMasterStringOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterStringOption) {
			listener.exitMasterStringOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterStringOption) {
			return visitor.visitMasterStringOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterDecimalOptionContext extends MasterOptionContext {
	public decimalMasterOption(): DecimalMasterOptionContext {
		return this.getRuleContext(0, DecimalMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterDecimalOption) {
			listener.enterMasterDecimalOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterDecimalOption) {
			listener.exitMasterDecimalOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterDecimalOption) {
			return visitor.visitMasterDecimalOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterBoolOptionContext extends MasterOptionContext {
	public _boolVal: Token;
	public boolMasterOption(): BoolMasterOptionContext {
		return this.getRuleContext(0, BoolMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterBoolOption) {
			listener.enterMasterBoolOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterBoolOption) {
			listener.exitMasterBoolOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterBoolOption) {
			return visitor.visitMasterBoolOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterRealOptionContext extends MasterOptionContext {
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode { return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public REAL_LITERAL(): TerminalNode { return this.getToken(MySqlParser.REAL_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterRealOption) {
			listener.enterMasterRealOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterRealOption) {
			listener.exitMasterRealOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterRealOption) {
			return visitor.visitMasterRealOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterUidListOptionContext extends MasterOptionContext {
	public IGNORE_SERVER_IDS(): TerminalNode { return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterUidListOption) {
			listener.enterMasterUidListOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterUidListOption) {
			listener.exitMasterUidListOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterUidListOption) {
			return visitor.visitMasterUidListOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringMasterOptionContext extends ParserRuleContext {
	public MASTER_BIND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_BIND, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HOST, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_USER, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PASSWORD, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_KEY, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stringMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringMasterOption) {
			listener.enterStringMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringMasterOption) {
			listener.exitStringMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringMasterOption) {
			return visitor.visitStringMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalMasterOptionContext extends ParserRuleContext {
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PORT, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_DELAY, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_POS, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_POS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_decimalMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDecimalMasterOption) {
			listener.enterDecimalMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDecimalMasterOption) {
			listener.exitDecimalMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalMasterOption) {
			return visitor.visitDecimalMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BoolMasterOptionContext extends ParserRuleContext {
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL, 0); }
	public MASTER_SSL_VERIFY_SERVER_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_boolMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBoolMasterOption) {
			listener.enterBoolMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBoolMasterOption) {
			listener.exitBoolMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBoolMasterOption) {
			return visitor.visitBoolMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChannelOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public CHANNEL(): TerminalNode { return this.getToken(MySqlParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_channelOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChannelOption) {
			listener.enterChannelOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChannelOption) {
			listener.exitChannelOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChannelOption) {
			return visitor.visitChannelOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationFilterContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replicationFilter; }
	public copyFrom(ctx: ReplicationFilterContext): void {
		super.copyFrom(ctx);
	}
}
export class DoDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_DO_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoDbReplication) {
			listener.enterDoDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoDbReplication) {
			listener.exitDoDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoDbReplication) {
			return visitor.visitDoDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IgnoreDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIgnoreDbReplication) {
			listener.enterIgnoreDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIgnoreDbReplication) {
			listener.exitIgnoreDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIgnoreDbReplication) {
			return visitor.visitIgnoreDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoTableReplication) {
			listener.enterDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoTableReplication) {
			listener.exitDoTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoTableReplication) {
			return visitor.visitDoTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIgnoreTableReplication) {
			listener.enterIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIgnoreTableReplication) {
			listener.exitIgnoreTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIgnoreTableReplication) {
			return visitor.visitIgnoreTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WildDoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_DO_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWildDoTableReplication) {
			listener.enterWildDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWildDoTableReplication) {
			listener.exitWildDoTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWildDoTableReplication) {
			return visitor.visitWildDoTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWildIgnoreTableReplication) {
			listener.enterWildIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWildIgnoreTableReplication) {
			listener.exitWildIgnoreTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWildIgnoreTableReplication) {
			return visitor.visitWildIgnoreTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RewriteDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_REWRITE_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tablePair(): TablePairContext[];
	public tablePair(i: number): TablePairContext;
	public tablePair(i?: number): TablePairContext | TablePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablePairContext);
		} else {
			return this.getRuleContext(i, TablePairContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRewriteDbReplication) {
			listener.enterRewriteDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRewriteDbReplication) {
			listener.exitRewriteDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRewriteDbReplication) {
			return visitor.visitRewriteDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePairContext extends ParserRuleContext {
	public _firstTable: TableNameContext;
	public _secondTable: TableNameContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tablePair; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTablePair) {
			listener.enterTablePair(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTablePair) {
			listener.exitTablePair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTablePair) {
			return visitor.visitTablePair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ThreadTypeContext extends ParserRuleContext {
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO_THREAD, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_threadType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterThreadType) {
			listener.enterThreadType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitThreadType) {
			listener.exitThreadType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitThreadType) {
			return visitor.visitThreadType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UntilOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_untilOption; }
	public copyFrom(ctx: UntilOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class GtidsUntilOptionContext extends UntilOptionContext {
	public _gtids: Token;
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public gtuidSet(): GtuidSetContext {
		return this.getRuleContext(0, GtuidSetContext);
	}
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGtidsUntilOption) {
			listener.enterGtidsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGtidsUntilOption) {
			listener.exitGtidsUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGtidsUntilOption) {
			return visitor.visitGtidsUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterLogUntilOptionContext extends UntilOptionContext {
	public MASTER_LOG_FILE(): TerminalNode { return this.getToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public MASTER_LOG_POS(): TerminalNode { return this.getToken(MySqlParser.MASTER_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterLogUntilOption) {
			listener.enterMasterLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterLogUntilOption) {
			listener.exitMasterLogUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterLogUntilOption) {
			return visitor.visitMasterLogUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RelayLogUntilOptionContext extends UntilOptionContext {
	public RELAY_LOG_FILE(): TerminalNode { return this.getToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RELAY_LOG_POS(): TerminalNode { return this.getToken(MySqlParser.RELAY_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRelayLogUntilOption) {
			listener.enterRelayLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRelayLogUntilOption) {
			listener.exitRelayLogUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRelayLogUntilOption) {
			return visitor.visitRelayLogUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SqlGapsUntilOptionContext extends UntilOptionContext {
	public SQL_AFTER_MTS_GAPS(): TerminalNode { return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSqlGapsUntilOption) {
			listener.enterSqlGapsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSqlGapsUntilOption) {
			listener.exitSqlGapsUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSqlGapsUntilOption) {
			return visitor.visitSqlGapsUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConnectionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_connectionOption; }
	public copyFrom(ctx: ConnectionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class UserConnectionOptionContext extends ConnectionOptionContext {
	public _conOptUser: Token;
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserConnectionOption) {
			listener.enterUserConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserConnectionOption) {
			listener.exitUserConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserConnectionOption) {
			return visitor.visitUserConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PasswordConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPassword: Token;
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordConnectionOption) {
			listener.enterPasswordConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordConnectionOption) {
			listener.exitPasswordConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordConnectionOption) {
			return visitor.visitPasswordConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
	public _conOptDefAuth: Token;
	public DEFAULT_AUTH(): TerminalNode { return this.getToken(MySqlParser.DEFAULT_AUTH, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultAuthConnectionOption) {
			listener.enterDefaultAuthConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultAuthConnectionOption) {
			listener.exitDefaultAuthConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultAuthConnectionOption) {
			return visitor.visitDefaultAuthConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PluginDirConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPluginDir: Token;
	public PLUGIN_DIR(): TerminalNode { return this.getToken(MySqlParser.PLUGIN_DIR, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPluginDirConnectionOption) {
			listener.enterPluginDirConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPluginDirConnectionOption) {
			listener.exitPluginDirConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPluginDirConnectionOption) {
			return visitor.visitPluginDirConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GtuidSetContext extends ParserRuleContext {
	public uuidSet(): UuidSetContext[];
	public uuidSet(i: number): UuidSetContext;
	public uuidSet(i?: number): UuidSetContext | UuidSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UuidSetContext);
		} else {
			return this.getRuleContext(i, UuidSetContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_gtuidSet; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGtuidSet) {
			listener.enterGtuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGtuidSet) {
			listener.exitGtuidSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGtuidSet) {
			return visitor.visitGtuidSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaStartTransactionContext extends ParserRuleContext {
	public _xaStart: Token;
	public _xaAction: Token;
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public START(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEGIN, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JOIN, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESUME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaStartTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaStartTransaction) {
			listener.enterXaStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaStartTransaction) {
			listener.exitXaStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaStartTransaction) {
			return visitor.visitXaStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaEndTransactionContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUSPEND, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIGRATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaEndTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaEndTransaction) {
			listener.enterXaEndTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaEndTransaction) {
			listener.exitXaEndTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaEndTransaction) {
			return visitor.visitXaEndTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaPrepareStatementContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaPrepareStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaPrepareStatement) {
			listener.enterXaPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaPrepareStatement) {
			listener.exitXaPrepareStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaPrepareStatement) {
			return visitor.visitXaPrepareStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaCommitWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public COMMIT(): TerminalNode { return this.getToken(MySqlParser.COMMIT, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PHASE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaCommitWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaCommitWork) {
			listener.enterXaCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaCommitWork) {
			listener.exitXaCommitWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaCommitWork) {
			return visitor.visitXaCommitWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaRollbackWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaRollbackWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaRollbackWork) {
			listener.enterXaRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaRollbackWork) {
			listener.exitXaRollbackWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaRollbackWork) {
			return visitor.visitXaRollbackWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaRecoverWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public RECOVER(): TerminalNode { return this.getToken(MySqlParser.RECOVER, 0); }
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT, 0); }
	public xid(): XidContext | undefined {
		return this.tryGetRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaRecoverWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaRecoverWork) {
			listener.enterXaRecoverWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaRecoverWork) {
			listener.exitXaRecoverWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaRecoverWork) {
			return visitor.visitXaRecoverWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrepareStatementContext extends ParserRuleContext {
	public _query: Token;
	public _variable: Token;
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_prepareStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrepareStatement) {
			listener.enterPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrepareStatement) {
			listener.exitPrepareStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrepareStatement) {
			return visitor.visitPrepareStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(MySqlParser.EXECUTE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public userVariables(): UserVariablesContext | undefined {
		return this.tryGetRuleContext(0, UserVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_executeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExecuteStatement) {
			listener.enterExecuteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExecuteStatement) {
			listener.exitExecuteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExecuteStatement) {
			return visitor.visitExecuteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeallocatePrepareContext extends ParserRuleContext {
	public _dropFormat: Token;
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEALLOCATE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_deallocatePrepare; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeallocatePrepare) {
			listener.enterDeallocatePrepare(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeallocatePrepare) {
			listener.exitDeallocatePrepare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeallocatePrepare) {
			return visitor.visitDeallocatePrepare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineBodyContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_routineBody; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineBody) {
			listener.enterRoutineBody(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineBody) {
			listener.exitRoutineBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineBody) {
			return visitor.visitRoutineBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockStatementContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MySqlParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public declareVariable(): DeclareVariableContext[];
	public declareVariable(i: number): DeclareVariableContext;
	public declareVariable(i?: number): DeclareVariableContext | DeclareVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareVariableContext);
		} else {
			return this.getRuleContext(i, DeclareVariableContext);
		}
	}
	public declareCondition(): DeclareConditionContext[];
	public declareCondition(i: number): DeclareConditionContext;
	public declareCondition(i?: number): DeclareConditionContext | DeclareConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareConditionContext);
		} else {
			return this.getRuleContext(i, DeclareConditionContext);
		}
	}
	public declareCursor(): DeclareCursorContext[];
	public declareCursor(i: number): DeclareCursorContext;
	public declareCursor(i?: number): DeclareCursorContext | DeclareCursorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareCursorContext);
		} else {
			return this.getRuleContext(i, DeclareCursorContext);
		}
	}
	public declareHandler(): DeclareHandlerContext[];
	public declareHandler(i: number): DeclareHandlerContext;
	public declareHandler(i?: number): DeclareHandlerContext | DeclareHandlerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareHandlerContext);
		} else {
			return this.getRuleContext(i, DeclareHandlerContext);
		}
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_blockStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBlockStatement) {
			listener.enterBlockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBlockStatement) {
			listener.exitBlockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBlockStatement) {
			return visitor.visitBlockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.CASE);
		} else {
			return this.getToken(MySqlParser.CASE, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public caseAlternative(): CaseAlternativeContext[];
	public caseAlternative(i: number): CaseAlternativeContext;
	public caseAlternative(i?: number): CaseAlternativeContext | CaseAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseStatement) {
			listener.enterCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseStatement) {
			listener.exitCaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseStatement) {
			return visitor.visitCaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public _procedureSqlStatement: ProcedureSqlStatementContext;
	public _thenStatements: ProcedureSqlStatementContext[] = [];
	public _elseStatements: ProcedureSqlStatementContext[] = [];
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IF);
		} else {
			return this.getToken(MySqlParser.IF, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public elifAlternative(): ElifAlternativeContext[];
	public elifAlternative(i: number): ElifAlternativeContext;
	public elifAlternative(i?: number): ElifAlternativeContext | ElifAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ElifAlternativeContext);
		} else {
			return this.getRuleContext(i, ElifAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfStatement) {
			return visitor.visitIfStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	public ITERATE(): TerminalNode { return this.getToken(MySqlParser.ITERATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_iterateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIterateStatement) {
			listener.enterIterateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIterateStatement) {
			listener.exitIterateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIterateStatement) {
			return visitor.visitIterateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	public LEAVE(): TerminalNode { return this.getToken(MySqlParser.LEAVE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_leaveStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLeaveStatement) {
			listener.enterLeaveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLeaveStatement) {
			listener.exitLeaveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLeaveStatement) {
			return visitor.visitLeaveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoopStatementContext extends ParserRuleContext {
	public LOOP(): TerminalNode[];
	public LOOP(i: number): TerminalNode;
	public LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOOP);
		} else {
			return this.getToken(MySqlParser.LOOP, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loopStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoopStatement) {
			listener.enterLoopStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoopStatement) {
			listener.exitLoopStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoopStatement) {
			return visitor.visitLoopStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RepeatStatementContext extends ParserRuleContext {
	public REPEAT(): TerminalNode[];
	public REPEAT(i: number): TerminalNode;
	public REPEAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.REPEAT);
		} else {
			return this.getToken(MySqlParser.REPEAT, i);
		}
	}
	public UNTIL(): TerminalNode { return this.getToken(MySqlParser.UNTIL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_repeatStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRepeatStatement) {
			listener.enterRepeatStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRepeatStatement) {
			listener.exitRepeatStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRepeatStatement) {
			return visitor.visitRepeatStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(MySqlParser.RETURN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReturnStatement) {
			return visitor.visitReturnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhileStatementContext extends ParserRuleContext {
	public WHILE(): TerminalNode[];
	public WHILE(i: number): TerminalNode;
	public WHILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.WHILE);
		} else {
			return this.getToken(MySqlParser.WHILE, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_whileStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWhileStatement) {
			listener.enterWhileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWhileStatement) {
			listener.exitWhileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWhileStatement) {
			return visitor.visitWhileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CursorStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_cursorStatement; }
	public copyFrom(ctx: CursorStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class CloseCursorContext extends CursorStatementContext {
	public CLOSE(): TerminalNode { return this.getToken(MySqlParser.CLOSE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCloseCursor) {
			listener.enterCloseCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCloseCursor) {
			listener.exitCloseCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCloseCursor) {
			return visitor.visitCloseCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FetchCursorContext extends CursorStatementContext {
	public FETCH(): TerminalNode { return this.getToken(MySqlParser.FETCH, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFetchCursor) {
			listener.enterFetchCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFetchCursor) {
			listener.exitFetchCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFetchCursor) {
			return visitor.visitFetchCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OpenCursorContext extends CursorStatementContext {
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOpenCursor) {
			listener.enterOpenCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOpenCursor) {
			listener.exitOpenCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOpenCursor) {
			return visitor.visitOpenCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareVariableContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareVariable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareVariable) {
			listener.enterDeclareVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareVariable) {
			listener.exitDeclareVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareVariable) {
			return visitor.visitDeclareVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareConditionContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CONDITION(): TerminalNode { return this.getToken(MySqlParser.CONDITION, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareCondition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareCondition) {
			listener.enterDeclareCondition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareCondition) {
			listener.exitDeclareCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareCondition) {
			return visitor.visitDeclareCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareCursorContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CURSOR(): TerminalNode { return this.getToken(MySqlParser.CURSOR, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareCursor; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareCursor) {
			listener.enterDeclareCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareCursor) {
			listener.exitDeclareCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareCursor) {
			return visitor.visitDeclareCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareHandlerContext extends ParserRuleContext {
	public _handlerAction: Token;
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public handlerConditionValue(): HandlerConditionValueContext[];
	public handlerConditionValue(i: number): HandlerConditionValueContext;
	public handlerConditionValue(i?: number): HandlerConditionValueContext | HandlerConditionValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HandlerConditionValueContext);
		} else {
			return this.getRuleContext(i, HandlerConditionValueContext);
		}
	}
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTINUE, 0); }
	public EXIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXIT, 0); }
	public UNDO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareHandler; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareHandler) {
			listener.enterDeclareHandler(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareHandler) {
			listener.exitDeclareHandler(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareHandler) {
			return visitor.visitDeclareHandler(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerConditionValueContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerConditionValue; }
	public copyFrom(ctx: HandlerConditionValueContext): void {
		super.copyFrom(ctx);
	}
}
export class HandlerConditionCodeContext extends HandlerConditionValueContext {
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionCode) {
			listener.enterHandlerConditionCode(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionCode) {
			listener.exitHandlerConditionCode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionCode) {
			return visitor.visitHandlerConditionCode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionStateContext extends HandlerConditionValueContext {
	public SQLSTATE(): TerminalNode { return this.getToken(MySqlParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionState) {
			listener.enterHandlerConditionState(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionState) {
			listener.exitHandlerConditionState(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionState) {
			return visitor.visitHandlerConditionState(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionNameContext extends HandlerConditionValueContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionName) {
			listener.enterHandlerConditionName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionName) {
			listener.exitHandlerConditionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionName) {
			return visitor.visitHandlerConditionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionWarningContext extends HandlerConditionValueContext {
	public SQLWARNING(): TerminalNode { return this.getToken(MySqlParser.SQLWARNING, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionWarning) {
			listener.enterHandlerConditionWarning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionWarning) {
			listener.exitHandlerConditionWarning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionWarning) {
			return visitor.visitHandlerConditionWarning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
	public NOT(): TerminalNode { return this.getToken(MySqlParser.NOT, 0); }
	public FOUND(): TerminalNode { return this.getToken(MySqlParser.FOUND, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionNotfound) {
			listener.enterHandlerConditionNotfound(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionNotfound) {
			listener.exitHandlerConditionNotfound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionNotfound) {
			return visitor.visitHandlerConditionNotfound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionExceptionContext extends HandlerConditionValueContext {
	public SQLEXCEPTION(): TerminalNode { return this.getToken(MySqlParser.SQLEXCEPTION, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionException) {
			listener.enterHandlerConditionException(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionException) {
			listener.exitHandlerConditionException(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionException) {
			return visitor.visitHandlerConditionException(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureSqlStatementContext extends ParserRuleContext {
	public compoundStatement(): CompoundStatementContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_procedureSqlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterProcedureSqlStatement) {
			listener.enterProcedureSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitProcedureSqlStatement) {
			listener.exitProcedureSqlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitProcedureSqlStatement) {
			return visitor.visitProcedureSqlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseAlternativeContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(MySqlParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseAlternative) {
			listener.enterCaseAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseAlternative) {
			listener.exitCaseAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseAlternative) {
			return visitor.visitCaseAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ElifAlternativeContext extends ParserRuleContext {
	public ELSEIF(): TerminalNode { return this.getToken(MySqlParser.ELSEIF, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_elifAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterElifAlternative) {
			listener.enterElifAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitElifAlternative) {
			listener.exitElifAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitElifAlternative) {
			return visitor.visitElifAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterUser; }
	public copyFrom(ctx: AlterUserContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterUserMysqlV56Context extends AlterUserContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userSpecification(): UserSpecificationContext[];
	public userSpecification(i: number): UserSpecificationContext;
	public userSpecification(i?: number): UserSpecificationContext | UserSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserSpecificationContext);
		} else {
			return this.getRuleContext(i, UserSpecificationContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUserMysqlV56) {
			listener.enterAlterUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUserMysqlV56) {
			listener.exitAlterUserMysqlV56(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUserMysqlV56) {
			return visitor.visitAlterUserMysqlV56(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterUserMysqlV57Context extends AlterUserContext {
	public _tlsNone: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUserMysqlV57) {
			listener.enterAlterUserMysqlV57(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUserMysqlV57) {
			listener.exitAlterUserMysqlV57(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUserMysqlV57) {
			return visitor.visitAlterUserMysqlV57(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createUser; }
	public copyFrom(ctx: CreateUserContext): void {
		super.copyFrom(ctx);
	}
}
export class CreateUserMysqlV56Context extends CreateUserContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUserMysqlV56) {
			listener.enterCreateUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUserMysqlV56) {
			listener.exitCreateUserMysqlV56(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUserMysqlV56) {
			return visitor.visitCreateUserMysqlV56(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateUserMysqlV57Context extends CreateUserContext {
	public _tlsNone: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUserMysqlV57) {
			listener.enterCreateUserMysqlV57(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUserMysqlV57) {
			listener.exitCreateUserMysqlV57(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUserMysqlV57) {
			return visitor.visitCreateUserMysqlV57(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropUser; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropUser) {
			listener.enterDropUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropUser) {
			listener.exitDropUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropUser) {
			return visitor.visitDropUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantStatementContext extends ParserRuleContext {
	public _privilegeObject: Token;
	public _tlsNone: Token;
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GRANT);
		} else {
			return this.getToken(MySqlParser.GRANT, i);
		}
	}
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getRuleContext(0, PrivilegeLevelContext);
	}
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public OPTION(): TerminalNode[];
	public OPTION(i: number): TerminalNode;
	public OPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.OPTION);
		} else {
			return this.getToken(MySqlParser.OPTION, i);
		}
	}
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_grantStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGrantStatement) {
			listener.enterGrantStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGrantStatement) {
			listener.exitGrantStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGrantStatement) {
			return visitor.visitGrantStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantProxyContext extends ParserRuleContext {
	public _fromFirst: UserNameContext;
	public _toFirst: UserNameContext;
	public _userName: UserNameContext;
	public _toOther: UserNameContext[] = [];
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GRANT);
		} else {
			return this.getToken(MySqlParser.GRANT, i);
		}
	}
	public PROXY(): TerminalNode { return this.getToken(MySqlParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_grantProxy; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGrantProxy) {
			listener.enterGrantProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGrantProxy) {
			listener.exitGrantProxy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGrantProxy) {
			return visitor.visitGrantProxy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public renameUserClause(): RenameUserClauseContext[];
	public renameUserClause(i: number): RenameUserClauseContext;
	public renameUserClause(i?: number): RenameUserClauseContext | RenameUserClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameUserClauseContext);
		} else {
			return this.getRuleContext(i, RenameUserClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameUser; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameUser) {
			listener.enterRenameUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameUser) {
			listener.exitRenameUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameUser) {
			return visitor.visitRenameUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_revokeStatement; }
	public copyFrom(ctx: RevokeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DetailRevokeContext extends RevokeStatementContext {
	public _privilegeObject: Token;
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getRuleContext(0, PrivilegeLevelContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDetailRevoke) {
			listener.enterDetailRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDetailRevoke) {
			listener.exitDetailRevoke(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDetailRevoke) {
			return visitor.visitDetailRevoke(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShortRevokeContext extends RevokeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public ALL(): TerminalNode { return this.getToken(MySqlParser.ALL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public GRANT(): TerminalNode { return this.getToken(MySqlParser.GRANT, 0); }
	public OPTION(): TerminalNode { return this.getToken(MySqlParser.OPTION, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShortRevoke) {
			listener.enterShortRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShortRevoke) {
			listener.exitShortRevoke(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShortRevoke) {
			return visitor.visitShortRevoke(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeProxyContext extends ParserRuleContext {
	public _onUser: UserNameContext;
	public _fromFirst: UserNameContext;
	public _userName: UserNameContext;
	public _fromOther: UserNameContext[] = [];
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public PROXY(): TerminalNode { return this.getToken(MySqlParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_revokeProxy; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRevokeProxy) {
			listener.enterRevokeProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRevokeProxy) {
			listener.exitRevokeProxy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeProxy) {
			return visitor.visitRevokeProxy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetPasswordStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public passwordFunctionClause(): PasswordFunctionClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordFunctionClauseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setPasswordStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetPasswordStatement) {
			listener.enterSetPasswordStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetPasswordStatement) {
			listener.exitSetPasswordStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetPasswordStatement) {
			return visitor.visitSetPasswordStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserSpecificationContext extends ParserRuleContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public userPasswordOption(): UserPasswordOptionContext {
		return this.getRuleContext(0, UserPasswordOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userSpecification; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserSpecification) {
			listener.enterUserSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserSpecification) {
			listener.exitUserSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserSpecification) {
			return visitor.visitUserSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserAuthOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userAuthOption; }
	public copyFrom(ctx: UserAuthOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PasswordAuthOptionContext extends UserAuthOptionContext {
	public _hashed: Token;
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordAuthOption) {
			listener.enterPasswordAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordAuthOption) {
			listener.exitPasswordAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordAuthOption) {
			return visitor.visitPasswordAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public authPlugin(): AuthPluginContext | undefined {
		return this.tryGetRuleContext(0, AuthPluginContext);
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringAuthOption) {
			listener.enterStringAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringAuthOption) {
			listener.exitStringAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringAuthOption) {
			return visitor.visitStringAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HashAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public WITH(): TerminalNode { return this.getToken(MySqlParser.WITH, 0); }
	public authPlugin(): AuthPluginContext {
		return this.getRuleContext(0, AuthPluginContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHashAuthOption) {
			listener.enterHashAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHashAuthOption) {
			listener.exitHashAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHashAuthOption) {
			return visitor.visitHashAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleAuthOption) {
			listener.enterSimpleAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleAuthOption) {
			listener.exitSimpleAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleAuthOption) {
			return visitor.visitSimpleAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TlsOptionContext extends ParserRuleContext {
	public SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SSL, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X509, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CIPHER, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSUER, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tlsOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTlsOption) {
			listener.enterTlsOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTlsOption) {
			listener.exitTlsOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTlsOption) {
			return visitor.visitTlsOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserResourceOptionContext extends ParserRuleContext {
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userResourceOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserResourceOption) {
			listener.enterUserResourceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserResourceOption) {
			listener.exitUserResourceOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserResourceOption) {
			return visitor.visitUserResourceOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserPasswordOptionContext extends ParserRuleContext {
	public _expireType: Token;
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EXPIRE(): TerminalNode { return this.getToken(MySqlParser.EXPIRE, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEVER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERVAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userPasswordOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserPasswordOption) {
			listener.enterUserPasswordOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserPasswordOption) {
			listener.exitUserPasswordOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserPasswordOption) {
			return visitor.visitUserPasswordOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserLockOptionContext extends ParserRuleContext {
	public _lockType: Token;
	public ACCOUNT(): TerminalNode { return this.getToken(MySqlParser.ACCOUNT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public UNLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNLOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userLockOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserLockOption) {
			listener.enterUserLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserLockOption) {
			listener.exitUserLockOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserLockOption) {
			return visitor.visitUserLockOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivelegeClauseContext extends ParserRuleContext {
	public privilege(): PrivilegeContext {
		return this.getRuleContext(0, PrivilegeContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privelegeClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivelegeClause) {
			listener.enterPrivelegeClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivelegeClause) {
			listener.exitPrivelegeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivelegeClause) {
			return visitor.visitPrivelegeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALTER, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUTINE, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLESPACE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GRANT, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESS, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROXY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REFERENCES, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELOAD, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATION, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLIENT, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SELECT, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHOW, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASES, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUPER, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGER, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilege; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilege) {
			return visitor.visitPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeLevelContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilegeLevel; }
	public copyFrom(ctx: PrivilegeLevelContext): void {
		super.copyFrom(ctx);
	}
}
export class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCurrentSchemaPriviLevel) {
			listener.enterCurrentSchemaPriviLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCurrentSchemaPriviLevel) {
			listener.exitCurrentSchemaPriviLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentSchemaPriviLevel) {
			return visitor.visitCurrentSchemaPriviLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GlobalPrivLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STAR);
		} else {
			return this.getToken(MySqlParser.STAR, i);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGlobalPrivLevel) {
			listener.enterGlobalPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGlobalPrivLevel) {
			listener.exitGlobalPrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGlobalPrivLevel) {
			return visitor.visitGlobalPrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteSchemaPrivLevel) {
			listener.enterDefiniteSchemaPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteSchemaPrivLevel) {
			listener.exitDefiniteSchemaPrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteSchemaPrivLevel) {
			return visitor.visitDefiniteSchemaPrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteFullTablePrivLevel) {
			listener.enterDefiniteFullTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteFullTablePrivLevel) {
			listener.exitDefiniteFullTablePrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteFullTablePrivLevel) {
			return visitor.visitDefiniteFullTablePrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteTablePrivLevel) {
			listener.enterDefiniteTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteTablePrivLevel) {
			listener.exitDefiniteTablePrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteTablePrivLevel) {
			return visitor.visitDefiniteTablePrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameUserClauseContext extends ParserRuleContext {
	public _fromFirst: UserNameContext;
	public _toFirst: UserNameContext;
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameUserClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameUserClause) {
			listener.enterRenameUserClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameUserClause) {
			listener.exitRenameUserClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameUserClause) {
			return visitor.visitRenameUserClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public ANALYZE(): TerminalNode { return this.getToken(MySqlParser.ANALYZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_analyzeTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAnalyzeTable) {
			listener.enterAnalyzeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAnalyzeTable) {
			listener.exitAnalyzeTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeTable) {
			return visitor.visitAnalyzeTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckTableContext extends ParserRuleContext {
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public checkTableOption(): CheckTableOptionContext[];
	public checkTableOption(i: number): CheckTableOptionContext;
	public checkTableOption(i?: number): CheckTableOptionContext | CheckTableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CheckTableOptionContext);
		} else {
			return this.getRuleContext(i, CheckTableOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checkTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTable) {
			listener.enterCheckTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTable) {
			listener.exitCheckTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTable) {
			return visitor.visitCheckTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChecksumTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public CHECKSUM(): TerminalNode { return this.getToken(MySqlParser.CHECKSUM, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checksumTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChecksumTable) {
			listener.enterChecksumTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChecksumTable) {
			listener.exitChecksumTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChecksumTable) {
			return visitor.visitChecksumTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptimizeTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public OPTIMIZE(): TerminalNode { return this.getToken(MySqlParser.OPTIMIZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_optimizeTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOptimizeTable) {
			listener.enterOptimizeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOptimizeTable) {
			listener.exitOptimizeTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOptimizeTable) {
			return visitor.visitOptimizeTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RepairTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public REPAIR(): TerminalNode { return this.getToken(MySqlParser.REPAIR, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public USE_FRM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USE_FRM, 0); }
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_repairTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRepairTable) {
			listener.enterRepairTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRepairTable) {
			listener.exitRepairTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRepairTable) {
			return visitor.visitRepairTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckTableOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPGRADE, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAST, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUM, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checkTableOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTableOption) {
			listener.enterCheckTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTableOption) {
			listener.exitCheckTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTableOption) {
			return visitor.visitCheckTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUdfunctionContext extends ParserRuleContext {
	public _returnType: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public RETURNS(): TerminalNode { return this.getToken(MySqlParser.RETURNS, 0); }
	public SONAME(): TerminalNode { return this.getToken(MySqlParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AGGREGATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createUdfunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUdfunction) {
			listener.enterCreateUdfunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUdfunction) {
			listener.exitCreateUdfunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUdfunction) {
			return visitor.visitCreateUdfunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallPluginContext extends ParserRuleContext {
	public INSTALL(): TerminalNode { return this.getToken(MySqlParser.INSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MySqlParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SONAME(): TerminalNode { return this.getToken(MySqlParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_installPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInstallPlugin) {
			listener.enterInstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInstallPlugin) {
			listener.exitInstallPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInstallPlugin) {
			return visitor.visitInstallPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UninstallPluginContext extends ParserRuleContext {
	public UNINSTALL(): TerminalNode { return this.getToken(MySqlParser.UNINSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MySqlParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uninstallPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUninstallPlugin) {
			listener.enterUninstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUninstallPlugin) {
			listener.exitUninstallPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUninstallPlugin) {
			return visitor.visitUninstallPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setStatement; }
	public copyFrom(ctx: SetStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SetVariableContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public variableClause(): VariableClauseContext[];
	public variableClause(i: number): VariableClauseContext;
	public variableClause(i?: number): VariableClauseContext | VariableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableClauseContext);
		} else {
			return this.getRuleContext(i, VariableClauseContext);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetVariable) {
			listener.enterSetVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetVariable) {
			listener.exitSetVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetVariable) {
			return visitor.visitSetVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetCharsetContext extends SetStatementContext {
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetCharset) {
			listener.enterSetCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetCharset) {
			listener.exitSetCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetCharset) {
			return visitor.visitSetCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetNamesContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public NAMES(): TerminalNode { return this.getToken(MySqlParser.NAMES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetNames) {
			listener.enterSetNames(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetNames) {
			listener.exitSetNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetNames) {
			return visitor.visitSetNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetPasswordContext extends SetStatementContext {
	public setPasswordStatement(): SetPasswordStatementContext {
		return this.getRuleContext(0, SetPasswordStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetPassword) {
			listener.enterSetPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetPassword) {
			listener.exitSetPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetPassword) {
			return visitor.visitSetPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetTransactionContext extends SetStatementContext {
	public setTransactionStatement(): SetTransactionStatementContext {
		return this.getRuleContext(0, SetTransactionStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetTransaction) {
			listener.enterSetTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetTransaction) {
			listener.exitSetTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetTransaction) {
			return visitor.visitSetTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetAutocommitContext extends SetStatementContext {
	public setAutocommitStatement(): SetAutocommitStatementContext {
		return this.getRuleContext(0, SetAutocommitStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetAutocommit) {
			listener.enterSetAutocommit(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetAutocommit) {
			listener.exitSetAutocommit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetAutocommit) {
			return visitor.visitSetAutocommit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showStatement; }
	public copyFrom(ctx: ShowStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ShowMasterLogsContext extends ShowStatementContext {
	public _logFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowMasterLogs) {
			listener.enterShowMasterLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowMasterLogs) {
			listener.exitShowMasterLogs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowMasterLogs) {
			return visitor.visitShowMasterLogs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowLogEventsContext extends ShowStatementContext {
	public _logFormat: Token;
	public _filename: Token;
	public _fromPosition: DecimalLiteralContext;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public EVENTS(): TerminalNode { return this.getToken(MySqlParser.EVENTS, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINLOG, 0); }
	public RELAYLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAYLOG, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowLogEvents) {
			listener.enterShowLogEvents(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowLogEvents) {
			listener.exitShowLogEvents(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowLogEvents) {
			return visitor.visitShowLogEvents(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowObjectFilterContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showCommonEntity(): ShowCommonEntityContext {
		return this.getRuleContext(0, ShowCommonEntityContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowObjectFilter) {
			listener.enterShowObjectFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowObjectFilter) {
			listener.exitShowObjectFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowObjectFilter) {
			return visitor.visitShowObjectFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowColumnsContext extends ShowStatementContext {
	public _columnsFormat: Token;
	public _tableFormat: Token;
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.FROM);
		} else {
			return this.getToken(MySqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IN);
		} else {
			return this.getToken(MySqlParser.IN, i);
		}
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowColumns) {
			listener.enterShowColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowColumns) {
			listener.exitShowColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowColumns) {
			return visitor.visitShowColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateDbContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateDb) {
			listener.enterShowCreateDb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateDb) {
			listener.exitShowCreateDb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateDb) {
			return visitor.visitShowCreateDb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateFullIdObjectContext extends ShowStatementContext {
	public _namedEntity: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGER, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateFullIdObject) {
			listener.enterShowCreateFullIdObject(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateFullIdObject) {
			listener.exitShowCreateFullIdObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateFullIdObject) {
			return visitor.visitShowCreateFullIdObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateUserContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateUser) {
			listener.enterShowCreateUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateUser) {
			listener.exitShowCreateUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateUser) {
			return visitor.visitShowCreateUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowEngineContext extends ShowStatementContext {
	public _engineOption: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MUTEX, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowEngine) {
			listener.enterShowEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowEngine) {
			listener.exitShowEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowEngine) {
			return visitor.visitShowEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowGlobalInfoContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		return this.getRuleContext(0, ShowGlobalInfoClauseContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGlobalInfo) {
			listener.enterShowGlobalInfo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGlobalInfo) {
			listener.exitShowGlobalInfo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGlobalInfo) {
			return visitor.visitShowGlobalInfo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowErrorsContext extends ShowStatementContext {
	public _errorFormat: Token;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowErrors) {
			listener.enterShowErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowErrors) {
			listener.exitShowErrors(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowErrors) {
			return visitor.visitShowErrors(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCountErrorsContext extends ShowStatementContext {
	public _errorFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public COUNT(): TerminalNode { return this.getToken(MySqlParser.COUNT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCountErrors) {
			listener.enterShowCountErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCountErrors) {
			listener.exitShowCountErrors(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCountErrors) {
			return visitor.visitShowCountErrors(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSchemaFilterContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showSchemaEntity(): ShowSchemaEntityContext {
		return this.getRuleContext(0, ShowSchemaEntityContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSchemaFilter) {
			listener.enterShowSchemaFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSchemaFilter) {
			listener.exitShowSchemaFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSchemaFilter) {
			return visitor.visitShowSchemaFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowRoutineContext extends ShowStatementContext {
	public _routine: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CODE(): TerminalNode { return this.getToken(MySqlParser.CODE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowRoutine) {
			listener.enterShowRoutine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowRoutine) {
			listener.exitShowRoutine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowRoutine) {
			return visitor.visitShowRoutine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowGrantsContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public GRANTS(): TerminalNode { return this.getToken(MySqlParser.GRANTS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGrants) {
			listener.enterShowGrants(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGrants) {
			listener.exitShowGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGrants) {
			return visitor.visitShowGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowIndexesContext extends ShowStatementContext {
	public _indexFormat: Token;
	public _tableFormat: Token;
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEXES, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEYS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.FROM);
		} else {
			return this.getToken(MySqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IN);
		} else {
			return this.getToken(MySqlParser.IN, i);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowIndexes) {
			listener.enterShowIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowIndexes) {
			listener.exitShowIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowIndexes) {
			return visitor.visitShowIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowOpenTablesContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowOpenTables) {
			listener.enterShowOpenTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowOpenTables) {
			listener.exitShowOpenTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowOpenTables) {
			return visitor.visitShowOpenTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowProfileContext extends ShowStatementContext {
	public _queryCount: DecimalLiteralContext;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public PROFILE(): TerminalNode { return this.getToken(MySqlParser.PROFILE, 0); }
	public showProfileType(): ShowProfileTypeContext[];
	public showProfileType(i: number): ShowProfileTypeContext;
	public showProfileType(i?: number): ShowProfileTypeContext | ShowProfileTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ShowProfileTypeContext);
		} else {
			return this.getRuleContext(i, ShowProfileTypeContext);
		}
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowProfile) {
			listener.enterShowProfile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowProfile) {
			listener.exitShowProfile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowProfile) {
			return visitor.visitShowProfile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSlaveStatusContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public STATUS(): TerminalNode { return this.getToken(MySqlParser.STATUS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSlaveStatus) {
			listener.enterShowSlaveStatus(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSlaveStatus) {
			listener.exitShowSlaveStatus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSlaveStatus) {
			return visitor.visitShowSlaveStatus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableClauseContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL_ID, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	public AT_SIGN(): TerminalNode[];
	public AT_SIGN(i: number): TerminalNode;
	public AT_SIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AT_SIGN);
		} else {
			return this.getToken(MySqlParser.AT_SIGN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_variableClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterVariableClause) {
			listener.enterVariableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitVariableClause) {
			listener.exitVariableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitVariableClause) {
			return visitor.visitVariableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCommonEntityContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATION, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASES, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMAS, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIABLES, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showCommonEntity; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCommonEntity) {
			listener.enterShowCommonEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCommonEntity) {
			listener.exitShowCommonEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCommonEntity) {
			return visitor.visitShowCommonEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFilterContext extends ParserRuleContext {
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIKE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showFilter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowFilter) {
			listener.enterShowFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowFilter) {
			listener.exitShowFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowFilter) {
			return visitor.visitShowFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowGlobalInfoClauseContext extends ParserRuleContext {
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINES, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGINS, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESSLIST, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILES, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOSTS, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTHORS, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTRIBUTORS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showGlobalInfoClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGlobalInfoClause) {
			listener.enterShowGlobalInfoClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGlobalInfoClause) {
			listener.exitShowGlobalInfoClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGlobalInfoClause) {
			return visitor.visitShowGlobalInfoClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSchemaEntityContext extends ParserRuleContext {
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENTS, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showSchemaEntity; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSchemaEntity) {
			listener.enterShowSchemaEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSchemaEntity) {
			listener.exitShowSchemaEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSchemaEntity) {
			return visitor.visitShowSchemaEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProfileTypeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOCK, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTEXT, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWITCHES, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CPU, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IPC, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAULTS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOURCE, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWAPS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showProfileType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowProfileType) {
			listener.enterShowProfileType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowProfileType) {
			listener.exitShowProfileType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowProfileType) {
			return visitor.visitShowProfileType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BinlogStatementContext extends ParserRuleContext {
	public BINLOG(): TerminalNode { return this.getToken(MySqlParser.BINLOG, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_binlogStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinlogStatement) {
			listener.enterBinlogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinlogStatement) {
			listener.exitBinlogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinlogStatement) {
			return visitor.visitBinlogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CacheIndexStatementContext extends ParserRuleContext {
	public _schema: UidContext;
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public tableIndexes(): TableIndexesContext[];
	public tableIndexes(i: number): TableIndexesContext;
	public tableIndexes(i?: number): TableIndexesContext | TableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableIndexesContext);
		} else {
			return this.getRuleContext(i, TableIndexesContext);
		}
	}
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_cacheIndexStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCacheIndexStatement) {
			listener.enterCacheIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCacheIndexStatement) {
			listener.exitCacheIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCacheIndexStatement) {
			return visitor.visitCacheIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushStatementContext extends ParserRuleContext {
	public _flushFormat: Token;
	public FLUSH(): TerminalNode { return this.getToken(MySqlParser.FLUSH, 0); }
	public flushOption(): FlushOptionContext[];
	public flushOption(i: number): FlushOptionContext;
	public flushOption(i?: number): FlushOptionContext | FlushOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FlushOptionContext);
		} else {
			return this.getRuleContext(i, FlushOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFlushStatement) {
			listener.enterFlushStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFlushStatement) {
			listener.exitFlushStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFlushStatement) {
			return visitor.visitFlushStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillStatementContext extends ParserRuleContext {
	public _connectionFormat: Token;
	public KILL(): TerminalNode { return this.getToken(MySqlParser.KILL, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_killStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterKillStatement) {
			listener.enterKillStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitKillStatement) {
			listener.exitKillStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitKillStatement) {
			return visitor.visitKillStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadIndexIntoCacheContext extends ParserRuleContext {
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	public loadedTableIndexes(): LoadedTableIndexesContext[];
	public loadedTableIndexes(i: number): LoadedTableIndexesContext;
	public loadedTableIndexes(i?: number): LoadedTableIndexesContext | LoadedTableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LoadedTableIndexesContext);
		} else {
			return this.getRuleContext(i, LoadedTableIndexesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadIndexIntoCache; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadIndexIntoCache) {
			listener.enterLoadIndexIntoCache(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadIndexIntoCache) {
			listener.exitLoadIndexIntoCache(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadIndexIntoCache) {
			return visitor.visitLoadIndexIntoCache(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetStatementContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public QUERY(): TerminalNode { return this.getToken(MySqlParser.QUERY, 0); }
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetStatement) {
			listener.enterResetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetStatement) {
			listener.exitResetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetStatement) {
			return visitor.visitResetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShutdownStatementContext extends ParserRuleContext {
	public SHUTDOWN(): TerminalNode { return this.getToken(MySqlParser.SHUTDOWN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_shutdownStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShutdownStatement) {
			listener.enterShutdownStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShutdownStatement) {
			listener.exitShutdownStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShutdownStatement) {
			return visitor.visitShutdownStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableIndexesContext extends ParserRuleContext {
	public _indexFormat: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableIndexes; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableIndexes) {
			listener.enterTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableIndexes) {
			listener.exitTableIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableIndexes) {
			return visitor.visitTableIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushOption; }
	public copyFrom(ctx: FlushOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFlushOptionContext extends FlushOptionContext {
	public DES_KEY_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_KEY_FILE, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOSTS, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGS, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CACHE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER_RESOURCES, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERROR, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GENERAL, 0); }
	public RELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY, 0); }
	public SLOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLOW, 0); }
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleFlushOption) {
			listener.enterSimpleFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleFlushOption) {
			listener.exitSimpleFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleFlushOption) {
			return visitor.visitSimpleFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ChannelFlushOptionContext extends FlushOptionContext {
	public RELAY(): TerminalNode { return this.getToken(MySqlParser.RELAY, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChannelFlushOption) {
			listener.enterChannelFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChannelFlushOption) {
			listener.exitChannelFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChannelFlushOption) {
			return visitor.visitChannelFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableFlushOptionContext extends FlushOptionContext {
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public flushTableOption(): FlushTableOptionContext | undefined {
		return this.tryGetRuleContext(0, FlushTableOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableFlushOption) {
			listener.enterTableFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableFlushOption) {
			listener.exitTableFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableFlushOption) {
			return visitor.visitTableFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushTableOptionContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPORT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushTableOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFlushTableOption) {
			listener.enterFlushTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFlushTableOption) {
			listener.exitFlushTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFlushTableOption) {
			return visitor.visitFlushTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadedTableIndexesContext extends ParserRuleContext {
	public _partitionList: UidListContext;
	public _indexFormat: Token;
	public _indexList: UidListContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAVES, 0); }
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadedTableIndexes; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadedTableIndexes) {
			listener.enterLoadedTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadedTableIndexes) {
			listener.exitLoadedTableIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadedTableIndexes) {
			return visitor.visitLoadedTableIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleDescribeStatementContext extends ParserRuleContext {
	public _command: Token;
	public _column: UidContext;
	public _pattern: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleDescribeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleDescribeStatement) {
			listener.enterSimpleDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleDescribeStatement) {
			listener.exitSimpleDescribeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleDescribeStatement) {
			return visitor.visitSimpleDescribeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullDescribeStatementContext extends ParserRuleContext {
	public _command: Token;
	public _formatType: Token;
	public _formatValue: Token;
	public describeObjectClause(): DescribeObjectClauseContext {
		return this.getRuleContext(0, DescribeObjectClauseContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORMAT, 0); }
	public TRADITIONAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRADITIONAL, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JSON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullDescribeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullDescribeStatement) {
			listener.enterFullDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullDescribeStatement) {
			listener.exitFullDescribeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullDescribeStatement) {
			return visitor.visitFullDescribeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HelpStatementContext extends ParserRuleContext {
	public HELP(): TerminalNode { return this.getToken(MySqlParser.HELP, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_helpStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHelpStatement) {
			listener.enterHelpStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHelpStatement) {
			listener.exitHelpStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHelpStatement) {
			return visitor.visitHelpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(MySqlParser.USE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_useStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUseStatement) {
			listener.enterUseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUseStatement) {
			listener.exitUseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUseStatement) {
			return visitor.visitUseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescribeObjectClauseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_describeObjectClause; }
	public copyFrom(ctx: DescribeObjectClauseContext): void {
		super.copyFrom(ctx);
	}
}
export class DescribeStatementsContext extends DescribeObjectClauseContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDescribeStatements) {
			listener.enterDescribeStatements(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDescribeStatements) {
			listener.exitDescribeStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDescribeStatements) {
			return visitor.visitDescribeStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DescribeConnectionContext extends DescribeObjectClauseContext {
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public CONNECTION(): TerminalNode { return this.getToken(MySqlParser.CONNECTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDescribeConnection) {
			listener.enterDescribeConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDescribeConnection) {
			listener.exitDescribeConnection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDescribeConnection) {
			return visitor.visitDescribeConnection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullIdContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullId) {
			listener.enterFullId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullId) {
			listener.exitFullId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullId) {
			return visitor.visitFullId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableName) {
			return visitor.visitTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullColumnNameContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dottedId(): DottedIdContext[];
	public dottedId(i: number): DottedIdContext;
	public dottedId(i?: number): DottedIdContext | DottedIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DottedIdContext);
		} else {
			return this.getRuleContext(i, DottedIdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullColumnName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullColumnName) {
			listener.enterFullColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullColumnName) {
			listener.exitFullColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullColumnName) {
			return visitor.visitFullColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnNameContext extends ParserRuleContext {
	public _sortType: Token;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexColumnName) {
			listener.enterIndexColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexColumnName) {
			listener.exitIndexColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexColumnName) {
			return visitor.visitIndexColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserNameContext extends ParserRuleContext {
	public STRING_USER_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_USER_NAME, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserName) {
			listener.enterUserName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserName) {
			listener.exitUserName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserName) {
			return visitor.visitUserName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MysqlVariableContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_mysqlVariable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMysqlVariable) {
			listener.enterMysqlVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMysqlVariable) {
			listener.exitMysqlVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMysqlVariable) {
			return visitor.visitMysqlVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_charsetName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharsetName) {
			listener.enterCharsetName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharsetName) {
			listener.exitCharsetName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetName) {
			return visitor.visitCharsetName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_collationName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollationName) {
			listener.enterCollationName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollationName) {
			listener.exitCollationName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollationName) {
			return visitor.visitCollationName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EngineNameContext extends ParserRuleContext {
	public ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ARCHIVE, 0); }
	public BLACKHOLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLACKHOLE, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CSV, 0); }
	public FEDERATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FEDERATED, 0); }
	public INNODB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INNODB, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public MRG_MYISAM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MRG_MYISAM, 0); }
	public MYISAM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYISAM, 0); }
	public NDB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NDB, 0); }
	public NDBCLUSTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NDBCLUSTER, 0); }
	public PERFOMANCE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERFOMANCE_SCHEMA, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_engineName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterEngineName) {
			listener.enterEngineName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitEngineName) {
			listener.exitEngineName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEngineName) {
			return visitor.visitEngineName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UuidSetContext extends ParserRuleContext {
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.MINUS);
		} else {
			return this.getToken(MySqlParser.MINUS, i);
		}
	}
	public COLON_SYMB(): TerminalNode[];
	public COLON_SYMB(i: number): TerminalNode;
	public COLON_SYMB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COLON_SYMB);
		} else {
			return this.getToken(MySqlParser.COLON_SYMB, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uuidSet; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUuidSet) {
			listener.enterUuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUuidSet) {
			listener.exitUuidSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUuidSet) {
			return visitor.visitUuidSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	public _globalTableUid: XuidStringIdContext;
	public _qualifier: XuidStringIdContext;
	public _idFormat: DecimalLiteralContext;
	public xuidStringId(): XuidStringIdContext[];
	public xuidStringId(i: number): XuidStringIdContext;
	public xuidStringId(i?: number): XuidStringIdContext | XuidStringIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(XuidStringIdContext);
		} else {
			return this.getRuleContext(i, XuidStringIdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xid; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXid) {
			listener.enterXid(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXid) {
			listener.exitXid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXid) {
			return visitor.visitXid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XuidStringIdContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_STRING, 0); }
	public HEXADECIMAL_LITERAL(): TerminalNode[];
	public HEXADECIMAL_LITERAL(i: number): TerminalNode;
	public HEXADECIMAL_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
		} else {
			return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xuidStringId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXuidStringId) {
			listener.enterXuidStringId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXuidStringId) {
			listener.exitXuidStringId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXuidStringId) {
			return visitor.visitXuidStringId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthPluginContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_authPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAuthPlugin) {
			listener.enterAuthPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAuthPlugin) {
			listener.exitAuthPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAuthPlugin) {
			return visitor.visitAuthPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UidContext extends ParserRuleContext {
	public simpleId(): SimpleIdContext | undefined {
		return this.tryGetRuleContext(0, SimpleIdContext);
	}
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uid; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUid) {
			listener.enterUid(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUid) {
			listener.exitUid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUid) {
			return visitor.visitUid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleIdContext extends ParserRuleContext {
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public transactionLevelBase(): TransactionLevelBaseContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelBaseContext);
	}
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public privilegesBase(): PrivilegesBaseContext | undefined {
		return this.tryGetRuleContext(0, PrivilegesBaseContext);
	}
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public dataTypeBase(): DataTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, DataTypeBaseContext);
	}
	public keywordsCanBeId(): KeywordsCanBeIdContext | undefined {
		return this.tryGetRuleContext(0, KeywordsCanBeIdContext);
	}
	public functionNameBase(): FunctionNameBaseContext | undefined {
		return this.tryGetRuleContext(0, FunctionNameBaseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleId) {
			listener.enterSimpleId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleId) {
			listener.exitSimpleId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleId) {
			return visitor.visitSimpleId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DottedIdContext extends ParserRuleContext {
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dottedId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDottedId) {
			listener.enterDottedId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDottedId) {
			listener.exitDottedId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDottedId) {
			return visitor.visitDottedId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalLiteralContext extends ParserRuleContext {
	public DECIMAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL_LITERAL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_decimalLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDecimalLiteral) {
			listener.enterDecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDecimalLiteral) {
			listener.exitDecimalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalLiteral) {
			return visitor.visitDecimalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileSizeLiteralContext extends ParserRuleContext {
	public FILESIZE_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILESIZE_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fileSizeLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFileSizeLiteral) {
			listener.enterFileSizeLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFileSizeLiteral) {
			listener.exitFileSizeLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFileSizeLiteral) {
			return visitor.visitFileSizeLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringLiteralContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public START_NATIONAL_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stringLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringLiteral) {
			return visitor.visitStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_booleanLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBooleanLiteral) {
			return visitor.visitBooleanLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HexadecimalLiteralContext extends ParserRuleContext {
	public HEXADECIMAL_LITERAL(): TerminalNode { return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_hexadecimalLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHexadecimalLiteral) {
			listener.enterHexadecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHexadecimalLiteral) {
			listener.exitHexadecimalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHexadecimalLiteral) {
			return visitor.visitHexadecimalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NullNotnullContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_nullNotnull; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNullNotnull) {
			listener.enterNullNotnull(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNullNotnull) {
			listener.exitNullNotnull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNullNotnull) {
			return visitor.visitNullNotnull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public _nullLiteral: Token;
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public hexadecimalLiteral(): HexadecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, HexadecimalLiteralContext);
	}
	public booleanLiteral(): BooleanLiteralContext | undefined {
		return this.tryGetRuleContext(0, BooleanLiteralContext);
	}
	public REAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_STRING, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_constant; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dataType; }
	public copyFrom(ctx: DataTypeContext): void {
		super.copyFrom(ctx);
	}
}
export class StringDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARCHAR, 0); }
	public TINYTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYTEXT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEXT, 0); }
	public MEDIUMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMTEXT, 0); }
	public LONGTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LONGTEXT, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringDataType) {
			listener.enterStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringDataType) {
			listener.exitStringDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringDataType) {
			return visitor.visitStringDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DimensionDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYINT, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SMALLINT, 0); }
	public MEDIUMINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMINT, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIGINT, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNSIGNED, 0); }
	public ZEROFILL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZEROFILL, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOUBLE, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FLOAT, 0); }
	public lengthTwoDimension(): LengthTwoDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoDimensionContext);
	}
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMERIC, 0); }
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoOptionalDimensionContext);
	}
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public VARBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARBINARY, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDimensionDataType) {
			listener.enterDimensionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDimensionDataType) {
			listener.exitDimensionDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDimensionDataType) {
			return visitor.visitDimensionDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TINYBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYBLOB, 0); }
	public BLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOB, 0); }
	public MEDIUMBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMBLOB, 0); }
	public LONGBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LONGBLOB, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOLEAN, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIAL, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleDataType) {
			listener.enterSimpleDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleDataType) {
			listener.exitSimpleDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleDataType) {
			return visitor.visitSimpleDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollectionDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENUM, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollectionDataType) {
			listener.enterCollectionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollectionDataType) {
			listener.exitCollectionDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollectionDataType) {
			return visitor.visitCollectionDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SpatialDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRING, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRING, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINT, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGON, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINT, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGON, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpatialDataType) {
			listener.enterSpatialDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpatialDataType) {
			listener.exitSpatialDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpatialDataType) {
			return visitor.visitSpatialDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConvertedDataTypeContext extends ParserRuleContext {
	public _typeName: Token;
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public lengthTwoDimension(): LengthTwoDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoDimensionContext);
	}
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNSIGNED, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_convertedDataType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConvertedDataType) {
			listener.enterConvertedDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConvertedDataType) {
			listener.exitConvertedDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConvertedDataType) {
			return visitor.visitConvertedDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthOneDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthOneDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthOneDimension) {
			listener.enterLengthOneDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthOneDimension) {
			listener.exitLengthOneDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthOneDimension) {
			return visitor.visitLengthOneDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthTwoDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthTwoDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthTwoDimension) {
			listener.enterLengthTwoDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthTwoDimension) {
			listener.exitLengthTwoDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthTwoDimension) {
			return visitor.visitLengthTwoDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthTwoOptionalDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthTwoOptionalDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthTwoOptionalDimension) {
			listener.enterLengthTwoOptionalDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthTwoOptionalDimension) {
			listener.exitLengthTwoOptionalDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthTwoOptionalDimension) {
			return visitor.visitLengthTwoOptionalDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UidListContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uidList; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUidList) {
			listener.enterUidList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUidList) {
			listener.exitUidList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUidList) {
			return visitor.visitUidList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablesContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTables) {
			listener.enterTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTables) {
			listener.exitTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTables) {
			return visitor.visitTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnNamesContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public indexColumnName(): IndexColumnNameContext[];
	public indexColumnName(i: number): IndexColumnNameContext;
	public indexColumnName(i?: number): IndexColumnNameContext | IndexColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexColumnNameContext);
		} else {
			return this.getRuleContext(i, IndexColumnNameContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnNames; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexColumnNames) {
			listener.enterIndexColumnNames(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexColumnNames) {
			listener.exitIndexColumnNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexColumnNames) {
			return visitor.visitIndexColumnNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressions) {
			listener.enterExpressions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressions) {
			listener.exitExpressions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressions) {
			return visitor.visitExpressions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsWithDefaultsContext extends ParserRuleContext {
	public expressionOrDefault(): ExpressionOrDefaultContext[];
	public expressionOrDefault(i: number): ExpressionOrDefaultContext;
	public expressionOrDefault(i?: number): ExpressionOrDefaultContext | ExpressionOrDefaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionOrDefaultContext);
		} else {
			return this.getRuleContext(i, ExpressionOrDefaultContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionsWithDefaults; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionsWithDefaults) {
			listener.enterExpressionsWithDefaults(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionsWithDefaults) {
			listener.exitExpressionsWithDefaults(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionsWithDefaults) {
			return visitor.visitExpressionsWithDefaults(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_constants; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstants) {
			listener.enterConstants(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstants) {
			listener.exitConstants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstants) {
			return visitor.visitConstants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleStringsContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleStrings; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleStrings) {
			listener.enterSimpleStrings(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleStrings) {
			listener.exitSimpleStrings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleStrings) {
			return visitor.visitSimpleStrings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserVariablesContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOCAL_ID);
		} else {
			return this.getToken(MySqlParser.LOCAL_ID, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userVariables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserVariables) {
			listener.enterUserVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserVariables) {
			listener.exitUserVariables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserVariables) {
			return visitor.visitUserVariables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultValueContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public currentTimestamp(): CurrentTimestampContext[];
	public currentTimestamp(i: number): CurrentTimestampContext;
	public currentTimestamp(i?: number): CurrentTimestampContext | CurrentTimestampContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CurrentTimestampContext);
		} else {
			return this.getRuleContext(i, CurrentTimestampContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_defaultValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultValue) {
			listener.enterDefaultValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultValue) {
			listener.exitDefaultValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultValue) {
			return visitor.visitDefaultValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrentTimestampContext extends ParserRuleContext {
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOW, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIMESTAMP, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_currentTimestamp; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCurrentTimestamp) {
			listener.enterCurrentTimestamp(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCurrentTimestamp) {
			listener.exitCurrentTimestamp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentTimestamp) {
			return visitor.visitCurrentTimestamp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionOrDefault; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionOrDefault) {
			listener.enterExpressionOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionOrDefault) {
			listener.exitExpressionOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionOrDefault) {
			return visitor.visitExpressionOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MySqlParser.IF, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifExists; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfExists) {
			listener.enterIfExists(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfExists) {
			listener.exitIfExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfExists) {
			return visitor.visitIfExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MySqlParser.IF, 0); }
	public NOT(): TerminalNode { return this.getToken(MySqlParser.NOT, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifNotExists; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfNotExists) {
			listener.enterIfNotExists(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfNotExists) {
			listener.exitIfNotExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfNotExists) {
			return visitor.visitIfNotExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionCall; }
	public copyFrom(ctx: FunctionCallContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecificFunctionCallContext extends FunctionCallContext {
	public specificFunction(): SpecificFunctionContext {
		return this.getRuleContext(0, SpecificFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpecificFunctionCall) {
			listener.enterSpecificFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpecificFunctionCall) {
			listener.exitSpecificFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpecificFunctionCall) {
			return visitor.visitSpecificFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AggregateFunctionCallContext extends FunctionCallContext {
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		return this.getRuleContext(0, AggregateWindowedFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAggregateFunctionCall) {
			listener.enterAggregateFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAggregateFunctionCall) {
			listener.exitAggregateFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAggregateFunctionCall) {
			return visitor.visitAggregateFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScalarFunctionCallContext extends FunctionCallContext {
	public scalarFunctionName(): ScalarFunctionNameContext {
		return this.getRuleContext(0, ScalarFunctionNameContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterScalarFunctionCall) {
			listener.enterScalarFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitScalarFunctionCall) {
			listener.exitScalarFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitScalarFunctionCall) {
			return visitor.visitScalarFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UdfFunctionCallContext extends FunctionCallContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUdfFunctionCall) {
			listener.enterUdfFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUdfFunctionCall) {
			listener.exitUdfFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUdfFunctionCall) {
			return visitor.visitUdfFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PasswordFunctionCallContext extends FunctionCallContext {
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getRuleContext(0, PasswordFunctionClauseContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordFunctionCall) {
			listener.enterPasswordFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordFunctionCall) {
			listener.exitPasswordFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordFunctionCall) {
			return visitor.visitPasswordFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecificFunctionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_specificFunction; }
	public copyFrom(ctx: SpecificFunctionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFunctionCallContext extends SpecificFunctionContext {
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_USER, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleFunctionCall) {
			listener.enterSimpleFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleFunctionCall) {
			listener.exitSimpleFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleFunctionCall) {
			return visitor.visitSimpleFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataTypeFunctionCallContext extends SpecificFunctionContext {
	public _separator: Token;
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public convertedDataType(): ConvertedDataTypeContext | undefined {
		return this.tryGetRuleContext(0, ConvertedDataTypeContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CAST, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDataTypeFunctionCall) {
			listener.enterDataTypeFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDataTypeFunctionCall) {
			listener.exitDataTypeFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDataTypeFunctionCall) {
			return visitor.visitDataTypeFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ValuesFunctionCallContext extends SpecificFunctionContext {
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterValuesFunctionCall) {
			listener.enterValuesFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitValuesFunctionCall) {
			listener.exitValuesFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitValuesFunctionCall) {
			return visitor.visitValuesFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CaseFunctionCallContext extends SpecificFunctionContext {
	public _elseArg: FunctionArgContext;
	public CASE(): TerminalNode { return this.getToken(MySqlParser.CASE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public caseFuncAlternative(): CaseFuncAlternativeContext[];
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext;
	public caseFuncAlternative(i?: number): CaseFuncAlternativeContext | CaseFuncAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseFuncAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseFuncAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseFunctionCall) {
			listener.enterCaseFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseFunctionCall) {
			listener.exitCaseFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseFunctionCall) {
			return visitor.visitCaseFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CharFunctionCallContext extends SpecificFunctionContext {
	public CHAR(): TerminalNode { return this.getToken(MySqlParser.CHAR, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext {
		return this.getRuleContext(0, FunctionArgsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharFunctionCall) {
			listener.enterCharFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharFunctionCall) {
			listener.exitCharFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharFunctionCall) {
			return visitor.visitCharFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PositionFunctionCallContext extends SpecificFunctionContext {
	public _positionString: StringLiteralContext;
	public _positionExpression: ExpressionContext;
	public _inString: StringLiteralContext;
	public _inExpression: ExpressionContext;
	public POSITION(): TerminalNode { return this.getToken(MySqlParser.POSITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPositionFunctionCall) {
			listener.enterPositionFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPositionFunctionCall) {
			listener.exitPositionFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPositionFunctionCall) {
			return visitor.visitPositionFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubstrFunctionCallContext extends SpecificFunctionContext {
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public _fromDecimal: DecimalLiteralContext;
	public _fromExpression: ExpressionContext;
	public _forDecimal: DecimalLiteralContext;
	public _forExpression: ExpressionContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubstrFunctionCall) {
			listener.enterSubstrFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubstrFunctionCall) {
			listener.exitSubstrFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubstrFunctionCall) {
			return visitor.visitSubstrFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TrimFunctionCallContext extends SpecificFunctionContext {
	public _positioinForm: Token;
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public _fromString: StringLiteralContext;
	public _fromExpression: ExpressionContext;
	public TRIM(): TerminalNode { return this.getToken(MySqlParser.TRIM, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOTH, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRAILING, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTrimFunctionCall) {
			listener.enterTrimFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTrimFunctionCall) {
			listener.exitTrimFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTrimFunctionCall) {
			return visitor.visitTrimFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WeightFunctionCallContext extends SpecificFunctionContext {
	public _stringFormat: Token;
	public WEIGHT_STRING(): TerminalNode { return this.getToken(MySqlParser.WEIGHT_STRING, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public levelsInWeightString(): LevelsInWeightStringContext | undefined {
		return this.tryGetRuleContext(0, LevelsInWeightStringContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWeightFunctionCall) {
			listener.enterWeightFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWeightFunctionCall) {
			listener.exitWeightFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWeightFunctionCall) {
			return visitor.visitWeightFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExtractFunctionCallContext extends SpecificFunctionContext {
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public EXTRACT(): TerminalNode { return this.getToken(MySqlParser.EXTRACT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExtractFunctionCall) {
			listener.enterExtractFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExtractFunctionCall) {
			listener.exitExtractFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExtractFunctionCall) {
			return visitor.visitExtractFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GetFormatFunctionCallContext extends SpecificFunctionContext {
	public _datetimeFormat: Token;
	public GET_FORMAT(): TerminalNode { return this.getToken(MySqlParser.GET_FORMAT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public stringLiteral(): StringLiteralContext {
		return this.getRuleContext(0, StringLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGetFormatFunctionCall) {
			listener.enterGetFormatFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGetFormatFunctionCall) {
			listener.exitGetFormatFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGetFormatFunctionCall) {
			return visitor.visitGetFormatFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseFuncAlternativeContext extends ParserRuleContext {
	public _condition: FunctionArgContext;
	public _consequent: FunctionArgContext;
	public WHEN(): TerminalNode { return this.getToken(MySqlParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public functionArg(): FunctionArgContext[];
	public functionArg(i: number): FunctionArgContext;
	public functionArg(i?: number): FunctionArgContext | FunctionArgContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionArgContext);
		} else {
			return this.getRuleContext(i, FunctionArgContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseFuncAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseFuncAlternative) {
			listener.enterCaseFuncAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseFuncAlternative) {
			listener.exitCaseFuncAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseFuncAlternative) {
			return visitor.visitCaseFuncAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelsInWeightStringContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_levelsInWeightString; }
	public copyFrom(ctx: LevelsInWeightStringContext): void {
		super.copyFrom(ctx);
	}
}
export class LevelWeightListContext extends LevelsInWeightStringContext {
	public LEVEL(): TerminalNode { return this.getToken(MySqlParser.LEVEL, 0); }
	public levelInWeightListElement(): LevelInWeightListElementContext[];
	public levelInWeightListElement(i: number): LevelInWeightListElementContext;
	public levelInWeightListElement(i?: number): LevelInWeightListElementContext | LevelInWeightListElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LevelInWeightListElementContext);
		} else {
			return this.getRuleContext(i, LevelInWeightListElementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelWeightList) {
			listener.enterLevelWeightList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelWeightList) {
			listener.exitLevelWeightList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelWeightList) {
			return visitor.visitLevelWeightList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LevelWeightRangeContext extends LevelsInWeightStringContext {
	public _firstLevel: DecimalLiteralContext;
	public _lastLevel: DecimalLiteralContext;
	public LEVEL(): TerminalNode { return this.getToken(MySqlParser.LEVEL, 0); }
	public MINUS(): TerminalNode { return this.getToken(MySqlParser.MINUS, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelWeightRange) {
			listener.enterLevelWeightRange(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelWeightRange) {
			listener.exitLevelWeightRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelWeightRange) {
			return visitor.visitLevelWeightRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelInWeightListElementContext extends ParserRuleContext {
	public _orderType: Token;
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_levelInWeightListElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelInWeightListElement) {
			listener.enterLevelInWeightListElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelInWeightListElement) {
			listener.exitLevelInWeightListElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelInWeightListElement) {
			return visitor.visitLevelInWeightListElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AggregateWindowedFunctionContext extends ParserRuleContext {
	public _aggregator: Token;
	public _starArg: Token;
	public _separator: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AVG, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIN, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUM, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COUNT, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	public BIT_AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_AND, 0); }
	public BIT_OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_OR, 0); }
	public BIT_XOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_XOR, 0); }
	public STD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STD, 0); }
	public STDDEV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV, 0); }
	public STDDEV_POP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV_POP, 0); }
	public STDDEV_SAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV_SAMP, 0); }
	public VAR_POP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_POP, 0); }
	public VAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_SAMP, 0); }
	public VARIANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIANCE, 0); }
	public GROUP_CONCAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP_CONCAT, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public SEPARATOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SEPARATOR, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_aggregateWindowedFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAggregateWindowedFunction) {
			listener.enterAggregateWindowedFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAggregateWindowedFunction) {
			listener.exitAggregateWindowedFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAggregateWindowedFunction) {
			return visitor.visitAggregateWindowedFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScalarFunctionNameContext extends ParserRuleContext {
	public functionNameBase(): FunctionNameBaseContext | undefined {
		return this.tryGetRuleContext(0, FunctionNameBaseContext);
	}
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASCII, 0); }
	public CURDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURDATE, 0); }
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public CURTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURTIME, 0); }
	public DATE_ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_ADD, 0); }
	public DATE_SUB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_SUB, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IF, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIMESTAMP, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MID, 0); }
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOW, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING, 0); }
	public SYSDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SYSDATE, 0); }
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIM, 0); }
	public UTC_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_DATE, 0); }
	public UTC_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_TIME, 0); }
	public UTC_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_TIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_scalarFunctionName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterScalarFunctionName) {
			listener.enterScalarFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitScalarFunctionName) {
			listener.exitScalarFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitScalarFunctionName) {
			return visitor.visitScalarFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PasswordFunctionClauseContext extends ParserRuleContext {
	public _functionName: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext {
		return this.getRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OLD_PASSWORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_passwordFunctionClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordFunctionClause) {
			listener.enterPasswordFunctionClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordFunctionClause) {
			listener.exitPasswordFunctionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordFunctionClause) {
			return visitor.visitPasswordFunctionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionArgsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public fullColumnName(): FullColumnNameContext[];
	public fullColumnName(i: number): FullColumnNameContext;
	public fullColumnName(i?: number): FullColumnNameContext | FullColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullColumnNameContext);
		} else {
			return this.getRuleContext(i, FullColumnNameContext);
		}
	}
	public functionCall(): FunctionCallContext[];
	public functionCall(i: number): FunctionCallContext;
	public functionCall(i?: number): FunctionCallContext | FunctionCallContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionCallContext);
		} else {
			return this.getRuleContext(i, FunctionCallContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionArgs; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionArgs) {
			listener.enterFunctionArgs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionArgs) {
			listener.exitFunctionArgs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionArgs) {
			return visitor.visitFunctionArgs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionArgContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public fullColumnName(): FullColumnNameContext | undefined {
		return this.tryGetRuleContext(0, FullColumnNameContext);
	}
	public functionCall(): FunctionCallContext | undefined {
		return this.tryGetRuleContext(0, FunctionCallContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionArg; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionArg) {
			listener.enterFunctionArg(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionArg) {
			listener.exitFunctionArg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionArg) {
			return visitor.visitFunctionArg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expression; }
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class NotExpressionContext extends ExpressionContext {
	public _notOperator: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNotExpression) {
			listener.enterNotExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNotExpression) {
			listener.exitNotExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNotExpression) {
			return visitor.visitNotExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LogicalExpressionContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public logicalOperator(): LogicalOperatorContext {
		return this.getRuleContext(0, LogicalOperatorContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLogicalExpression) {
			listener.enterLogicalExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLogicalExpression) {
			listener.exitLogicalExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalExpression) {
			return visitor.visitLogicalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IsExpressionContext extends ExpressionContext {
	public _testValue: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MySqlParser.IS, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FALSE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNKNOWN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIsExpression) {
			listener.enterIsExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIsExpression) {
			listener.exitIsExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIsExpression) {
			return visitor.visitIsExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PredicateExpressionContext extends ExpressionContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPredicateExpression) {
			listener.enterPredicateExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPredicateExpression) {
			listener.exitPredicateExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPredicateExpression) {
			return visitor.visitPredicateExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_predicate; }
	public copyFrom(ctx: PredicateContext): void {
		super.copyFrom(ctx);
	}
}
export class InPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInPredicate) {
			listener.enterInPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInPredicate) {
			listener.exitInPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInPredicate) {
			return visitor.visitInPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IsNullPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MySqlParser.IS, 0); }
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIsNullPredicate) {
			listener.enterIsNullPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIsNullPredicate) {
			listener.exitIsNullPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIsNullPredicate) {
			return visitor.visitIsNullPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryComparasionPredicateContext extends PredicateContext {
	public _left: PredicateContext;
	public _right: PredicateContext;
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinaryComparasionPredicate) {
			listener.enterBinaryComparasionPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinaryComparasionPredicate) {
			listener.exitBinaryComparasionPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinaryComparasionPredicate) {
			return visitor.visitBinaryComparasionPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryComparasionPredicateContext extends PredicateContext {
	public _quantifier: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ANY, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOME, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryComparasionPredicate) {
			listener.enterSubqueryComparasionPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryComparasionPredicate) {
			listener.exitSubqueryComparasionPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryComparasionPredicate) {
			return visitor.visitSubqueryComparasionPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BetweenPredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public BETWEEN(): TerminalNode { return this.getToken(MySqlParser.BETWEEN, 0); }
	public AND(): TerminalNode { return this.getToken(MySqlParser.AND, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBetweenPredicate) {
			listener.enterBetweenPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBetweenPredicate) {
			listener.exitBetweenPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBetweenPredicate) {
			return visitor.visitBetweenPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SoundsLikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public SOUNDS(): TerminalNode { return this.getToken(MySqlParser.SOUNDS, 0); }
	public LIKE(): TerminalNode { return this.getToken(MySqlParser.LIKE, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSoundsLikePredicate) {
			listener.enterSoundsLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSoundsLikePredicate) {
			listener.exitSoundsLikePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSoundsLikePredicate) {
			return visitor.visitSoundsLikePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public LIKE(): TerminalNode { return this.getToken(MySqlParser.LIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLikePredicate) {
			listener.enterLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLikePredicate) {
			listener.exitLikePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLikePredicate) {
			return visitor.visitLikePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RegexpPredicateContext extends PredicateContext {
	public _regex: Token;
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public REGEXP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REGEXP, 0); }
	public RLIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RLIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRegexpPredicate) {
			listener.enterRegexpPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRegexpPredicate) {
			listener.exitRegexpPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRegexpPredicate) {
			return visitor.visitRegexpPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExpressionAtomPredicateContext extends PredicateContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_ASSIGN, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionAtomPredicate) {
			listener.enterExpressionAtomPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionAtomPredicate) {
			listener.exitExpressionAtomPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionAtomPredicate) {
			return visitor.visitExpressionAtomPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionAtomContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionAtom; }
	public copyFrom(ctx: ExpressionAtomContext): void {
		super.copyFrom(ctx);
	}
}
export class ConstantExpressionAtomContext extends ExpressionAtomContext {
	public constant(): ConstantContext {
		return this.getRuleContext(0, ConstantContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstantExpressionAtom) {
			listener.enterConstantExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstantExpressionAtom) {
			listener.exitConstantExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstantExpressionAtom) {
			return visitor.visitConstantExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullColumnNameExpressionAtom) {
			listener.enterFullColumnNameExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullColumnNameExpressionAtom) {
			listener.exitFullColumnNameExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullColumnNameExpressionAtom) {
			return visitor.visitFullColumnNameExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionCallExpressionAtom) {
			listener.enterFunctionCallExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionCallExpressionAtom) {
			listener.exitFunctionCallExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionCallExpressionAtom) {
			return visitor.visitFunctionCallExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollateExpressionAtomContext extends ExpressionAtomContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public COLLATE(): TerminalNode { return this.getToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollateExpressionAtom) {
			listener.enterCollateExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollateExpressionAtom) {
			listener.exitCollateExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollateExpressionAtom) {
			return visitor.visitCollateExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
	public mysqlVariable(): MysqlVariableContext {
		return this.getRuleContext(0, MysqlVariableContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMysqlVariableExpressionAtom) {
			listener.enterMysqlVariableExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMysqlVariableExpressionAtom) {
			listener.exitMysqlVariableExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMysqlVariableExpressionAtom) {
			return visitor.visitMysqlVariableExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnaryExpressionAtomContext extends ExpressionAtomContext {
	public unaryOperator(): UnaryOperatorContext {
		return this.getRuleContext(0, UnaryOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnaryExpressionAtom) {
			listener.enterUnaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnaryExpressionAtom) {
			listener.exitUnaryExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnaryExpressionAtom) {
			return visitor.visitUnaryExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryExpressionAtomContext extends ExpressionAtomContext {
	public BINARY(): TerminalNode { return this.getToken(MySqlParser.BINARY, 0); }
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinaryExpressionAtom) {
			listener.enterBinaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinaryExpressionAtom) {
			listener.exitBinaryExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinaryExpressionAtom) {
			return visitor.visitBinaryExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NestedExpressionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNestedExpressionAtom) {
			listener.enterNestedExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNestedExpressionAtom) {
			listener.exitNestedExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNestedExpressionAtom) {
			return visitor.visitNestedExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NestedRowExpressionAtomContext extends ExpressionAtomContext {
	public ROW(): TerminalNode { return this.getToken(MySqlParser.ROW, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNestedRowExpressionAtom) {
			listener.enterNestedRowExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNestedRowExpressionAtom) {
			listener.exitNestedRowExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNestedRowExpressionAtom) {
			return visitor.visitNestedRowExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistsExpessionAtomContext extends ExpressionAtomContext {
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExistsExpessionAtom) {
			listener.enterExistsExpessionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExistsExpessionAtom) {
			listener.exitExistsExpessionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExistsExpessionAtom) {
			return visitor.visitExistsExpessionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryExpessionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryExpessionAtom) {
			listener.enterSubqueryExpessionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryExpessionAtom) {
			listener.exitSubqueryExpessionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryExpessionAtom) {
			return visitor.visitSubqueryExpessionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalExpressionAtomContext extends ExpressionAtomContext {
	public INTERVAL(): TerminalNode { return this.getToken(MySqlParser.INTERVAL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalExpressionAtom) {
			listener.enterIntervalExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalExpressionAtom) {
			listener.exitIntervalExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpressionAtom) {
			return visitor.visitIntervalExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BitExpressionAtomContext extends ExpressionAtomContext {
	public _left: ExpressionAtomContext;
	public _right: ExpressionAtomContext;
	public bitOperator(): BitOperatorContext {
		return this.getRuleContext(0, BitOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBitExpressionAtom) {
			listener.enterBitExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBitExpressionAtom) {
			listener.exitBitExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBitExpressionAtom) {
			return visitor.visitBitExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MathExpressionAtomContext extends ExpressionAtomContext {
	public _left: ExpressionAtomContext;
	public _right: ExpressionAtomContext;
	public mathOperator(): MathOperatorContext {
		return this.getRuleContext(0, MathOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMathExpressionAtom) {
			listener.enterMathExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMathExpressionAtom) {
			listener.exitMathExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMathExpressionAtom) {
			return visitor.visitMathExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnaryOperatorContext extends ParserRuleContext {
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	public BIT_NOT_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_NOT_OP, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unaryOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnaryOperator) {
			listener.enterUnaryOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnaryOperator) {
			listener.exitUnaryOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnaryOperator) {
			return visitor.visitUnaryOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATER_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS_SYMBOL, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_comparisonOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterComparisonOperator) {
			listener.enterComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitComparisonOperator) {
			listener.exitComparisonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitComparisonOperator) {
			return visitor.visitComparisonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LogicalOperatorContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public BIT_AND_OP(): TerminalNode[];
	public BIT_AND_OP(i: number): TerminalNode;
	public BIT_AND_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BIT_AND_OP);
		} else {
			return this.getToken(MySqlParser.BIT_AND_OP, i);
		}
	}
	public XOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XOR, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OR, 0); }
	public BIT_OR_OP(): TerminalNode[];
	public BIT_OR_OP(i: number): TerminalNode;
	public BIT_OR_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BIT_OR_OP);
		} else {
			return this.getToken(MySqlParser.BIT_OR_OP, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_logicalOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLogicalOperator) {
			listener.enterLogicalOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLogicalOperator) {
			listener.exitLogicalOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalOperator) {
			return visitor.visitLogicalOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BitOperatorContext extends ParserRuleContext {
	public LESS_SYMBOL(): TerminalNode[];
	public LESS_SYMBOL(i: number): TerminalNode;
	public LESS_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LESS_SYMBOL);
		} else {
			return this.getToken(MySqlParser.LESS_SYMBOL, i);
		}
	}
	public GREATER_SYMBOL(): TerminalNode[];
	public GREATER_SYMBOL(i: number): TerminalNode;
	public GREATER_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GREATER_SYMBOL);
		} else {
			return this.getToken(MySqlParser.GREATER_SYMBOL, i);
		}
	}
	public BIT_AND_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_AND_OP, 0); }
	public BIT_XOR_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_XOR_OP, 0); }
	public BIT_OR_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_OR_OP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_bitOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBitOperator) {
			listener.enterBitOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBitOperator) {
			listener.exitBitOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBitOperator) {
			return visitor.visitBitOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MathOperatorContext extends ParserRuleContext {
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIVIDE, 0); }
	public MODULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODULE, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIV, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MOD, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public MINUSMINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUSMINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_mathOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMathOperator) {
			listener.enterMathOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMathOperator) {
			listener.exitMathOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMathOperator) {
			return visitor.visitMathOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetNameBaseContext extends ParserRuleContext {
	public ARMSCII8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ARMSCII8, 0); }
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASCII, 0); }
	public BIG5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIG5, 0); }
	public CP1250(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1250, 0); }
	public CP1251(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1251, 0); }
	public CP1256(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1256, 0); }
	public CP1257(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1257, 0); }
	public CP850(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP850, 0); }
	public CP852(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP852, 0); }
	public CP866(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP866, 0); }
	public CP932(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP932, 0); }
	public DEC8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEC8, 0); }
	public EUCJPMS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EUCJPMS, 0); }
	public EUCKR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EUCKR, 0); }
	public GB2312(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GB2312, 0); }
	public GBK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GBK, 0); }
	public GEOSTD8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOSTD8, 0); }
	public GREEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREEK, 0); }
	public HEBREW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HEBREW, 0); }
	public HP8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HP8, 0); }
	public KEYBCS2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEYBCS2, 0); }
	public KOI8R(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KOI8R, 0); }
	public KOI8U(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KOI8U, 0); }
	public LATIN1(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN1, 0); }
	public LATIN2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN2, 0); }
	public LATIN5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN5, 0); }
	public LATIN7(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN7, 0); }
	public MACCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MACCE, 0); }
	public MACROMAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MACROMAN, 0); }
	public SJIS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SJIS, 0); }
	public SWE7(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWE7, 0); }
	public TIS620(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIS620, 0); }
	public UCS2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UCS2, 0); }
	public UJIS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UJIS, 0); }
	public UTF16(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF16, 0); }
	public UTF16LE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF16LE, 0); }
	public UTF32(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF32, 0); }
	public UTF8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8, 0); }
	public UTF8MB3(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8MB3, 0); }
	public UTF8MB4(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8MB4, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_charsetNameBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharsetNameBase) {
			listener.enterCharsetNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharsetNameBase) {
			listener.exitCharsetNameBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetNameBase) {
			return visitor.visitCharsetNameBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionLevelBaseContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPEATABLE, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionLevelBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionLevelBase) {
			listener.enterTransactionLevelBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionLevelBase) {
			listener.exitTransactionLevelBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionLevelBase) {
			return visitor.visitTransactionLevelBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegesBaseContext extends ParserRuleContext {
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUTINE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESS, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELOAD, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUPER, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilegesBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivilegesBase) {
			listener.enterPrivilegesBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivilegesBase) {
			listener.exitPrivilegesBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilegesBase) {
			return visitor.visitPrivilegesBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalTypeBaseContext extends ParserRuleContext {
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUARTER, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTH, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEK, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalTypeBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalTypeBase) {
			listener.enterIntervalTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalTypeBase) {
			listener.exitIntervalTypeBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalTypeBase) {
			return visitor.visitIntervalTypeBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeBaseContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENUM, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dataTypeBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDataTypeBase) {
			listener.enterDataTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDataTypeBase) {
			listener.exitDataTypeBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDataTypeBase) {
			return visitor.visitDataTypeBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeywordsCanBeIdContext extends ParserRuleContext {
	public ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACCOUNT, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACTION, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AGGREGATE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ANY, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AT, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTHORS, 0); }
	public AUTOCOMMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOCOMMIT, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTO_INCREMENT, 0); }
	public AVG_ROW_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEGIN, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINLOG, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOCK, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOLEAN, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BTREE, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANGED, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANNEL, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECKSUM, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CIPHER, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLIENT, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COALESCE, 0); }
	public CODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CODE, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public COLUMN_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN_FORMAT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMIT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPACT, 0); }
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSED, 0); }
	public COMPRESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSION, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSISTENT, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTAINS, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTEXT, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTRIBUTORS, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CPU, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATA, 0); }
	public DATAFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATAFILE, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEALLOCATE, 0); }
	public DEFAULT_AUTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT_AUTH, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public DELAY_KEY_WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
	public DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIRECTORY, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISABLE, 0); }
	public DISCARD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISCARD, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DO, 0); }
	public DUMPFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUMPFILE, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUPLICATE, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENABLE, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCRYPTION, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDS, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINES, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERROR, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPE, 0); }
	public EVEN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVEN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENTS, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVERY, 0); }
	public EXCHANGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCHANGE, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EXPIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPIRE, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENT_SIZE, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAST, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAULTS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILTER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOLLOWS, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public GRANTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GRANTS, 0); }
	public GROUP_REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP_REPLICATION, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HASH, 0); }
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOST, 0); }
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IDENTIFIED, 0); }
	public IGNORE_SERVER_IDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IMPORT, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEXES, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public INSERT_METHOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT_METHOD, 0); }
	public INSTANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSTANCE, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO, 0); }
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO_THREAD, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IPC, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISOLATION, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSUER, 0); }
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LANGUAGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAVES, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEVEL, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIST, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public LOGFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGFILE, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGS, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_DELAY, 0); }
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HOST, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_POS, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PASSWORD, 0); }
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PORT, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_KEY, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_USER, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
	public MAX_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_ROWS, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_SIZE, 0); }
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUM, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MID, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIGRATE, 0); }
	public MIN_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIN_ROWS, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODIFY, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MUTEX, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAMES, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEVER, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFSET, 0); }
	public OJ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OJ, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OLD_PASSWORD, 0); }
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIONS, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OWNER, 0); }
	public PACK_KEYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PACK_KEYS, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARSER, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTIAL, 0); }
	public PARTITIONING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONING, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PHASE, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGINS, 0); }
	public PLUGIN_DIR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGIN_DIR, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PORT, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRECEDES, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREPARE, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREV, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESSLIST, 0); }
	public PROFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILE, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILES, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROXY, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REBUILD, 0); }
	public RECOVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RECOVER, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDUNDANT, 0); }
	public RELAYLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAYLOG, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_POS, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REMOVE, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REORGANIZE, 0); }
	public REPAIR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPAIR, 0); }
	public REPLICATE_DO_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_DO_DB, 0); }
	public REPLICATE_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
	public REPLICATE_IGNORE_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
	public REPLICATE_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
	public REPLICATE_REWRITE_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
	public REPLICATE_WILD_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATION, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESUME, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RETURNS, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLBACK, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLUP, 0); }
	public ROTATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROTATE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROWS, 0); }
	public ROW_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW_FORMAT, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SAVEPOINT, 0); }
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEDULE, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIAL, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERVER, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGNED, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIMPLE, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SNAPSHOT, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOCKET, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOME, 0); }
	public SOUNDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOUNDS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOURCE, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
	public SQL_AFTER_MTS_GAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_NO_CACHE, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START, 0); }
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTS, 0); }
	public STATS_AUTO_RECALC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
	public STATS_PERSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_PERSISTENT, 0); }
	public STATS_SAMPLE_PAGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STOP, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBJECT, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITION, 0); }
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITIONS, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUSPEND, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWAPS, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWITCHES, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLESPACE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.THAN, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRANSACTION, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUNCATE, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public UNDOFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDOFILE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNKNOWN, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPGRADE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATION, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRAPPER, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X509, 0); }
	public XA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XA, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XML, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_keywordsCanBeId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterKeywordsCanBeId) {
			listener.enterKeywordsCanBeId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitKeywordsCanBeId) {
			listener.exitKeywordsCanBeId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitKeywordsCanBeId) {
			return visitor.visitKeywordsCanBeId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameBaseContext extends ParserRuleContext {
	public ABS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ABS, 0); }
	public ACOS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACOS, 0); }
	public ADDDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADDDATE, 0); }
	public ADDTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADDTIME, 0); }
	public AES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AES_DECRYPT, 0); }
	public AES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AES_ENCRYPT, 0); }
	public AREA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AREA, 0); }
	public ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASBINARY, 0); }
	public ASIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASIN, 0); }
	public ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASTEXT, 0); }
	public ASWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASWKB, 0); }
	public ASWKT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASWKT, 0); }
	public ASYMMETRIC_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
	public ASYMMETRIC_DERIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
	public ASYMMETRIC_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
	public ASYMMETRIC_SIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
	public ASYMMETRIC_VERIFY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
	public ATAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ATAN, 0); }
	public ATAN2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ATAN2, 0); }
	public BENCHMARK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BENCHMARK, 0); }
	public BIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIN, 0); }
	public BIT_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_COUNT, 0); }
	public BIT_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_LENGTH, 0); }
	public BUFFER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BUFFER, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CEIL, 0); }
	public CEILING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CEILING, 0); }
	public CENTROID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CENTROID, 0); }
	public CHARACTER_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER_LENGTH, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public CHAR_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR_LENGTH, 0); }
	public COERCIBILITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COERCIBILITY, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATION, 0); }
	public COMPRESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESS, 0); }
	public CONCAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCAT, 0); }
	public CONCAT_WS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCAT_WS, 0); }
	public CONNECTION_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION_ID, 0); }
	public CONV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONV, 0); }
	public CONVERT_TZ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT_TZ, 0); }
	public COS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COS, 0); }
	public COT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COUNT, 0); }
	public CRC32(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CRC32, 0); }
	public CREATE_ASYMMETRIC_PRIV_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
	public CREATE_ASYMMETRIC_PUB_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
	public CREATE_DH_PARAMETERS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
	public CREATE_DIGEST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_DIGEST, 0); }
	public CROSSES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CROSSES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public DATEDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATEDIFF, 0); }
	public DATE_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_FORMAT, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public DAYNAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYNAME, 0); }
	public DAYOFMONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFMONTH, 0); }
	public DAYOFWEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFWEEK, 0); }
	public DAYOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFYEAR, 0); }
	public DECODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECODE, 0); }
	public DEGREES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEGREES, 0); }
	public DES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_DECRYPT, 0); }
	public DES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_ENCRYPT, 0); }
	public DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIMENSION, 0); }
	public DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISJOINT, 0); }
	public ELT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELT, 0); }
	public ENCODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCODE, 0); }
	public ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCRYPT, 0); }
	public ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDPOINT, 0); }
	public ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENVELOPE, 0); }
	public EQUALS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUALS, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXP, 0); }
	public EXPORT_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPORT_SET, 0); }
	public EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTERIORRING, 0); }
	public EXTRACTVALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTRACTVALUE, 0); }
	public FIELD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELD, 0); }
	public FIND_IN_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIND_IN_SET, 0); }
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FLOOR, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORMAT, 0); }
	public FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOUND_ROWS, 0); }
	public FROM_BASE64(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_BASE64, 0); }
	public FROM_DAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_DAYS, 0); }
	public FROM_UNIXTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_UNIXTIME, 0); }
	public GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
	public GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
	public GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
	public GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
	public GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
	public GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYN, 0); }
	public GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYTYPE, 0); }
	public GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMFROMTEXT, 0); }
	public GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMFROMWKB, 0); }
	public GET_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GET_FORMAT, 0); }
	public GET_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GET_LOCK, 0); }
	public GLENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLENGTH, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATEST, 0); }
	public GTID_SUBSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GTID_SUBSET, 0); }
	public GTID_SUBTRACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GTID_SUBTRACT, 0); }
	public HEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HEX, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR, 0); }
	public IFNULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IFNULL, 0); }
	public INET6_ATON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET6_ATON, 0); }
	public INET6_NTOA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET6_NTOA, 0); }
	public INET_ATON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET_ATON, 0); }
	public INET_NTOA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET_NTOA, 0); }
	public INSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSTR, 0); }
	public INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERIORRINGN, 0); }
	public INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERSECTS, 0); }
	public ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISCLOSED, 0); }
	public ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISEMPTY, 0); }
	public ISNULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISNULL, 0); }
	public ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSIMPLE, 0); }
	public IS_FREE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_FREE_LOCK, 0); }
	public IS_IPV4(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4, 0); }
	public IS_IPV4_COMPAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
	public IS_IPV4_MAPPED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
	public IS_IPV6(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV6, 0); }
	public IS_USED_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_USED_LOCK, 0); }
	public LAST_INSERT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST_INSERT_ID, 0); }
	public LCASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LCASE, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAST, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LENGTH, 0); }
	public LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEFROMTEXT, 0); }
	public LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEFROMWKB, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRING, 0); }
	public LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
	public LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
	public LN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LN, 0); }
	public LOAD_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOAD_FILE, 0); }
	public LOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCATE, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG, 0); }
	public LOG10(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG10, 0); }
	public LOG2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG2, 0); }
	public LOWER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOWER, 0); }
	public LPAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LPAD, 0); }
	public LTRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LTRIM, 0); }
	public MAKEDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKEDATE, 0); }
	public MAKETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKETIME, 0); }
	public MAKE_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKE_SET, 0); }
	public MASTER_POS_WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_POS_WAIT, 0); }
	public MBRCONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRCONTAINS, 0); }
	public MBRDISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRDISJOINT, 0); }
	public MBREQUAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBREQUAL, 0); }
	public MBRINTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRINTERSECTS, 0); }
	public MBROVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBROVERLAPS, 0); }
	public MBRTOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRTOUCHES, 0); }
	public MBRWITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRWITHIN, 0); }
	public MD5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MD5, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MICROSECOND, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE, 0); }
	public MLINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MLINEFROMTEXT, 0); }
	public MLINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MLINEFROMWKB, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTH, 0); }
	public MONTHNAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTHNAME, 0); }
	public MPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOINTFROMTEXT, 0); }
	public MPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOINTFROMWKB, 0); }
	public MPOLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOLYFROMTEXT, 0); }
	public MPOLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOLYFROMWKB, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRING, 0); }
	public MULTILINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
	public MULTILINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINT, 0); }
	public MULTIPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
	public MULTIPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGON, 0); }
	public MULTIPOLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
	public MULTIPOLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
	public NAME_CONST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAME_CONST, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULLIF, 0); }
	public NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMGEOMETRIES, 0); }
	public NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMINTERIORRINGS, 0); }
	public NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMPOINTS, 0); }
	public OCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OCT, 0); }
	public OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OCTET_LENGTH, 0); }
	public ORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORD, 0); }
	public OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OVERLAPS, 0); }
	public PERIOD_ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERIOD_ADD, 0); }
	public PERIOD_DIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERIOD_DIFF, 0); }
	public PI(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PI, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINT, 0); }
	public POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTFROMTEXT, 0); }
	public POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTFROMWKB, 0); }
	public POINTN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTN, 0); }
	public POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYFROMTEXT, 0); }
	public POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYFROMWKB, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGON, 0); }
	public POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGONFROMTEXT, 0); }
	public POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGONFROMWKB, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POSITION, 0); }
	public POW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POW, 0); }
	public POWER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POWER, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUARTER, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUOTE, 0); }
	public RADIANS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RADIANS, 0); }
	public RAND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RAND, 0); }
	public RANDOM_BYTES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RANDOM_BYTES, 0); }
	public RELEASE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE_LOCK, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public ROUND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUND, 0); }
	public ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW_COUNT, 0); }
	public RPAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RPAD, 0); }
	public RTRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RTRIM, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND, 0); }
	public SEC_TO_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SEC_TO_TIME, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION_USER, 0); }
	public SHA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA, 0); }
	public SHA1(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA1, 0); }
	public SHA2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA2, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGN, 0); }
	public SIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIN, 0); }
	public SLEEP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLEEP, 0); }
	public SOUNDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOUNDEX, 0); }
	public SQL_THREAD_WAIT_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
	public SQRT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQRT, 0); }
	public SRID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SRID, 0); }
	public STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTPOINT, 0); }
	public STRCMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRCMP, 0); }
	public STR_TO_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STR_TO_DATE, 0); }
	public ST_AREA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_AREA, 0); }
	public ST_ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASBINARY, 0); }
	public ST_ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASTEXT, 0); }
	public ST_ASWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASWKB, 0); }
	public ST_ASWKT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASWKT, 0); }
	public ST_BUFFER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_BUFFER, 0); }
	public ST_CENTROID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CENTROID, 0); }
	public ST_CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CONTAINS, 0); }
	public ST_CROSSES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CROSSES, 0); }
	public ST_DIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DIFFERENCE, 0); }
	public ST_DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DIMENSION, 0); }
	public ST_DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DISJOINT, 0); }
	public ST_DISTANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DISTANCE, 0); }
	public ST_ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ENDPOINT, 0); }
	public ST_ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ENVELOPE, 0); }
	public ST_EQUALS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_EQUALS, 0); }
	public ST_EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_EXTERIORRING, 0); }
	public ST_GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
	public ST_GEOMCOLLFROMTXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
	public ST_GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
	public ST_GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public ST_GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
	public ST_GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
	public ST_GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
	public ST_GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYN, 0); }
	public ST_GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
	public ST_GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
	public ST_GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
	public ST_INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERIORRINGN, 0); }
	public ST_INTERSECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERSECTION, 0); }
	public ST_INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERSECTS, 0); }
	public ST_ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISCLOSED, 0); }
	public ST_ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISEMPTY, 0); }
	public ST_ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISSIMPLE, 0); }
	public ST_LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
	public ST_LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINEFROMWKB, 0); }
	public ST_LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
	public ST_LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
	public ST_NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
	public ST_NUMINTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
	public ST_NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
	public ST_NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMPOINTS, 0); }
	public ST_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_OVERLAPS, 0); }
	public ST_POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
	public ST_POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTFROMWKB, 0); }
	public ST_POINTN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTN, 0); }
	public ST_POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
	public ST_POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYFROMWKB, 0); }
	public ST_POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
	public ST_POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
	public ST_SRID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_SRID, 0); }
	public ST_STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_STARTPOINT, 0); }
	public ST_SYMDIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
	public ST_TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_TOUCHES, 0); }
	public ST_UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_UNION, 0); }
	public ST_WITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_WITHIN, 0); }
	public ST_X(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_X, 0); }
	public ST_Y(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_Y, 0); }
	public SUBDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBDATE, 0); }
	public SUBSTRING_INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING_INDEX, 0); }
	public SUBTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBTIME, 0); }
	public SYSTEM_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SYSTEM_USER, 0); }
	public TAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TAN, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMEDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMEDIFF, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public TIMESTAMPADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMPADD, 0); }
	public TIMESTAMPDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMPDIFF, 0); }
	public TIME_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME_FORMAT, 0); }
	public TIME_TO_SEC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME_TO_SEC, 0); }
	public TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TOUCHES, 0); }
	public TO_BASE64(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_BASE64, 0); }
	public TO_DAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_DAYS, 0); }
	public TO_SECONDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_SECONDS, 0); }
	public UCASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UCASE, 0); }
	public UNCOMPRESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMPRESS, 0); }
	public UNCOMPRESSED_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
	public UNHEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNHEX, 0); }
	public UNIX_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
	public UPDATEXML(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATEXML, 0); }
	public UPPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPPER, 0); }
	public UUID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UUID, 0); }
	public UUID_SHORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UUID_SHORT, 0); }
	public VALIDATE_PASSWORD_STRENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VERSION, 0); }
	public WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEK, 0); }
	public WEEKDAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEKDAY, 0); }
	public WEEKOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEKOFYEAR, 0); }
	public WEIGHT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEIGHT_STRING, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHIN, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public YEARWEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEARWEEK, 0); }
	public Y_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.Y_FUNCTION, 0); }
	public X_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X_FUNCTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionNameBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionNameBase) {
			listener.enterFunctionNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionNameBase) {
			listener.exitFunctionNameBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionNameBase) {
			return visitor.visitFunctionNameBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


